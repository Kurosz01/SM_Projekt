
PID_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad38  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800af08  0800af08  0001af08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2bc  0800b2bc  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2bc  0800b2bc  0001b2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2c4  0800b2c4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2c4  0800b2c4  0001b2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2c8  0800b2c8  0001b2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b2cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  200001f0  0800b4bc  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a98  0800b4bc  00020a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018652  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003309  00000000  00000000  000388b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109a  00000000  00000000  0003d100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028653  00000000  00000000  0003e19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b04d  00000000  00000000  000667ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f650f  00000000  00000000  0008183a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d00  00000000  00000000  00177d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0017ea4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aef0 	.word	0x0800aef0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800aef0 	.word	0x0800aef0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <BMP280_Read8+0x38>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	f107 030f 	add.w	r3, r7, #15
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	21ec      	movs	r1, #236	; 0xec
 8000fac:	f002 fa58 	bl	8003460 <HAL_I2C_Mem_Read>
  return tmp;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000020c 	.word	0x2000020c

08000fc0 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <BMP280_Read16+0x40>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	21ec      	movs	r1, #236	; 0xec
 8000fe4:	f002 fa3c 	bl	8003460 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000fe8:	7b3b      	ldrb	r3, [r7, #12]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	7b7b      	ldrb	r3, [r7, #13]
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000020c 	.word	0x2000020c

08001004 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ffd5 	bl	8000fc0 <BMP280_Read16>
 8001016:	4603      	mov	r3, r0
 8001018:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800101a:	89fb      	ldrh	r3, [r7, #14]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	b29b      	uxth	r3, r3
 8001020:	b21a      	sxth	r2, r3
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21b      	sxth	r3, r3
 800102c:	b29b      	uxth	r3, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af04      	add	r7, sp, #16
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <BMP280_Write8+0x34>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	b29a      	uxth	r2, r3
 8001050:	230a      	movs	r3, #10
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2301      	movs	r3, #1
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	1dbb      	adds	r3, r7, #6
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	21ec      	movs	r1, #236	; 0xec
 8001060:	f002 f8ea 	bl	8003238 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000020c 	.word	0x2000020c

08001070 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af04      	add	r7, sp, #16
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <BMP280_Read24+0x40>)
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	b29a      	uxth	r2, r3
 8001082:	230a      	movs	r3, #10
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	2303      	movs	r3, #3
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	21ec      	movs	r1, #236	; 0xec
 8001094:	f002 f9e4 	bl	8003460 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001098:	7b3b      	ldrb	r3, [r7, #12]
 800109a:	041a      	lsls	r2, r3, #16
 800109c:	7b7b      	ldrb	r3, [r7, #13]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	4313      	orrs	r3, r2
 80010a2:	7bba      	ldrb	r2, [r7, #14]
 80010a4:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000020c 	.word	0x2000020c

080010b4 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	70fb      	strb	r3, [r7, #3]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70bb      	strb	r3, [r7, #2]
 80010ca:	4613      	mov	r3, r2
 80010cc:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80010ce:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <BMP280_Init+0x13c>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d901      	bls.n	80010de <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80010da:	2303      	movs	r3, #3
 80010dc:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80010de:	4a45      	ldr	r2, [pc, #276]	; (80011f4 <BMP280_Init+0x140>)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d901      	bls.n	80010f8 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80010f4:	2305      	movs	r3, #5
 80010f6:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80010f8:	4a3f      	ldr	r2, [pc, #252]	; (80011f8 <BMP280_Init+0x144>)
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	2b05      	cmp	r3, #5
 8001102:	d901      	bls.n	8001108 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001104:	2305      	movs	r3, #5
 8001106:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001108:	4a3c      	ldr	r2, [pc, #240]	; (80011fc <BMP280_Init+0x148>)
 800110a:	78bb      	ldrb	r3, [r7, #2]
 800110c:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800110e:	bf00      	nop
 8001110:	20d0      	movs	r0, #208	; 0xd0
 8001112:	f7ff ff37 	bl	8000f84 <BMP280_Read8>
 8001116:	4603      	mov	r3, r0
 8001118:	2b58      	cmp	r3, #88	; 0x58
 800111a:	d1f9      	bne.n	8001110 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 800111c:	2088      	movs	r0, #136	; 0x88
 800111e:	f7ff ff71 	bl	8001004 <BMP280_Read16LE>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	4b36      	ldr	r3, [pc, #216]	; (8001200 <BMP280_Init+0x14c>)
 8001128:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 800112a:	208a      	movs	r0, #138	; 0x8a
 800112c:	f7ff ff6a 	bl	8001004 <BMP280_Read16LE>
 8001130:	4603      	mov	r3, r0
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b33      	ldr	r3, [pc, #204]	; (8001204 <BMP280_Init+0x150>)
 8001136:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001138:	208c      	movs	r0, #140	; 0x8c
 800113a:	f7ff ff63 	bl	8001004 <BMP280_Read16LE>
 800113e:	4603      	mov	r3, r0
 8001140:	b21a      	sxth	r2, r3
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <BMP280_Init+0x154>)
 8001144:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001146:	208e      	movs	r0, #142	; 0x8e
 8001148:	f7ff ff5c 	bl	8001004 <BMP280_Read16LE>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b2e      	ldr	r3, [pc, #184]	; (800120c <BMP280_Init+0x158>)
 8001152:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001154:	2090      	movs	r0, #144	; 0x90
 8001156:	f7ff ff55 	bl	8001004 <BMP280_Read16LE>
 800115a:	4603      	mov	r3, r0
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <BMP280_Init+0x15c>)
 8001160:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001162:	2092      	movs	r0, #146	; 0x92
 8001164:	f7ff ff4e 	bl	8001004 <BMP280_Read16LE>
 8001168:	4603      	mov	r3, r0
 800116a:	b21a      	sxth	r2, r3
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <BMP280_Init+0x160>)
 800116e:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001170:	2094      	movs	r0, #148	; 0x94
 8001172:	f7ff ff47 	bl	8001004 <BMP280_Read16LE>
 8001176:	4603      	mov	r3, r0
 8001178:	b21a      	sxth	r2, r3
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <BMP280_Init+0x164>)
 800117c:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800117e:	2096      	movs	r0, #150	; 0x96
 8001180:	f7ff ff40 	bl	8001004 <BMP280_Read16LE>
 8001184:	4603      	mov	r3, r0
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <BMP280_Init+0x168>)
 800118a:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 800118c:	2098      	movs	r0, #152	; 0x98
 800118e:	f7ff ff39 	bl	8001004 <BMP280_Read16LE>
 8001192:	4603      	mov	r3, r0
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <BMP280_Init+0x16c>)
 8001198:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 800119a:	209a      	movs	r0, #154	; 0x9a
 800119c:	f7ff ff32 	bl	8001004 <BMP280_Read16LE>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <BMP280_Init+0x170>)
 80011a6:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80011a8:	209c      	movs	r0, #156	; 0x9c
 80011aa:	f7ff ff2b 	bl	8001004 <BMP280_Read16LE>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <BMP280_Init+0x174>)
 80011b4:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80011b6:	209e      	movs	r0, #158	; 0x9e
 80011b8:	f7ff ff24 	bl	8001004 <BMP280_Read16LE>
 80011bc:	4603      	mov	r3, r0
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <BMP280_Init+0x178>)
 80011c2:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	015b      	lsls	r3, r3, #5
 80011c8:	b25a      	sxtb	r2, r3
 80011ca:	78bb      	ldrb	r3, [r7, #2]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	20f4      	movs	r0, #244	; 0xf4
 80011e2:	f7ff ff29 	bl	8001038 <BMP280_Write8>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000020c 	.word	0x2000020c
 80011f4:	20000212 	.word	0x20000212
 80011f8:	20000210 	.word	0x20000210
 80011fc:	20000211 	.word	0x20000211
 8001200:	20000228 	.word	0x20000228
 8001204:	20000214 	.word	0x20000214
 8001208:	20000216 	.word	0x20000216
 800120c:	2000022a 	.word	0x2000022a
 8001210:	20000218 	.word	0x20000218
 8001214:	2000021a 	.word	0x2000021a
 8001218:	2000021c 	.word	0x2000021c
 800121c:	2000021e 	.word	0x2000021e
 8001220:	20000220 	.word	0x20000220
 8001224:	20000222 	.word	0x20000222
 8001228:	20000224 	.word	0x20000224
 800122c:	20000226 	.word	0x20000226

08001230 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <BMP280_ReadTemperature+0xfc>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d16d      	bne.n	800131a <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800123e:	20f4      	movs	r0, #244	; 0xf4
 8001240:	f7ff fea0 	bl	8000f84 <BMP280_Read8>
 8001244:	4603      	mov	r3, r0
 8001246:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	f023 0303 	bic.w	r3, r3, #3
 800124e:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	4619      	mov	r1, r3
 800125c:	20f4      	movs	r0, #244	; 0xf4
 800125e:	f7ff feeb 	bl	8001038 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8001262:	20f4      	movs	r0, #244	; 0xf4
 8001264:	f7ff fe8e 	bl	8000f84 <BMP280_Read8>
 8001268:	4603      	mov	r3, r0
 800126a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 800126c:	7dbb      	ldrb	r3, [r7, #22]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001274:	7dbb      	ldrb	r3, [r7, #22]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d14f      	bne.n	800131a <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800127a:	20f4      	movs	r0, #244	; 0xf4
 800127c:	f7ff fe82 	bl	8000f84 <BMP280_Read8>
 8001280:	4603      	mov	r3, r0
 8001282:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001284:	7dbb      	ldrb	r3, [r7, #22]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800128c:	7dbb      	ldrb	r3, [r7, #22]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d000      	beq.n	8001294 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001292:	e7f2      	b.n	800127a <BMP280_ReadTemperature+0x4a>
				  break;
 8001294:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001296:	20fa      	movs	r0, #250	; 0xfa
 8001298:	f7ff feea 	bl	8001070 <BMP280_Read24>
 800129c:	4603      	mov	r3, r0
 800129e:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	111b      	asrs	r3, r3, #4
 80012a4:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	10da      	asrs	r2, r3, #3
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <BMP280_ReadTemperature+0x100>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80012b2:	4a20      	ldr	r2, [pc, #128]	; (8001334 <BMP280_ReadTemperature+0x104>)
 80012b4:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	12db      	asrs	r3, r3, #11
 80012be:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	111b      	asrs	r3, r3, #4
 80012c4:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <BMP280_ReadTemperature+0x100>)
 80012c6:	8812      	ldrh	r2, [r2, #0]
 80012c8:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	1112      	asrs	r2, r2, #4
 80012ce:	4918      	ldr	r1, [pc, #96]	; (8001330 <BMP280_ReadTemperature+0x100>)
 80012d0:	8809      	ldrh	r1, [r1, #0]
 80012d2:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012d8:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <BMP280_ReadTemperature+0x108>)
 80012dc:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012e4:	139b      	asrs	r3, r3, #14
 80012e6:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a13      	ldr	r2, [pc, #76]	; (800133c <BMP280_ReadTemperature+0x10c>)
 80012f0:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <BMP280_ReadTemperature+0x10c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	3380      	adds	r3, #128	; 0x80
 80012fe:	121b      	asrs	r3, r3, #8
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001308:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001340 <BMP280_ReadTemperature+0x110>
 8001314:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001318:	e001      	b.n	800131e <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 800131a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001344 <BMP280_ReadTemperature+0x114>
}
 800131e:	eef0 7a47 	vmov.f32	s15, s14
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000212 	.word	0x20000212
 8001330:	20000228 	.word	0x20000228
 8001334:	20000214 	.word	0x20000214
 8001338:	20000216 	.word	0x20000216
 800133c:	2000022c 	.word	0x2000022c
 8001340:	42c80000 	.word	0x42c80000
 8001344:	c2c60000 	.word	0xc2c60000

08001348 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f023 030f 	bic.w	r3, r3, #15
 8001358:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	f043 030c 	orr.w	r3, r3, #12
 8001366:	b2db      	uxtb	r3, r3
 8001368:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	b2db      	uxtb	r3, r3
 8001372:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001374:	7bbb      	ldrb	r3, [r7, #14]
 8001376:	f043 030c 	orr.w	r3, r3, #12
 800137a:	b2db      	uxtb	r3, r3
 800137c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	f043 0308 	orr.w	r3, r3, #8
 8001384:	b2db      	uxtb	r3, r3
 8001386:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001388:	f107 0208 	add.w	r2, r7, #8
 800138c:	2364      	movs	r3, #100	; 0x64
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2304      	movs	r3, #4
 8001392:	214e      	movs	r1, #78	; 0x4e
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <lcd_send_cmd+0x5c>)
 8001396:	f001 fe5b 	bl	8003050 <HAL_I2C_Master_Transmit>
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000284 	.word	0x20000284

080013a8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f023 030f 	bic.w	r3, r3, #15
 80013b8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	f043 030d 	orr.w	r3, r3, #13
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	f043 0309 	orr.w	r3, r3, #9
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	f043 030d 	orr.w	r3, r3, #13
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	f043 0309 	orr.w	r3, r3, #9
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80013e8:	f107 0208 	add.w	r2, r7, #8
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2304      	movs	r3, #4
 80013f2:	214e      	movs	r1, #78	; 0x4e
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <lcd_send_data+0x5c>)
 80013f6:	f001 fe2b 	bl	8003050 <HAL_I2C_Master_Transmit>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000284 	.word	0x20000284

08001408 <lcd_clear>:

void lcd_clear (void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800140e:	2080      	movs	r0, #128	; 0x80
 8001410:	f7ff ff9a 	bl	8001348 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	e005      	b.n	8001426 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800141a:	2020      	movs	r0, #32
 800141c:	f7ff ffc4 	bl	80013a8 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3301      	adds	r3, #1
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b45      	cmp	r3, #69	; 0x45
 800142a:	ddf6      	ble.n	800141a <lcd_clear+0x12>
	}
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
    switch (row)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <lcd_put_cur+0x18>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d005      	beq.n	8001458 <lcd_put_cur+0x22>
 800144c:	e009      	b.n	8001462 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001454:	603b      	str	r3, [r7, #0]
            break;
 8001456:	e004      	b.n	8001462 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800145e:	603b      	str	r3, [r7, #0]
            break;
 8001460:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff6e 	bl	8001348 <lcd_send_cmd>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <lcd_init>:


void lcd_init (void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001478:	2032      	movs	r0, #50	; 0x32
 800147a:	f001 f999 	bl	80027b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800147e:	2030      	movs	r0, #48	; 0x30
 8001480:	f7ff ff62 	bl	8001348 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001484:	2005      	movs	r0, #5
 8001486:	f001 f993 	bl	80027b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800148a:	2030      	movs	r0, #48	; 0x30
 800148c:	f7ff ff5c 	bl	8001348 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001490:	2001      	movs	r0, #1
 8001492:	f001 f98d 	bl	80027b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001496:	2030      	movs	r0, #48	; 0x30
 8001498:	f7ff ff56 	bl	8001348 <lcd_send_cmd>
	HAL_Delay(10);
 800149c:	200a      	movs	r0, #10
 800149e:	f001 f987 	bl	80027b0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80014a2:	2020      	movs	r0, #32
 80014a4:	f7ff ff50 	bl	8001348 <lcd_send_cmd>
	HAL_Delay(10);
 80014a8:	200a      	movs	r0, #10
 80014aa:	f001 f981 	bl	80027b0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80014ae:	2028      	movs	r0, #40	; 0x28
 80014b0:	f7ff ff4a 	bl	8001348 <lcd_send_cmd>
	HAL_Delay(1);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f001 f97b 	bl	80027b0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80014ba:	2008      	movs	r0, #8
 80014bc:	f7ff ff44 	bl	8001348 <lcd_send_cmd>
	HAL_Delay(1);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f001 f975 	bl	80027b0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff ff3e 	bl	8001348 <lcd_send_cmd>
	HAL_Delay(1);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f001 f96f 	bl	80027b0 <HAL_Delay>
	HAL_Delay(1);
 80014d2:	2001      	movs	r0, #1
 80014d4:	f001 f96c 	bl	80027b0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80014d8:	2006      	movs	r0, #6
 80014da:	f7ff ff35 	bl	8001348 <lcd_send_cmd>
	HAL_Delay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f001 f966 	bl	80027b0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80014e4:	200c      	movs	r0, #12
 80014e6:	f7ff ff2f 	bl	8001348 <lcd_send_cmd>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}

080014ee <lcd_send_string>:

void lcd_send_string (char *str)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80014f6:	e006      	b.n	8001506 <lcd_send_string+0x18>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff51 	bl	80013a8 <lcd_send_data>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f4      	bne.n	80014f8 <lcd_send_string+0xa>
}
 800150e:	bf00      	nop
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <calc_discrete_pid>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float32_t calc_discrete_pid(pid_t* pid, float32_t setpoint, float32_t measured){
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b08c      	sub	sp, #48	; 0x30
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	ed87 0a02 	vstr	s0, [r7, #8]
 8001524:	edc7 0a01 	vstr	s1, [r7, #4]
	float32_t u=0, P, I, D, error, integral, derivative;
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c

	error = setpoint - measured;
 800152e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001532:	edd7 7a01 	vldr	s15, [r7, #4]
 8001536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	P = pid->p.Kp * error;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	integral = pid->prev_int + (error+pid->prev_error);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	ed93 7a05 	vldr	s14, [r3, #20]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	edd3 6a04 	vldr	s13, [r3, #16]
 800155c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001568:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->prev_int = integral;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a3a      	ldr	r2, [r7, #32]
 8001570:	615a      	str	r2, [r3, #20]
	I = pid->p.Ki * integral * (pid->p.dt/2.0);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	ed93 7a01 	vldr	s14, [r3, #4]
 8001578:	edd7 7a08 	vldr	s15, [r7, #32]
 800157c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001580:	ee17 0a90 	vmov	r0, s15
 8001584:	f7ff f800 	bl	8000588 <__aeabi_f2d>
 8001588:	4604      	mov	r4, r0
 800158a:	460d      	mov	r5, r1
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fff9 	bl	8000588 <__aeabi_f2d>
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800159e:	f7ff f975 	bl	800088c <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4620      	mov	r0, r4
 80015a8:	4629      	mov	r1, r5
 80015aa:	f7ff f845 	bl	8000638 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fb17 	bl	8000be8 <__aeabi_d2f>
 80015ba:	4603      	mov	r3, r0
 80015bc:	61fb      	str	r3, [r7, #28]

	derivative = (error - pid->prev_error)/pid->p.dt;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80015c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80015c8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80015d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d6:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->prev_error = error;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015de:	611a      	str	r2, [r3, #16]
	D = pid->p.Kd * derivative;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80015ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ee:	edc7 7a05 	vstr	s15, [r7, #20]

	u = P + I + D;
 80015f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80015fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001606:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD1_Pin);
 800160a:	2101      	movs	r1, #1
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <calc_discrete_pid+0x10c>)
 800160e:	f001 fc74 	bl	8002efa <HAL_GPIO_TogglePin>
	return u;
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	ee07 3a90 	vmov	s15, r3
}
 8001618:	eeb0 0a67 	vmov.f32	s0, s15
 800161c:	3730      	adds	r7, #48	; 0x30
 800161e:	46bd      	mov	sp, r7
 8001620:	bdb0      	pop	{r4, r5, r7, pc}
 8001622:	bf00      	nop
 8001624:	40020400 	.word	0x40020400

08001628 <Enkoder_temperatura>:

void Enkoder_temperatura(){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

	int curState = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 800162e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001632:	4855      	ldr	r0, [pc, #340]	; (8001788 <Enkoder_temperatura+0x160>)
 8001634:	f001 fc30 	bl	8002e98 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	607b      	str	r3, [r7, #4]
	if (curState == GPIO_PIN_SET && prevState == GPIO_PIN_RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d10d      	bne.n	800165e <Enkoder_temperatura+0x36>
 8001642:	4b52      	ldr	r3, [pc, #328]	; (800178c <Enkoder_temperatura+0x164>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <Enkoder_temperatura+0x36>
	{
		set_point_allow = !set_point_allow;
 800164a:	4b51      	ldr	r3, [pc, #324]	; (8001790 <Enkoder_temperatura+0x168>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	bf0c      	ite	eq
 8001652:	2301      	moveq	r3, #1
 8001654:	2300      	movne	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <Enkoder_temperatura+0x168>)
 800165c:	601a      	str	r2, [r3, #0]
	}
	prevState = curState;
 800165e:	4a4b      	ldr	r2, [pc, #300]	; (800178c <Enkoder_temperatura+0x164>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6013      	str	r3, [r2, #0]

	if (set_point_allow == 1){
 8001664:	4b4a      	ldr	r3, [pc, #296]	; (8001790 <Enkoder_temperatura+0x168>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	f040 8085 	bne.w	8001778 <Enkoder_temperatura+0x150>

		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET)
 800166e:	2120      	movs	r1, #32
 8001670:	4848      	ldr	r0, [pc, #288]	; (8001794 <Enkoder_temperatura+0x16c>)
 8001672:	f001 fc11 	bl	8002e98 <HAL_GPIO_ReadPin>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d17d      	bne.n	8001778 <Enkoder_temperatura+0x150>
		  {
			  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET)
 800167c:	2140      	movs	r1, #64	; 0x40
 800167e:	4845      	ldr	r0, [pc, #276]	; (8001794 <Enkoder_temperatura+0x16c>)
 8001680:	f001 fc0a 	bl	8002e98 <HAL_GPIO_ReadPin>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d126      	bne.n	80016d8 <Enkoder_temperatura+0xb0>
			  {
				  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){};
 800168a:	bf00      	nop
 800168c:	2140      	movs	r1, #64	; 0x40
 800168e:	4841      	ldr	r0, [pc, #260]	; (8001794 <Enkoder_temperatura+0x16c>)
 8001690:	f001 fc02 	bl	8002e98 <HAL_GPIO_ReadPin>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f8      	beq.n	800168c <Enkoder_temperatura+0x64>
				  set_point = set_point - 0.1;
 800169a:	4b3f      	ldr	r3, [pc, #252]	; (8001798 <Enkoder_temperatura+0x170>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff72 	bl	8000588 <__aeabi_f2d>
 80016a4:	a336      	add	r3, pc, #216	; (adr r3, 8001780 <Enkoder_temperatura+0x158>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe fe0d 	bl	80002c8 <__aeabi_dsub>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff fa97 	bl	8000be8 <__aeabi_d2f>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a36      	ldr	r2, [pc, #216]	; (8001798 <Enkoder_temperatura+0x170>)
 80016be:	6013      	str	r3, [r2, #0]
				  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET){};
 80016c0:	bf00      	nop
 80016c2:	2120      	movs	r1, #32
 80016c4:	4833      	ldr	r0, [pc, #204]	; (8001794 <Enkoder_temperatura+0x16c>)
 80016c6:	f001 fbe7 	bl	8002e98 <HAL_GPIO_ReadPin>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f8      	beq.n	80016c2 <Enkoder_temperatura+0x9a>
				  HAL_Delay(10);
 80016d0:	200a      	movs	r0, #10
 80016d2:	f001 f86d 	bl	80027b0 <HAL_Delay>
 80016d6:	e034      	b.n	8001742 <Enkoder_temperatura+0x11a>
			  }

			  else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)
 80016d8:	2140      	movs	r1, #64	; 0x40
 80016da:	482e      	ldr	r0, [pc, #184]	; (8001794 <Enkoder_temperatura+0x16c>)
 80016dc:	f001 fbdc 	bl	8002e98 <HAL_GPIO_ReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d12d      	bne.n	8001742 <Enkoder_temperatura+0x11a>
			  {
				  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET){};
 80016e6:	bf00      	nop
 80016e8:	2140      	movs	r1, #64	; 0x40
 80016ea:	482a      	ldr	r0, [pc, #168]	; (8001794 <Enkoder_temperatura+0x16c>)
 80016ec:	f001 fbd4 	bl	8002e98 <HAL_GPIO_ReadPin>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d0f8      	beq.n	80016e8 <Enkoder_temperatura+0xc0>
				  set_point = set_point + 0.1;
 80016f6:	4b28      	ldr	r3, [pc, #160]	; (8001798 <Enkoder_temperatura+0x170>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff44 	bl	8000588 <__aeabi_f2d>
 8001700:	a31f      	add	r3, pc, #124	; (adr r3, 8001780 <Enkoder_temperatura+0x158>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe fde1 	bl	80002cc <__adddf3>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff fa69 	bl	8000be8 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <Enkoder_temperatura+0x170>)
 800171a:	6013      	str	r3, [r2, #0]
				  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET){};
 800171c:	bf00      	nop
 800171e:	2120      	movs	r1, #32
 8001720:	481c      	ldr	r0, [pc, #112]	; (8001794 <Enkoder_temperatura+0x16c>)
 8001722:	f001 fbb9 	bl	8002e98 <HAL_GPIO_ReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f8      	beq.n	800171e <Enkoder_temperatura+0xf6>
				  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){};
 800172c:	bf00      	nop
 800172e:	2140      	movs	r1, #64	; 0x40
 8001730:	4818      	ldr	r0, [pc, #96]	; (8001794 <Enkoder_temperatura+0x16c>)
 8001732:	f001 fbb1 	bl	8002e98 <HAL_GPIO_ReadPin>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f8      	beq.n	800172e <Enkoder_temperatura+0x106>
				  HAL_Delay(10);
 800173c:	200a      	movs	r0, #10
 800173e:	f001 f837 	bl	80027b0 <HAL_Delay>
			  }

			  if(set_point < 22) set_point = 22;
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <Enkoder_temperatura+0x170>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800174c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	d502      	bpl.n	800175c <Enkoder_temperatura+0x134>
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <Enkoder_temperatura+0x170>)
 8001758:	4a10      	ldr	r2, [pc, #64]	; (800179c <Enkoder_temperatura+0x174>)
 800175a:	601a      	str	r2, [r3, #0]
			  if(set_point > 35) set_point = 35;
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <Enkoder_temperatura+0x170>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80017a0 <Enkoder_temperatura+0x178>
 8001766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	dc00      	bgt.n	8001772 <Enkoder_temperatura+0x14a>
		  }
	}
}
 8001770:	e002      	b.n	8001778 <Enkoder_temperatura+0x150>
			  if(set_point > 35) set_point = 35;
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <Enkoder_temperatura+0x170>)
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <Enkoder_temperatura+0x17c>)
 8001776:	601a      	str	r2, [r3, #0]
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	9999999a 	.word	0x9999999a
 8001784:	3fb99999 	.word	0x3fb99999
 8001788:	40020800 	.word	0x40020800
 800178c:	2000093c 	.word	0x2000093c
 8001790:	20000938 	.word	0x20000938
 8001794:	40020000 	.word	0x40020000
 8001798:	20000000 	.word	0x20000000
 800179c:	41b00000 	.word	0x41b00000
 80017a0:	420c0000 	.word	0x420c0000
 80017a4:	420c0000 	.word	0x420c0000

080017a8 <LCD_print>:

void LCD_print(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

	sprintf(lcd_buffer_temp, "TempSens: %.2f", temperatura_czujnik);
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <LCD_print+0x54>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fee9 	bl	8000588 <__aeabi_f2d>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4911      	ldr	r1, [pc, #68]	; (8001800 <LCD_print+0x58>)
 80017bc:	4811      	ldr	r0, [pc, #68]	; (8001804 <LCD_print+0x5c>)
 80017be:	f007 f9f1 	bl	8008ba4 <siprintf>
	sprintf(lcd_buffer_set_point, "TempSet: %.2f", set_point);
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <LCD_print+0x60>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fede 	bl	8000588 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	490e      	ldr	r1, [pc, #56]	; (800180c <LCD_print+0x64>)
 80017d2:	480f      	ldr	r0, [pc, #60]	; (8001810 <LCD_print+0x68>)
 80017d4:	f007 f9e6 	bl	8008ba4 <siprintf>
	lcd_clear();
 80017d8:	f7ff fe16 	bl	8001408 <lcd_clear>
	lcd_put_cur(0, 0);
 80017dc:	2100      	movs	r1, #0
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff fe29 	bl	8001436 <lcd_put_cur>
	lcd_send_string(lcd_buffer_temp);
 80017e4:	4807      	ldr	r0, [pc, #28]	; (8001804 <LCD_print+0x5c>)
 80017e6:	f7ff fe82 	bl	80014ee <lcd_send_string>
	lcd_put_cur(1, 0);
 80017ea:	2100      	movs	r1, #0
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff fe22 	bl	8001436 <lcd_put_cur>
	lcd_send_string(lcd_buffer_set_point);
 80017f2:	4807      	ldr	r0, [pc, #28]	; (8001810 <LCD_print+0x68>)
 80017f4:	f7ff fe7b 	bl	80014ee <lcd_send_string>

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000900 	.word	0x20000900
 8001800:	0800af08 	.word	0x0800af08
 8001804:	20000904 	.word	0x20000904
 8001808:	20000000 	.word	0x20000000
 800180c:	0800af18 	.word	0x0800af18
 8001810:	20000914 	.word	0x20000914

08001814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001818:	f000 ff6d 	bl	80026f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181c:	f000 f830 	bl	8001880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001820:	f000 fa3a 	bl	8001c98 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001824:	f000 f9da 	bl	8001bdc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001828:	f000 fa08 	bl	8001c3c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800182c:	f000 f890 	bl	8001950 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001830:	f000 f90e 	bl	8001a50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001834:	f000 f982 	bl	8001b3c <MX_TIM3_Init>
  MX_I2C2_Init();
 8001838:	f000 f8ca 	bl	80019d0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 800183c:	2301      	movs	r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	2101      	movs	r1, #1
 8001842:	480a      	ldr	r0, [pc, #40]	; (800186c <main+0x58>)
 8001844:	f7ff fc36 	bl	80010b4 <BMP280_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001848:	210c      	movs	r1, #12
 800184a:	4809      	ldr	r0, [pc, #36]	; (8001870 <main+0x5c>)
 800184c:	f003 fd98 	bl	8005380 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001850:	4808      	ldr	r0, [pc, #32]	; (8001874 <main+0x60>)
 8001852:	f003 fcbb 	bl	80051cc <HAL_TIM_Base_Start_IT>
  //HAL_UART_Receive_IT(&huart3, &Received, 4);
  HAL_UART_Receive_IT(&huart3, &Received, 2);
 8001856:	2202      	movs	r2, #2
 8001858:	4907      	ldr	r1, [pc, #28]	; (8001878 <main+0x64>)
 800185a:	4808      	ldr	r0, [pc, #32]	; (800187c <main+0x68>)
 800185c:	f004 feeb 	bl	8006636 <HAL_UART_Receive_IT>
  lcd_init();
 8001860:	f7ff fe08 	bl	8001474 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Enkoder_temperatura();
 8001864:	f7ff fee0 	bl	8001628 <Enkoder_temperatura>
 8001868:	e7fc      	b.n	8001864 <main+0x50>
 800186a:	bf00      	nop
 800186c:	20000230 	.word	0x20000230
 8001870:	200002d8 	.word	0x200002d8
 8001874:	20000324 	.word	0x20000324
 8001878:	20000940 	.word	0x20000940
 800187c:	20000370 	.word	0x20000370

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b094      	sub	sp, #80	; 0x50
 8001884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 0320 	add.w	r3, r7, #32
 800188a:	2230      	movs	r2, #48	; 0x30
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f007 f9eb 	bl	8008c6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018a4:	f002 fb70 	bl	8003f88 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a8:	4b27      	ldr	r3, [pc, #156]	; (8001948 <SystemClock_Config+0xc8>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a26      	ldr	r2, [pc, #152]	; (8001948 <SystemClock_Config+0xc8>)
 80018ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <SystemClock_Config+0xc8>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <SystemClock_Config+0xcc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018c8:	4a20      	ldr	r2, [pc, #128]	; (800194c <SystemClock_Config+0xcc>)
 80018ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <SystemClock_Config+0xcc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018dc:	2301      	movs	r3, #1
 80018de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e6:	2302      	movs	r3, #2
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018f0:	2304      	movs	r3, #4
 80018f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80018f4:	2348      	movs	r3, #72	; 0x48
 80018f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80018fc:	2303      	movs	r3, #3
 80018fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001900:	f107 0320 	add.w	r3, r7, #32
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fb4f 	bl	8003fa8 <HAL_RCC_OscConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001910:	f000 fb92 	bl	8002038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001914:	230f      	movs	r3, #15
 8001916:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001918:	2302      	movs	r3, #2
 800191a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001924:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	2102      	movs	r1, #2
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fddd 	bl	80044f0 <HAL_RCC_ClockConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800193c:	f000 fb7c 	bl	8002038 <Error_Handler>
  }
}
 8001940:	bf00      	nop
 8001942:	3750      	adds	r7, #80	; 0x50
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40007000 	.word	0x40007000

08001950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <MX_I2C1_Init+0x74>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <MX_I2C1_Init+0x78>)
 8001958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <MX_I2C1_Init+0x74>)
 800195c:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <MX_I2C1_Init+0x7c>)
 800195e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <MX_I2C1_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <MX_I2C1_Init+0x74>)
 8001968:	2201      	movs	r2, #1
 800196a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_I2C1_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_I2C1_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <MX_I2C1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_I2C1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_I2C1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800198a:	480e      	ldr	r0, [pc, #56]	; (80019c4 <MX_I2C1_Init+0x74>)
 800198c:	f001 fad0 	bl	8002f30 <HAL_I2C_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001996:	f000 fb4f 	bl	8002038 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800199a:	2100      	movs	r1, #0
 800199c:	4809      	ldr	r0, [pc, #36]	; (80019c4 <MX_I2C1_Init+0x74>)
 800199e:	f002 f913 	bl	8003bc8 <HAL_I2CEx_ConfigAnalogFilter>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019a8:	f000 fb46 	bl	8002038 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019ac:	2100      	movs	r1, #0
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_I2C1_Init+0x74>)
 80019b0:	f002 f955 	bl	8003c5e <HAL_I2CEx_ConfigDigitalFilter>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019ba:	f000 fb3d 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000230 	.word	0x20000230
 80019c8:	40005400 	.word	0x40005400
 80019cc:	00808cd2 	.word	0x00808cd2

080019d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <MX_I2C2_Init+0x78>)
 80019d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019dc:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <MX_I2C2_Init+0x7c>)
 80019de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_I2C2_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_I2C2_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a0a:	480e      	ldr	r0, [pc, #56]	; (8001a44 <MX_I2C2_Init+0x74>)
 8001a0c:	f001 fa90 	bl	8002f30 <HAL_I2C_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a16:	f000 fb0f 	bl	8002038 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4809      	ldr	r0, [pc, #36]	; (8001a44 <MX_I2C2_Init+0x74>)
 8001a1e:	f002 f8d3 	bl	8003bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a28:	f000 fb06 	bl	8002038 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_I2C2_Init+0x74>)
 8001a30:	f002 f915 	bl	8003c5e <HAL_I2CEx_ConfigDigitalFilter>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a3a:	f000 fafd 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000284 	.word	0x20000284
 8001a48:	40005800 	.word	0x40005800
 8001a4c:	00808cd2 	.word	0x00808cd2

08001a50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08e      	sub	sp, #56	; 0x38
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a70:	463b      	mov	r3, r7
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	615a      	str	r2, [r3, #20]
 8001a80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <MX_TIM2_Init+0xe8>)
 8001a84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <MX_TIM2_Init+0xe8>)
 8001a8c:	2247      	movs	r2, #71	; 0x47
 8001a8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a90:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <MX_TIM2_Init+0xe8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001a96:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <MX_TIM2_Init+0xe8>)
 8001a98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <MX_TIM2_Init+0xe8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa4:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <MX_TIM2_Init+0xe8>)
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aaa:	4823      	ldr	r0, [pc, #140]	; (8001b38 <MX_TIM2_Init+0xe8>)
 8001aac:	f003 fb36 	bl	800511c <HAL_TIM_Base_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ab6:	f000 fabf 	bl	8002038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	481c      	ldr	r0, [pc, #112]	; (8001b38 <MX_TIM2_Init+0xe8>)
 8001ac8:	f003 ff88 	bl	80059dc <HAL_TIM_ConfigClockSource>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ad2:	f000 fab1 	bl	8002038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ad6:	4818      	ldr	r0, [pc, #96]	; (8001b38 <MX_TIM2_Init+0xe8>)
 8001ad8:	f003 fbf0 	bl	80052bc <HAL_TIM_PWM_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ae2:	f000 faa9 	bl	8002038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	4810      	ldr	r0, [pc, #64]	; (8001b38 <MX_TIM2_Init+0xe8>)
 8001af6:	f004 fc21 	bl	800633c <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b00:	f000 fa9a 	bl	8002038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b04:	2360      	movs	r3, #96	; 0x60
 8001b06:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b14:	463b      	mov	r3, r7
 8001b16:	220c      	movs	r2, #12
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4807      	ldr	r0, [pc, #28]	; (8001b38 <MX_TIM2_Init+0xe8>)
 8001b1c:	f003 fe4a 	bl	80057b4 <HAL_TIM_PWM_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b26:	f000 fa87 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b2a:	4803      	ldr	r0, [pc, #12]	; (8001b38 <MX_TIM2_Init+0xe8>)
 8001b2c:	f000 fb8c 	bl	8002248 <HAL_TIM_MspPostInit>

}
 8001b30:	bf00      	nop
 8001b32:	3738      	adds	r7, #56	; 0x38
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200002d8 	.word	0x200002d8

08001b3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <MX_TIM3_Init+0x98>)
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <MX_TIM3_Init+0x9c>)
 8001b5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <MX_TIM3_Init+0x98>)
 8001b62:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001b66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_TIM3_Init+0x98>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <MX_TIM3_Init+0x98>)
 8001b70:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <MX_TIM3_Init+0x98>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <MX_TIM3_Init+0x98>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b82:	4814      	ldr	r0, [pc, #80]	; (8001bd4 <MX_TIM3_Init+0x98>)
 8001b84:	f003 faca 	bl	800511c <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b8e:	f000 fa53 	bl	8002038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <MX_TIM3_Init+0x98>)
 8001ba0:	f003 ff1c 	bl	80059dc <HAL_TIM_ConfigClockSource>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001baa:	f000 fa45 	bl	8002038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <MX_TIM3_Init+0x98>)
 8001bbc:	f004 fbbe 	bl	800633c <HAL_TIMEx_MasterConfigSynchronization>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001bc6:	f000 fa37 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000324 	.word	0x20000324
 8001bd8:	40000400 	.word	0x40000400

08001bdc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_USART3_UART_Init+0x58>)
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <MX_USART3_UART_Init+0x5c>)
 8001be4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <MX_USART3_UART_Init+0x58>)
 8001be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_USART3_UART_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_USART3_UART_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_USART3_UART_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_USART3_UART_Init+0x58>)
 8001c02:	220c      	movs	r2, #12
 8001c04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <MX_USART3_UART_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_USART3_UART_Init+0x58>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <MX_USART3_UART_Init+0x58>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_USART3_UART_Init+0x58>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_USART3_UART_Init+0x58>)
 8001c20:	f004 fc38 	bl	8006494 <HAL_UART_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c2a:	f000 fa05 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000370 	.word	0x20000370
 8001c38:	40004800 	.word	0x40004800

08001c3c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c4a:	2206      	movs	r2, #6
 8001c4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c50:	2202      	movs	r2, #2
 8001c52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c80:	f002 f839 	bl	8003cf6 <HAL_PCD_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c8a:	f000 f9d5 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200003f8 	.word	0x200003f8

08001c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	; 0x30
 8001c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cae:	4b7a      	ldr	r3, [pc, #488]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a79      	ldr	r2, [pc, #484]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b77      	ldr	r3, [pc, #476]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cc6:	4b74      	ldr	r3, [pc, #464]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a73      	ldr	r2, [pc, #460]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001ccc:	f043 0320 	orr.w	r3, r3, #32
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b71      	ldr	r3, [pc, #452]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cde:	4b6e      	ldr	r3, [pc, #440]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a6d      	ldr	r2, [pc, #436]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b6b      	ldr	r3, [pc, #428]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b65      	ldr	r3, [pc, #404]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	4b62      	ldr	r3, [pc, #392]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a61      	ldr	r2, [pc, #388]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d26:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a5b      	ldr	r2, [pc, #364]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b59      	ldr	r3, [pc, #356]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d3e:	4b56      	ldr	r3, [pc, #344]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a55      	ldr	r2, [pc, #340]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <MX_GPIO_Init+0x200>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	f244 0181 	movw	r1, #16513	; 0x4081
 8001d5c:	484f      	ldr	r0, [pc, #316]	; (8001e9c <MX_GPIO_Init+0x204>)
 8001d5e:	f001 f8b3 	bl	8002ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2140      	movs	r1, #64	; 0x40
 8001d66:	484e      	ldr	r0, [pc, #312]	; (8001ea0 <MX_GPIO_Init+0x208>)
 8001d68:	f001 f8ae 	bl	8002ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	4848      	ldr	r0, [pc, #288]	; (8001ea4 <MX_GPIO_Init+0x20c>)
 8001d84:	f000 fedc 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d88:	2332      	movs	r3, #50	; 0x32
 8001d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d98:	230b      	movs	r3, #11
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	4840      	ldr	r0, [pc, #256]	; (8001ea4 <MX_GPIO_Init+0x20c>)
 8001da4:	f000 fecc 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001da8:	2386      	movs	r3, #134	; 0x86
 8001daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001db8:	230b      	movs	r3, #11
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4839      	ldr	r0, [pc, #228]	; (8001ea8 <MX_GPIO_Init+0x210>)
 8001dc4:	f000 febc 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001dc8:	2370      	movs	r3, #112	; 0x70
 8001dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4833      	ldr	r0, [pc, #204]	; (8001ea8 <MX_GPIO_Init+0x210>)
 8001ddc:	f000 feb0 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001de0:	f244 0381 	movw	r3, #16513	; 0x4081
 8001de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4828      	ldr	r0, [pc, #160]	; (8001e9c <MX_GPIO_Init+0x204>)
 8001dfa:	f000 fea1 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	4619      	mov	r1, r3
 8001e12:	4826      	ldr	r0, [pc, #152]	; (8001eac <MX_GPIO_Init+0x214>)
 8001e14:	f000 fe94 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e2a:	230b      	movs	r3, #11
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	4619      	mov	r1, r3
 8001e34:	4819      	ldr	r0, [pc, #100]	; (8001e9c <MX_GPIO_Init+0x204>)
 8001e36:	f000 fe83 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e3a:	2340      	movs	r3, #64	; 0x40
 8001e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4813      	ldr	r0, [pc, #76]	; (8001ea0 <MX_GPIO_Init+0x208>)
 8001e52:	f000 fe75 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <MX_GPIO_Init+0x208>)
 8001e6a:	f000 fe69 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001e6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e80:	230b      	movs	r3, #11
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_GPIO_Init+0x208>)
 8001e8c:	f000 fe58 	bl	8002b40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e90:	bf00      	nop
 8001e92:	3730      	adds	r7, #48	; 0x30
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	40021800 	.word	0x40021800
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	40021400 	.word	0x40021400

08001eb0 <HAL_UART_RxCpltCallback>:
//{
//	set_point = atoi(&Received);
//	HAL_UART_Receive_IT(&huart3, &Received, 4);
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	set_point = atoi(&Received);
 8001eb8:	4813      	ldr	r0, [pc, #76]	; (8001f08 <HAL_UART_RxCpltCallback+0x58>)
 8001eba:	f006 f8bb 	bl	8008034 <atoi>
 8001ebe:	ee07 0a90 	vmov	s15, r0
 8001ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_UART_RxCpltCallback+0x5c>)
 8001ec8:	edc3 7a00 	vstr	s15, [r3]
	set_point = round(set_point);
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_UART_RxCpltCallback+0x5c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb59 	bl	8000588 <__aeabi_f2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	ec43 2b10 	vmov	d0, r2, r3
 8001ede:	f008 ffbf 	bl	800ae60 <round>
 8001ee2:	ec53 2b10 	vmov	r2, r3, d0
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7fe fe7d 	bl	8000be8 <__aeabi_d2f>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <HAL_UART_RxCpltCallback+0x5c>)
 8001ef2:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart3, &Received, 2);
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4904      	ldr	r1, [pc, #16]	; (8001f08 <HAL_UART_RxCpltCallback+0x58>)
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <HAL_UART_RxCpltCallback+0x60>)
 8001efa:	f004 fb9c 	bl	8006636 <HAL_UART_Receive_IT>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000940 	.word	0x20000940
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000370 	.word	0x20000370
 8001f14:	00000000 	.word	0x00000000

08001f18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD2_Pin);
 8001f20:	2180      	movs	r1, #128	; 0x80
 8001f22:	483b      	ldr	r0, [pc, #236]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001f24:	f000 ffe9 	bl	8002efa <HAL_GPIO_TogglePin>
	temperatura_czujnik = BMP280_ReadTemperature();
 8001f28:	f7ff f982 	bl	8001230 <BMP280_ReadTemperature>
 8001f2c:	eef0 7a40 	vmov.f32	s15, s0
 8001f30:	4b38      	ldr	r3, [pc, #224]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001f32:	edc3 7a00 	vstr	s15, [r3]

	sprintf(pomiar,"%.2f\n", temperatura_czujnik);
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb24 	bl	8000588 <__aeabi_f2d>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4934      	ldr	r1, [pc, #208]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001f46:	4835      	ldr	r0, [pc, #212]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001f48:	f006 fe2c 	bl	8008ba4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)pomiar, strlen(pomiar), HAL_MAX_DELAY);
 8001f4c:	4833      	ldr	r0, [pc, #204]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001f4e:	f7fe f9af 	bl	80002b0 <strlen>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	4930      	ldr	r1, [pc, #192]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001f5c:	4830      	ldr	r0, [pc, #192]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001f5e:	f004 fae7 	bl	8006530 <HAL_UART_Transmit>

	LCD_print();
 8001f62:	f7ff fc21 	bl	80017a8 <LCD_print>

	float pwm_duty_f = (999.0*calc_discrete_pid(&pid, set_point, temperatura_czujnik));
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	4b29      	ldr	r3, [pc, #164]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001f6e:	ed93 7a00 	vldr	s14, [r3]
 8001f72:	eef0 0a47 	vmov.f32	s1, s14
 8001f76:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7a:	482b      	ldr	r0, [pc, #172]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001f7c:	f7ff facc 	bl	8001518 <calc_discrete_pid>
 8001f80:	ee10 3a10 	vmov	r3, s0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe faff 	bl	8000588 <__aeabi_f2d>
 8001f8a:	a31f      	add	r3, pc, #124	; (adr r3, 8002008 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fb52 	bl	8000638 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f7fe fe24 	bl	8000be8 <__aeabi_d2f>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	60bb      	str	r3, [r7, #8]
	uint16_t pwm_duty = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	81fb      	strh	r3, [r7, #14]
	if(pwm_duty_f < 0) pwm_duty = 0; else
 8001fa8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb4:	d502      	bpl.n	8001fbc <HAL_TIM_PeriodElapsedCallback+0xa4>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	81fb      	strh	r3, [r7, #14]
 8001fba:	e013      	b.n	8001fe4 <HAL_TIM_PeriodElapsedCallback+0xcc>
	if(pwm_duty_f > 999.0) pwm_duty = 999; else
 8001fbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fc0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800202c <HAL_TIM_PeriodElapsedCallback+0x114>
 8001fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fcc:	dd03      	ble.n	8001fd6 <HAL_TIM_PeriodElapsedCallback+0xbe>
 8001fce:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001fd2:	81fb      	strh	r3, [r7, #14]
 8001fd4:	e006      	b.n	8001fe4 <HAL_TIM_PeriodElapsedCallback+0xcc>
		pwm_duty = (uint16_t)pwm_duty_f;
 8001fd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fde:	ee17 3a90 	vmov	r3, s15
 8001fe2:	81fb      	strh	r3, [r7, #14]

	duty = (float)pwm_duty;
 8001fe4:	89fb      	ldrh	r3, [r7, #14]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001ff0:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwm_duty);
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	89fa      	ldrh	r2, [r7, #14]
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40


}
 8001ffc:	bf00      	nop
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	f3af 8000 	nop.w
 8002008:	00000000 	.word	0x00000000
 800200c:	408f3800 	.word	0x408f3800
 8002010:	40020400 	.word	0x40020400
 8002014:	20000900 	.word	0x20000900
 8002018:	0800af28 	.word	0x0800af28
 800201c:	20000924 	.word	0x20000924
 8002020:	20000370 	.word	0x20000370
 8002024:	20000000 	.word	0x20000000
 8002028:	20000004 	.word	0x20000004
 800202c:	4479c000 	.word	0x4479c000
 8002030:	20000934 	.word	0x20000934
 8002034:	200002d8 	.word	0x200002d8

08002038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203c:	b672      	cpsid	i
}
 800203e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002040:	e7fe      	b.n	8002040 <Error_Handler+0x8>
	...

08002044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_MspInit+0x44>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <HAL_MspInit+0x44>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_MspInit+0x44>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_MspInit+0x44>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <HAL_MspInit+0x44>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_MspInit+0x44>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800

0800208c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0ac      	sub	sp, #176	; 0xb0
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a4:	f107 0318 	add.w	r3, r7, #24
 80020a8:	2284      	movs	r2, #132	; 0x84
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f006 fddc 	bl	8008c6a <memset>
  if(hi2c->Instance==I2C1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a43      	ldr	r2, [pc, #268]	; (80021c4 <HAL_I2C_MspInit+0x138>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d13d      	bne.n	8002138 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c6:	f107 0318 	add.w	r3, r7, #24
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 fc36 	bl	800493c <HAL_RCCEx_PeriphCLKConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020d6:	f7ff ffaf 	bl	8002038 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_I2C_MspInit+0x13c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a3a      	ldr	r2, [pc, #232]	; (80021c8 <HAL_I2C_MspInit+0x13c>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b38      	ldr	r3, [pc, #224]	; (80021c8 <HAL_I2C_MspInit+0x13c>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80020f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80020f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020fa:	2312      	movs	r3, #18
 80020fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800210c:	2304      	movs	r3, #4
 800210e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002116:	4619      	mov	r1, r3
 8002118:	482c      	ldr	r0, [pc, #176]	; (80021cc <HAL_I2C_MspInit+0x140>)
 800211a:	f000 fd11 	bl	8002b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800211e:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <HAL_I2C_MspInit+0x13c>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a29      	ldr	r2, [pc, #164]	; (80021c8 <HAL_I2C_MspInit+0x13c>)
 8002124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_I2C_MspInit+0x13c>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002136:	e041      	b.n	80021bc <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a24      	ldr	r2, [pc, #144]	; (80021d0 <HAL_I2C_MspInit+0x144>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d13c      	bne.n	80021bc <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002146:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800214e:	f107 0318 	add.w	r3, r7, #24
 8002152:	4618      	mov	r0, r3
 8002154:	f002 fbf2 	bl	800493c <HAL_RCCEx_PeriphCLKConfig>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800215e:	f7ff ff6b 	bl	8002038 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002162:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_I2C_MspInit+0x13c>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_I2C_MspInit+0x13c>)
 8002168:	f043 0320 	orr.w	r3, r3, #32
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_I2C_MspInit+0x13c>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800217a:	2303      	movs	r3, #3
 800217c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002180:	2312      	movs	r3, #18
 8002182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002192:	2304      	movs	r3, #4
 8002194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002198:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800219c:	4619      	mov	r1, r3
 800219e:	480d      	ldr	r0, [pc, #52]	; (80021d4 <HAL_I2C_MspInit+0x148>)
 80021a0:	f000 fcce 	bl	8002b40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_I2C_MspInit+0x13c>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <HAL_I2C_MspInit+0x13c>)
 80021aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ae:	6413      	str	r3, [r2, #64]	; 0x40
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_I2C_MspInit+0x13c>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
}
 80021bc:	bf00      	nop
 80021be:	37b0      	adds	r7, #176	; 0xb0
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40005400 	.word	0x40005400
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40005800 	.word	0x40005800
 80021d4:	40021400 	.word	0x40021400

080021d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e8:	d10c      	bne.n	8002204 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_TIM_Base_MspInit+0x68>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a14      	ldr	r2, [pc, #80]	; (8002240 <HAL_TIM_Base_MspInit+0x68>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_TIM_Base_MspInit+0x68>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002202:	e018      	b.n	8002236 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <HAL_TIM_Base_MspInit+0x6c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d113      	bne.n	8002236 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_TIM_Base_MspInit+0x68>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_TIM_Base_MspInit+0x68>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_TIM_Base_MspInit+0x68>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	201d      	movs	r0, #29
 800222c:	f000 fbbf 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002230:	201d      	movs	r0, #29
 8002232:	f000 fbd8 	bl	80029e6 <HAL_NVIC_EnableIRQ>
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	40000400 	.word	0x40000400

08002248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002268:	d11b      	bne.n	80022a2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_TIM_MspPostInit+0x64>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a0f      	ldr	r2, [pc, #60]	; (80022ac <HAL_TIM_MspPostInit+0x64>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <HAL_TIM_MspPostInit+0x64>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002282:	2308      	movs	r3, #8
 8002284:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002292:	2301      	movs	r3, #1
 8002294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	4619      	mov	r1, r3
 800229c:	4804      	ldr	r0, [pc, #16]	; (80022b0 <HAL_TIM_MspPostInit+0x68>)
 800229e:	f000 fc4f 	bl	8002b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022a2:	bf00      	nop
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40020000 	.word	0x40020000

080022b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b0aa      	sub	sp, #168	; 0xa8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	2284      	movs	r2, #132	; 0x84
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f006 fcc8 	bl	8008c6a <memset>
  if(huart->Instance==USART3)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a26      	ldr	r2, [pc, #152]	; (8002378 <HAL_UART_MspInit+0xc4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d144      	bne.n	800236e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022ea:	2300      	movs	r3, #0
 80022ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ee:	f107 0310 	add.w	r3, r7, #16
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 fb22 	bl	800493c <HAL_RCCEx_PeriphCLKConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022fe:	f7ff fe9b 	bl	8002038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_UART_MspInit+0xc8>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_UART_MspInit+0xc8>)
 8002308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_UART_MspInit+0xc8>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <HAL_UART_MspInit+0xc8>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a17      	ldr	r2, [pc, #92]	; (800237c <HAL_UART_MspInit+0xc8>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_UART_MspInit+0xc8>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002332:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002336:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002340:	2301      	movs	r3, #1
 8002342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800234c:	2307      	movs	r3, #7
 800234e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002352:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002356:	4619      	mov	r1, r3
 8002358:	4809      	ldr	r0, [pc, #36]	; (8002380 <HAL_UART_MspInit+0xcc>)
 800235a:	f000 fbf1 	bl	8002b40 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	2027      	movs	r0, #39	; 0x27
 8002364:	f000 fb23 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002368:	2027      	movs	r0, #39	; 0x27
 800236a:	f000 fb3c 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800236e:	bf00      	nop
 8002370:	37a8      	adds	r7, #168	; 0xa8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40004800 	.word	0x40004800
 800237c:	40023800 	.word	0x40023800
 8002380:	40020c00 	.word	0x40020c00

08002384 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b0ac      	sub	sp, #176	; 0xb0
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800239c:	f107 0318 	add.w	r3, r7, #24
 80023a0:	2284      	movs	r2, #132	; 0x84
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f006 fc60 	bl	8008c6a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023b2:	d159      	bne.n	8002468 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80023b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c0:	f107 0318 	add.w	r3, r7, #24
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 fab9 	bl	800493c <HAL_RCCEx_PeriphCLKConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80023d0:	f7ff fe32 	bl	8002038 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	4b26      	ldr	r3, [pc, #152]	; (8002470 <HAL_PCD_MspInit+0xec>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	4a25      	ldr	r2, [pc, #148]	; (8002470 <HAL_PCD_MspInit+0xec>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6313      	str	r3, [r2, #48]	; 0x30
 80023e0:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_PCD_MspInit+0xec>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80023ec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80023f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002400:	2303      	movs	r3, #3
 8002402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002406:	230a      	movs	r3, #10
 8002408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002410:	4619      	mov	r1, r3
 8002412:	4818      	ldr	r0, [pc, #96]	; (8002474 <HAL_PCD_MspInit+0xf0>)
 8002414:	f000 fb94 	bl	8002b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800241c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800242c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002430:	4619      	mov	r1, r3
 8002432:	4810      	ldr	r0, [pc, #64]	; (8002474 <HAL_PCD_MspInit+0xf0>)
 8002434:	f000 fb84 	bl	8002b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_PCD_MspInit+0xec>)
 800243a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243c:	4a0c      	ldr	r2, [pc, #48]	; (8002470 <HAL_PCD_MspInit+0xec>)
 800243e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002442:	6353      	str	r3, [r2, #52]	; 0x34
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_PCD_MspInit+0xec>)
 8002446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <HAL_PCD_MspInit+0xec>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <HAL_PCD_MspInit+0xec>)
 8002456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245a:	6453      	str	r3, [r2, #68]	; 0x44
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <HAL_PCD_MspInit+0xec>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002468:	bf00      	nop
 800246a:	37b0      	adds	r7, #176	; 0xb0
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	40020000 	.word	0x40020000

08002478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800247c:	e7fe      	b.n	800247c <NMI_Handler+0x4>

0800247e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002482:	e7fe      	b.n	8002482 <HardFault_Handler+0x4>

08002484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <MemManage_Handler+0x4>

0800248a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <BusFault_Handler+0x4>

08002490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <UsageFault_Handler+0x4>

08002496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c4:	f000 f954 	bl	8002770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}

080024cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <TIM3_IRQHandler+0x10>)
 80024d2:	f003 f84f 	bl	8005574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000324 	.word	0x20000324

080024e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <USART3_IRQHandler+0x10>)
 80024e6:	f004 f8eb 	bl	80066c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000370 	.word	0x20000370

080024f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return 1;
 80024f8:	2301      	movs	r3, #1
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_kill>:

int _kill(int pid, int sig)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800250e:	f006 fbff 	bl	8008d10 <__errno>
 8002512:	4603      	mov	r3, r0
 8002514:	2216      	movs	r2, #22
 8002516:	601a      	str	r2, [r3, #0]
  return -1;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_exit>:

void _exit (int status)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800252c:	f04f 31ff 	mov.w	r1, #4294967295
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ffe7 	bl	8002504 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002536:	e7fe      	b.n	8002536 <_exit+0x12>

08002538 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	e00a      	b.n	8002560 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800254a:	f3af 8000 	nop.w
 800254e:	4601      	mov	r1, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	60ba      	str	r2, [r7, #8]
 8002556:	b2ca      	uxtb	r2, r1
 8002558:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3301      	adds	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	dbf0      	blt.n	800254a <_read+0x12>
  }

  return len;
 8002568:	687b      	ldr	r3, [r7, #4]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e009      	b.n	8002598 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	60ba      	str	r2, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3301      	adds	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	429a      	cmp	r2, r3
 800259e:	dbf1      	blt.n	8002584 <_write+0x12>
  }
  return len;
 80025a0:	687b      	ldr	r3, [r7, #4]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_close>:

int _close(int file)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025d2:	605a      	str	r2, [r3, #4]
  return 0;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <_isatty>:

int _isatty(int file)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <_sbrk+0x5c>)
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <_sbrk+0x60>)
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <_sbrk+0x64>)
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <_sbrk+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002644:	f006 fb64 	bl	8008d10 <__errno>
 8002648:	4603      	mov	r3, r0
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e009      	b.n	8002668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <_sbrk+0x64>)
 8002664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002666:	68fb      	ldr	r3, [r7, #12]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20050000 	.word	0x20050000
 8002674:	00000400 	.word	0x00000400
 8002678:	20000944 	.word	0x20000944
 800267c:	20000a98 	.word	0x20000a98

08002680 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <SystemInit+0x20>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <SystemInit+0x20>)
 800268c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a8:	480d      	ldr	r0, [pc, #52]	; (80026e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026aa:	490e      	ldr	r1, [pc, #56]	; (80026e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026ac:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026c0:	4c0b      	ldr	r4, [pc, #44]	; (80026f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ce:	f7ff ffd7 	bl	8002680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026d2:	f006 fb23 	bl	8008d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d6:	f7ff f89d 	bl	8001814 <main>
  bx  lr    
 80026da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80026e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80026e8:	0800b2cc 	.word	0x0800b2cc
  ldr r2, =_sbss
 80026ec:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80026f0:	20000a98 	.word	0x20000a98

080026f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <ADC_IRQHandler>

080026f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fa:	2003      	movs	r0, #3
 80026fc:	f000 f94c 	bl	8002998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002700:	2000      	movs	r0, #0
 8002702:	f000 f805 	bl	8002710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002706:	f7ff fc9d 	bl	8002044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_InitTick+0x54>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_InitTick+0x58>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	fbb3 f3f1 	udiv	r3, r3, r1
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f967 	bl	8002a02 <HAL_SYSTICK_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e00e      	b.n	800275c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0f      	cmp	r3, #15
 8002742:	d80a      	bhi.n	800275a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002744:	2200      	movs	r2, #0
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f000 f92f 	bl	80029ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <HAL_InitTick+0x5c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	2000001c 	.word	0x2000001c
 8002768:	20000024 	.word	0x20000024
 800276c:	20000020 	.word	0x20000020

08002770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x20>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x24>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4413      	add	r3, r2
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_IncTick+0x24>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000024 	.word	0x20000024
 8002794:	20000948 	.word	0x20000948

08002798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return uwTick;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_GetTick+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000948 	.word	0x20000948

080027b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff ffee 	bl	8002798 <HAL_GetTick>
 80027bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d005      	beq.n	80027d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_Delay+0x44>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027d6:	bf00      	nop
 80027d8:	f7ff ffde 	bl	8002798 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d8f7      	bhi.n	80027d8 <HAL_Delay+0x28>
  {
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000024 	.word	0x20000024

080027f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <__NVIC_SetPriorityGrouping+0x40>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 8002822:	4313      	orrs	r3, r2
 8002824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002826:	4a04      	ldr	r2, [pc, #16]	; (8002838 <__NVIC_SetPriorityGrouping+0x40>)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	60d3      	str	r3, [r2, #12]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000ed00 	.word	0xe000ed00
 800283c:	05fa0000 	.word	0x05fa0000

08002840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0307 	and.w	r3, r3, #7
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db0b      	blt.n	8002886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	4907      	ldr	r1, [pc, #28]	; (8002894 <__NVIC_EnableIRQ+0x38>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2001      	movs	r0, #1
 800287e:	fa00 f202 	lsl.w	r2, r0, r2
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	; (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002964:	d301      	bcc.n	800296a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002966:	2301      	movs	r3, #1
 8002968:	e00f      	b.n	800298a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <SysTick_Config+0x40>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002972:	210f      	movs	r1, #15
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	f7ff ff8e 	bl	8002898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <SysTick_Config+0x40>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <SysTick_Config+0x40>)
 8002984:	2207      	movs	r2, #7
 8002986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000e010 	.word	0xe000e010

08002998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff29 	bl	80027f8 <__NVIC_SetPriorityGrouping>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c0:	f7ff ff3e 	bl	8002840 <__NVIC_GetPriorityGrouping>
 80029c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff ff8e 	bl	80028ec <NVIC_EncodePriority>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff5d 	bl	8002898 <__NVIC_SetPriority>
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff31 	bl	800285c <__NVIC_EnableIRQ>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffa2 	bl	8002954 <SysTick_Config>
 8002a10:	4603      	mov	r3, r0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a28:	f7ff feb6 	bl	8002798 <HAL_GetTick>
 8002a2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d008      	beq.n	8002a4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e052      	b.n	8002af2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0216 	bic.w	r2, r2, #22
 8002a5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d103      	bne.n	8002a7c <HAL_DMA_Abort+0x62>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0208 	bic.w	r2, r2, #8
 8002a8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0201 	bic.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a9c:	e013      	b.n	8002ac6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a9e:	f7ff fe7b 	bl	8002798 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d90c      	bls.n	8002ac6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e015      	b.n	8002af2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e4      	bne.n	8002a9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	223f      	movs	r2, #63	; 0x3f
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e00c      	b.n	8002b32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	e175      	b.n	8002e4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	f040 8164 	bne.w	8002e46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d005      	beq.n	8002b96 <HAL_GPIO_Init+0x56>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d130      	bne.n	8002bf8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bcc:	2201      	movs	r2, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 0201 	and.w	r2, r3, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d017      	beq.n	8002c34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d123      	bne.n	8002c88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	08da      	lsrs	r2, r3, #3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3208      	adds	r2, #8
 8002c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	220f      	movs	r2, #15
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	08da      	lsrs	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3208      	adds	r2, #8
 8002c82:	69b9      	ldr	r1, [r7, #24]
 8002c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0203 	and.w	r2, r3, #3
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80be 	beq.w	8002e46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cca:	4b66      	ldr	r3, [pc, #408]	; (8002e64 <HAL_GPIO_Init+0x324>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	4a65      	ldr	r2, [pc, #404]	; (8002e64 <HAL_GPIO_Init+0x324>)
 8002cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd6:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <HAL_GPIO_Init+0x324>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ce2:	4a61      	ldr	r2, [pc, #388]	; (8002e68 <HAL_GPIO_Init+0x328>)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	220f      	movs	r2, #15
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_GPIO_Init+0x32c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d037      	beq.n	8002d7e <HAL_GPIO_Init+0x23e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a57      	ldr	r2, [pc, #348]	; (8002e70 <HAL_GPIO_Init+0x330>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d031      	beq.n	8002d7a <HAL_GPIO_Init+0x23a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a56      	ldr	r2, [pc, #344]	; (8002e74 <HAL_GPIO_Init+0x334>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02b      	beq.n	8002d76 <HAL_GPIO_Init+0x236>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a55      	ldr	r2, [pc, #340]	; (8002e78 <HAL_GPIO_Init+0x338>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d025      	beq.n	8002d72 <HAL_GPIO_Init+0x232>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a54      	ldr	r2, [pc, #336]	; (8002e7c <HAL_GPIO_Init+0x33c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01f      	beq.n	8002d6e <HAL_GPIO_Init+0x22e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a53      	ldr	r2, [pc, #332]	; (8002e80 <HAL_GPIO_Init+0x340>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_GPIO_Init+0x22a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_GPIO_Init+0x344>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0x226>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a51      	ldr	r2, [pc, #324]	; (8002e88 <HAL_GPIO_Init+0x348>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00d      	beq.n	8002d62 <HAL_GPIO_Init+0x222>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a50      	ldr	r2, [pc, #320]	; (8002e8c <HAL_GPIO_Init+0x34c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_Init+0x21e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4f      	ldr	r2, [pc, #316]	; (8002e90 <HAL_GPIO_Init+0x350>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_GPIO_Init+0x21a>
 8002d56:	2309      	movs	r3, #9
 8002d58:	e012      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d5a:	230a      	movs	r3, #10
 8002d5c:	e010      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d5e:	2308      	movs	r3, #8
 8002d60:	e00e      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d62:	2307      	movs	r3, #7
 8002d64:	e00c      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d66:	2306      	movs	r3, #6
 8002d68:	e00a      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d6a:	2305      	movs	r3, #5
 8002d6c:	e008      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d6e:	2304      	movs	r3, #4
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d72:	2303      	movs	r3, #3
 8002d74:	e004      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e002      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	f002 0203 	and.w	r2, r2, #3
 8002d86:	0092      	lsls	r2, r2, #2
 8002d88:	4093      	lsls	r3, r2
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d90:	4935      	ldr	r1, [pc, #212]	; (8002e68 <HAL_GPIO_Init+0x328>)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	3302      	adds	r3, #2
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d9e:	4b3d      	ldr	r3, [pc, #244]	; (8002e94 <HAL_GPIO_Init+0x354>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dc2:	4a34      	ldr	r2, [pc, #208]	; (8002e94 <HAL_GPIO_Init+0x354>)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dc8:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <HAL_GPIO_Init+0x354>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dec:	4a29      	ldr	r2, [pc, #164]	; (8002e94 <HAL_GPIO_Init+0x354>)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002df2:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_GPIO_Init+0x354>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e16:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <HAL_GPIO_Init+0x354>)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <HAL_GPIO_Init+0x354>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e40:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <HAL_GPIO_Init+0x354>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	f67f ae86 	bls.w	8002b60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3724      	adds	r7, #36	; 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40013800 	.word	0x40013800
 8002e6c:	40020000 	.word	0x40020000
 8002e70:	40020400 	.word	0x40020400
 8002e74:	40020800 	.word	0x40020800
 8002e78:	40020c00 	.word	0x40020c00
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40021400 	.word	0x40021400
 8002e84:	40021800 	.word	0x40021800
 8002e88:	40021c00 	.word	0x40021c00
 8002e8c:	40022000 	.word	0x40022000
 8002e90:	40022400 	.word	0x40022400
 8002e94:	40013c00 	.word	0x40013c00

08002e98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
 8002eb4:	e001      	b.n	8002eba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed8:	787b      	ldrb	r3, [r7, #1]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ee4:	e003      	b.n	8002eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	041a      	lsls	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	619a      	str	r2, [r3, #24]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f0c:	887a      	ldrh	r2, [r7, #2]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4013      	ands	r3, r2
 8002f12:	041a      	lsls	r2, r3, #16
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	43d9      	mvns	r1, r3
 8002f18:	887b      	ldrh	r3, [r7, #2]
 8002f1a:	400b      	ands	r3, r1
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	619a      	str	r2, [r3, #24]
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e07f      	b.n	8003042 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff f898 	bl	800208c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2224      	movs	r2, #36	; 0x24
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d107      	bne.n	8002faa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	e006      	b.n	8002fb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d104      	bne.n	8002fca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_I2C_Init+0x11c>)
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69d9      	ldr	r1, [r3, #28]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1a      	ldr	r2, [r3, #32]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	02008000 	.word	0x02008000

08003050 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	461a      	mov	r2, r3
 800305c:	460b      	mov	r3, r1
 800305e:	817b      	strh	r3, [r7, #10]
 8003060:	4613      	mov	r3, r2
 8003062:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b20      	cmp	r3, #32
 800306e:	f040 80da 	bne.w	8003226 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_I2C_Master_Transmit+0x30>
 800307c:	2302      	movs	r3, #2
 800307e:	e0d3      	b.n	8003228 <HAL_I2C_Master_Transmit+0x1d8>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003088:	f7ff fb86 	bl	8002798 <HAL_GetTick>
 800308c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	2319      	movs	r3, #25
 8003094:	2201      	movs	r2, #1
 8003096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fbc6 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e0be      	b.n	8003228 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2221      	movs	r2, #33	; 0x21
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2210      	movs	r2, #16
 80030b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	893a      	ldrh	r2, [r7, #8]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2bff      	cmp	r3, #255	; 0xff
 80030da:	d90e      	bls.n	80030fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	22ff      	movs	r2, #255	; 0xff
 80030e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	8979      	ldrh	r1, [r7, #10]
 80030ea:	4b51      	ldr	r3, [pc, #324]	; (8003230 <HAL_I2C_Master_Transmit+0x1e0>)
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fd36 	bl	8003b64 <I2C_TransferConfig>
 80030f8:	e06c      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	b2da      	uxtb	r2, r3
 800310a:	8979      	ldrh	r1, [r7, #10]
 800310c:	4b48      	ldr	r3, [pc, #288]	; (8003230 <HAL_I2C_Master_Transmit+0x1e0>)
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fd25 	bl	8003b64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800311a:	e05b      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	6a39      	ldr	r1, [r7, #32]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fbc3 	bl	80038ac <I2C_WaitOnTXISFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e07b      	b.n	8003228 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	781a      	ldrb	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d034      	beq.n	80031d4 <HAL_I2C_Master_Transmit+0x184>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316e:	2b00      	cmp	r3, #0
 8003170:	d130      	bne.n	80031d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	2200      	movs	r2, #0
 800317a:	2180      	movs	r1, #128	; 0x80
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fb55 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e04d      	b.n	8003228 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	2bff      	cmp	r3, #255	; 0xff
 8003194:	d90e      	bls.n	80031b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	22ff      	movs	r2, #255	; 0xff
 800319a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	8979      	ldrh	r1, [r7, #10]
 80031a4:	2300      	movs	r3, #0
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fcd9 	bl	8003b64 <I2C_TransferConfig>
 80031b2:	e00f      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	8979      	ldrh	r1, [r7, #10]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fcc8 	bl	8003b64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d19e      	bne.n	800311c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	6a39      	ldr	r1, [r7, #32]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fba2 	bl	800392c <I2C_WaitOnSTOPFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e01a      	b.n	8003228 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2220      	movs	r2, #32
 80031f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_I2C_Master_Transmit+0x1e4>)
 8003206:	400b      	ands	r3, r1
 8003208:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003226:	2302      	movs	r3, #2
  }
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	80002000 	.word	0x80002000
 8003234:	fe00e800 	.word	0xfe00e800

08003238 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	4608      	mov	r0, r1
 8003242:	4611      	mov	r1, r2
 8003244:	461a      	mov	r2, r3
 8003246:	4603      	mov	r3, r0
 8003248:	817b      	strh	r3, [r7, #10]
 800324a:	460b      	mov	r3, r1
 800324c:	813b      	strh	r3, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	f040 80f9 	bne.w	8003452 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_I2C_Mem_Write+0x34>
 8003266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003272:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0ed      	b.n	8003454 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_I2C_Mem_Write+0x4e>
 8003282:	2302      	movs	r3, #2
 8003284:	e0e6      	b.n	8003454 <HAL_I2C_Mem_Write+0x21c>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800328e:	f7ff fa83 	bl	8002798 <HAL_GetTick>
 8003292:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2319      	movs	r3, #25
 800329a:	2201      	movs	r2, #1
 800329c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fac3 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0d1      	b.n	8003454 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2221      	movs	r2, #33	; 0x21
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2240      	movs	r2, #64	; 0x40
 80032bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032d8:	88f8      	ldrh	r0, [r7, #6]
 80032da:	893a      	ldrh	r2, [r7, #8]
 80032dc:	8979      	ldrh	r1, [r7, #10]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	4603      	mov	r3, r0
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f9d3 	bl	8003694 <I2C_RequestMemoryWrite>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0a9      	b.n	8003454 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	2bff      	cmp	r3, #255	; 0xff
 8003308:	d90e      	bls.n	8003328 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	22ff      	movs	r2, #255	; 0xff
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	b2da      	uxtb	r2, r3
 8003316:	8979      	ldrh	r1, [r7, #10]
 8003318:	2300      	movs	r3, #0
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fc1f 	bl	8003b64 <I2C_TransferConfig>
 8003326:	e00f      	b.n	8003348 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003336:	b2da      	uxtb	r2, r3
 8003338:	8979      	ldrh	r1, [r7, #10]
 800333a:	2300      	movs	r3, #0
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fc0e 	bl	8003b64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 faad 	bl	80038ac <I2C_WaitOnTXISFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e07b      	b.n	8003454 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d034      	beq.n	8003400 <HAL_I2C_Mem_Write+0x1c8>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	2b00      	cmp	r3, #0
 800339c:	d130      	bne.n	8003400 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	2200      	movs	r2, #0
 80033a6:	2180      	movs	r1, #128	; 0x80
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fa3f 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e04d      	b.n	8003454 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2bff      	cmp	r3, #255	; 0xff
 80033c0:	d90e      	bls.n	80033e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	22ff      	movs	r2, #255	; 0xff
 80033c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	8979      	ldrh	r1, [r7, #10]
 80033d0:	2300      	movs	r3, #0
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 fbc3 	bl	8003b64 <I2C_TransferConfig>
 80033de:	e00f      	b.n	8003400 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	8979      	ldrh	r1, [r7, #10]
 80033f2:	2300      	movs	r3, #0
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fbb2 	bl	8003b64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d19e      	bne.n	8003348 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 fa8c 	bl	800392c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e01a      	b.n	8003454 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2220      	movs	r2, #32
 8003424:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <HAL_I2C_Mem_Write+0x224>)
 8003432:	400b      	ands	r3, r1
 8003434:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	e000      	b.n	8003454 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003452:	2302      	movs	r3, #2
  }
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	fe00e800 	.word	0xfe00e800

08003460 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	460b      	mov	r3, r1
 8003474:	813b      	strh	r3, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b20      	cmp	r3, #32
 8003484:	f040 80fd 	bne.w	8003682 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_I2C_Mem_Read+0x34>
 800348e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0f1      	b.n	8003684 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_I2C_Mem_Read+0x4e>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e0ea      	b.n	8003684 <HAL_I2C_Mem_Read+0x224>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034b6:	f7ff f96f 	bl	8002798 <HAL_GetTick>
 80034ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2319      	movs	r3, #25
 80034c2:	2201      	movs	r2, #1
 80034c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f9af 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0d5      	b.n	8003684 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2222      	movs	r2, #34	; 0x22
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2240      	movs	r2, #64	; 0x40
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a3a      	ldr	r2, [r7, #32]
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003500:	88f8      	ldrh	r0, [r7, #6]
 8003502:	893a      	ldrh	r2, [r7, #8]
 8003504:	8979      	ldrh	r1, [r7, #10]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	4603      	mov	r3, r0
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f913 	bl	800373c <I2C_RequestMemoryRead>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0ad      	b.n	8003684 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	2bff      	cmp	r3, #255	; 0xff
 8003530:	d90e      	bls.n	8003550 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	22ff      	movs	r2, #255	; 0xff
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	b2da      	uxtb	r2, r3
 800353e:	8979      	ldrh	r1, [r7, #10]
 8003540:	4b52      	ldr	r3, [pc, #328]	; (800368c <HAL_I2C_Mem_Read+0x22c>)
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fb0b 	bl	8003b64 <I2C_TransferConfig>
 800354e:	e00f      	b.n	8003570 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	b2da      	uxtb	r2, r3
 8003560:	8979      	ldrh	r1, [r7, #10]
 8003562:	4b4a      	ldr	r3, [pc, #296]	; (800368c <HAL_I2C_Mem_Read+0x22c>)
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fafa 	bl	8003b64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	2200      	movs	r2, #0
 8003578:	2104      	movs	r1, #4
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f956 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e07c      	b.n	8003684 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d034      	beq.n	8003630 <HAL_I2C_Mem_Read+0x1d0>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d130      	bne.n	8003630 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	2200      	movs	r2, #0
 80035d6:	2180      	movs	r1, #128	; 0x80
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f927 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e04d      	b.n	8003684 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2bff      	cmp	r3, #255	; 0xff
 80035f0:	d90e      	bls.n	8003610 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	22ff      	movs	r2, #255	; 0xff
 80035f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	8979      	ldrh	r1, [r7, #10]
 8003600:	2300      	movs	r3, #0
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 faab 	bl	8003b64 <I2C_TransferConfig>
 800360e:	e00f      	b.n	8003630 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	b2da      	uxtb	r2, r3
 8003620:	8979      	ldrh	r1, [r7, #10]
 8003622:	2300      	movs	r3, #0
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fa9a 	bl	8003b64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d19a      	bne.n	8003570 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f974 	bl	800392c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e01a      	b.n	8003684 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2220      	movs	r2, #32
 8003654:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_I2C_Mem_Read+0x230>)
 8003662:	400b      	ands	r3, r1
 8003664:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003682:	2302      	movs	r3, #2
  }
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	80002400 	.word	0x80002400
 8003690:	fe00e800 	.word	0xfe00e800

08003694 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	4608      	mov	r0, r1
 800369e:	4611      	mov	r1, r2
 80036a0:	461a      	mov	r2, r3
 80036a2:	4603      	mov	r3, r0
 80036a4:	817b      	strh	r3, [r7, #10]
 80036a6:	460b      	mov	r3, r1
 80036a8:	813b      	strh	r3, [r7, #8]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	8979      	ldrh	r1, [r7, #10]
 80036b4:	4b20      	ldr	r3, [pc, #128]	; (8003738 <I2C_RequestMemoryWrite+0xa4>)
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fa51 	bl	8003b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	69b9      	ldr	r1, [r7, #24]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f8f0 	bl	80038ac <I2C_WaitOnTXISFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e02c      	b.n	8003730 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036dc:	893b      	ldrh	r3, [r7, #8]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28
 80036e6:	e015      	b.n	8003714 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036e8:	893b      	ldrh	r3, [r7, #8]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	69b9      	ldr	r1, [r7, #24]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f8d6 	bl	80038ac <I2C_WaitOnTXISFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e012      	b.n	8003730 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800370a:	893b      	ldrh	r3, [r7, #8]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2200      	movs	r2, #0
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f884 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	80002000 	.word	0x80002000

0800373c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	461a      	mov	r2, r3
 800374a:	4603      	mov	r3, r0
 800374c:	817b      	strh	r3, [r7, #10]
 800374e:	460b      	mov	r3, r1
 8003750:	813b      	strh	r3, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	8979      	ldrh	r1, [r7, #10]
 800375c:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <I2C_RequestMemoryRead+0xa4>)
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2300      	movs	r3, #0
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f9fe 	bl	8003b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	69b9      	ldr	r1, [r7, #24]
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f89d 	bl	80038ac <I2C_WaitOnTXISFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e02c      	b.n	80037d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d105      	bne.n	800378e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003782:	893b      	ldrh	r3, [r7, #8]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	629a      	str	r2, [r3, #40]	; 0x28
 800378c:	e015      	b.n	80037ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800378e:	893b      	ldrh	r3, [r7, #8]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	b29b      	uxth	r3, r3
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	69b9      	ldr	r1, [r7, #24]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f883 	bl	80038ac <I2C_WaitOnTXISFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e012      	b.n	80037d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037b0:	893b      	ldrh	r3, [r7, #8]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2200      	movs	r2, #0
 80037c2:	2140      	movs	r1, #64	; 0x40
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f831 	bl	800382c <I2C_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	80002000 	.word	0x80002000

080037e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d103      	bne.n	8003802 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d007      	beq.n	8003820 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	619a      	str	r2, [r3, #24]
  }
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800383c:	e022      	b.n	8003884 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d01e      	beq.n	8003884 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003846:	f7fe ffa7 	bl	8002798 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d113      	bne.n	8003884 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e00f      	b.n	80038a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4013      	ands	r3, r2
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	429a      	cmp	r2, r3
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d0cd      	beq.n	800383e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038b8:	e02c      	b.n	8003914 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f870 	bl	80039a4 <I2C_IsErrorOccurred>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e02a      	b.n	8003924 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d01e      	beq.n	8003914 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d6:	f7fe ff5f 	bl	8002798 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d302      	bcc.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d113      	bne.n	8003914 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	f043 0220 	orr.w	r2, r3, #32
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e007      	b.n	8003924 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d1cb      	bne.n	80038ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003938:	e028      	b.n	800398c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f830 	bl	80039a4 <I2C_IsErrorOccurred>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e026      	b.n	800399c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7fe ff23 	bl	8002798 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d113      	bne.n	800398c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	f043 0220 	orr.w	r2, r3, #32
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e007      	b.n	800399c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b20      	cmp	r3, #32
 8003998:	d1cf      	bne.n	800393a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	; 0x28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d068      	beq.n	8003aa2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2210      	movs	r2, #16
 80039d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039d8:	e049      	b.n	8003a6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d045      	beq.n	8003a6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7fe fed9 	bl	8002798 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <I2C_IsErrorOccurred+0x54>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d13a      	bne.n	8003a6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1a:	d121      	bne.n	8003a60 <I2C_IsErrorOccurred+0xbc>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a22:	d01d      	beq.n	8003a60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d01a      	beq.n	8003a60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a3a:	f7fe fead 	bl	8002798 <HAL_GetTick>
 8003a3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a40:	e00e      	b.n	8003a60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a42:	f7fe fea9 	bl	8002798 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b19      	cmp	r3, #25
 8003a4e:	d907      	bls.n	8003a60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f043 0320 	orr.w	r3, r3, #32
 8003a56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a5e:	e006      	b.n	8003a6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d1e9      	bne.n	8003a42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d003      	beq.n	8003a84 <I2C_IsErrorOccurred+0xe0>
 8003a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0aa      	beq.n	80039da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d103      	bne.n	8003a94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2220      	movs	r2, #32
 8003a92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	f043 0304 	orr.w	r3, r3, #4
 8003a9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00b      	beq.n	8003acc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ac4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	f043 0308 	orr.w	r3, r3, #8
 8003adc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ae6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01c      	beq.n	8003b52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7ff fe63 	bl	80037e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <I2C_IsErrorOccurred+0x1bc>)
 8003b2a:	400b      	ands	r3, r1
 8003b2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	431a      	orrs	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3728      	adds	r7, #40	; 0x28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	fe00e800 	.word	0xfe00e800

08003b64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	817b      	strh	r3, [r7, #10]
 8003b72:	4613      	mov	r3, r2
 8003b74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b76:	897b      	ldrh	r3, [r7, #10]
 8003b78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b7c:	7a7b      	ldrb	r3, [r7, #9]
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	0d5b      	lsrs	r3, r3, #21
 8003b9e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <I2C_TransferConfig+0x60>)
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	ea02 0103 	and.w	r1, r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	03ff63ff 	.word	0x03ff63ff

08003bc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d138      	bne.n	8003c50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e032      	b.n	8003c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2224      	movs	r2, #36	; 0x24
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6819      	ldr	r1, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d139      	bne.n	8003ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e033      	b.n	8003cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2224      	movs	r2, #36	; 0x24
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf8:	b08f      	sub	sp, #60	; 0x3c
 8003cfa:	af0a      	add	r7, sp, #40	; 0x28
 8003cfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e116      	b.n	8003f36 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fe fb2e 	bl	8002384 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f003 fed8 	bl	8007afc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	687e      	ldr	r6, [r7, #4]
 8003d54:	466d      	mov	r5, sp
 8003d56:	f106 0410 	add.w	r4, r6, #16
 8003d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d66:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d6a:	1d33      	adds	r3, r6, #4
 8003d6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d6e:	6838      	ldr	r0, [r7, #0]
 8003d70:	f003 fe6c 	bl	8007a4c <USB_CoreInit>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0d7      	b.n	8003f36 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f003 fec6 	bl	8007b1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d92:	2300      	movs	r3, #0
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	e04a      	b.n	8003e2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d98:	7bfa      	ldrb	r2, [r7, #15]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	333d      	adds	r3, #61	; 0x3d
 8003da8:	2201      	movs	r2, #1
 8003daa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dac:	7bfa      	ldrb	r2, [r7, #15]
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	333c      	adds	r3, #60	; 0x3c
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003dc0:	7bfa      	ldrb	r2, [r7, #15]
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	b298      	uxth	r0, r3
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3344      	adds	r3, #68	; 0x44
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	3340      	adds	r3, #64	; 0x40
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dec:	7bfa      	ldrb	r2, [r7, #15]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	3348      	adds	r3, #72	; 0x48
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	334c      	adds	r3, #76	; 0x4c
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	3354      	adds	r3, #84	; 0x54
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
 8003e2e:	7bfa      	ldrb	r2, [r7, #15]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d3af      	bcc.n	8003d98 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	73fb      	strb	r3, [r7, #15]
 8003e3c:	e044      	b.n	8003ec8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e3e:	7bfa      	ldrb	r2, [r7, #15]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e50:	2200      	movs	r2, #0
 8003e52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e66:	7bfa      	ldrb	r2, [r7, #15]
 8003e68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e6a:	7bfa      	ldrb	r2, [r7, #15]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e80:	7bfa      	ldrb	r2, [r7, #15]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e96:	7bfa      	ldrb	r2, [r7, #15]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003eac:	7bfa      	ldrb	r2, [r7, #15]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	7bfa      	ldrb	r2, [r7, #15]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d3b5      	bcc.n	8003e3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	687e      	ldr	r6, [r7, #4]
 8003eda:	466d      	mov	r5, sp
 8003edc:	f106 0410 	add.w	r4, r6, #16
 8003ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eec:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ef0:	1d33      	adds	r3, r6, #4
 8003ef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ef4:	6838      	ldr	r0, [r7, #0]
 8003ef6:	f003 fe5f 	bl	8007bb8 <USB_DevInit>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e014      	b.n	8003f36 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d102      	bne.n	8003f2a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f80b 	bl	8003f40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f004 f81d 	bl	8007f6e <USB_DevDisconnect>

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_PCDEx_ActivateLPM+0x44>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	10000003 	.word	0x10000003

08003f88 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f96:	6013      	str	r3, [r2, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40007000 	.word	0x40007000

08003fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e291      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 8087 	beq.w	80040da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fcc:	4b96      	ldr	r3, [pc, #600]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 030c 	and.w	r3, r3, #12
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d00c      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fd8:	4b93      	ldr	r3, [pc, #588]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d112      	bne.n	800400a <HAL_RCC_OscConfig+0x62>
 8003fe4:	4b90      	ldr	r3, [pc, #576]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ff0:	d10b      	bne.n	800400a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff2:	4b8d      	ldr	r3, [pc, #564]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d06c      	beq.n	80040d8 <HAL_RCC_OscConfig+0x130>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d168      	bne.n	80040d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e26b      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004012:	d106      	bne.n	8004022 <HAL_RCC_OscConfig+0x7a>
 8004014:	4b84      	ldr	r3, [pc, #528]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a83      	ldr	r2, [pc, #524]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 800401a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e02e      	b.n	8004080 <HAL_RCC_OscConfig+0xd8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x9c>
 800402a:	4b7f      	ldr	r3, [pc, #508]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a7e      	ldr	r2, [pc, #504]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b7c      	ldr	r3, [pc, #496]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a7b      	ldr	r2, [pc, #492]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 800403c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e01d      	b.n	8004080 <HAL_RCC_OscConfig+0xd8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800404c:	d10c      	bne.n	8004068 <HAL_RCC_OscConfig+0xc0>
 800404e:	4b76      	ldr	r3, [pc, #472]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a75      	ldr	r2, [pc, #468]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	4b73      	ldr	r3, [pc, #460]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a72      	ldr	r2, [pc, #456]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e00b      	b.n	8004080 <HAL_RCC_OscConfig+0xd8>
 8004068:	4b6f      	ldr	r3, [pc, #444]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a6e      	ldr	r2, [pc, #440]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 800406e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	4b6c      	ldr	r3, [pc, #432]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a6b      	ldr	r2, [pc, #428]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 800407a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d013      	beq.n	80040b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fe fb86 	bl	8002798 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004090:	f7fe fb82 	bl	8002798 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	; 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e21f      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	4b61      	ldr	r3, [pc, #388]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0xe8>
 80040ae:	e014      	b.n	80040da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fe fb72 	bl	8002798 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fe fb6e 	bl	8002798 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e20b      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ca:	4b57      	ldr	r3, [pc, #348]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x110>
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d069      	beq.n	80041ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040e6:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00b      	beq.n	800410a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f2:	4b4d      	ldr	r3, [pc, #308]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d11c      	bne.n	8004138 <HAL_RCC_OscConfig+0x190>
 80040fe:	4b4a      	ldr	r3, [pc, #296]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d116      	bne.n	8004138 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_RCC_OscConfig+0x17a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d001      	beq.n	8004122 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e1df      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4b41      	ldr	r3, [pc, #260]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	493d      	ldr	r1, [pc, #244]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004136:	e040      	b.n	80041ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d023      	beq.n	8004188 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004140:	4b39      	ldr	r3, [pc, #228]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a38      	ldr	r2, [pc, #224]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fe fb24 	bl	8002798 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004154:	f7fe fb20 	bl	8002798 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e1bd      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004166:	4b30      	ldr	r3, [pc, #192]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004172:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4929      	ldr	r1, [pc, #164]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]
 8004186:	e018      	b.n	80041ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004188:	4b27      	ldr	r3, [pc, #156]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a26      	ldr	r2, [pc, #152]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fe fb00 	bl	8002798 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800419c:	f7fe fafc 	bl	8002798 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e199      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ae:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d038      	beq.n	8004238 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d019      	beq.n	8004202 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ce:	4b16      	ldr	r3, [pc, #88]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 80041d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d2:	4a15      	ldr	r2, [pc, #84]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041da:	f7fe fadd 	bl	8002798 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e2:	f7fe fad9 	bl	8002798 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e176      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 80041f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0x23a>
 8004200:	e01a      	b.n	8004238 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004206:	4a08      	ldr	r2, [pc, #32]	; (8004228 <HAL_RCC_OscConfig+0x280>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420e:	f7fe fac3 	bl	8002798 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004214:	e00a      	b.n	800422c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004216:	f7fe fabf 	bl	8002798 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d903      	bls.n	800422c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e15c      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
 8004228:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800422c:	4b91      	ldr	r3, [pc, #580]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 800422e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1ee      	bne.n	8004216 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80a4 	beq.w	800438e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004246:	4b8b      	ldr	r3, [pc, #556]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	4b88      	ldr	r3, [pc, #544]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4a87      	ldr	r2, [pc, #540]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	6413      	str	r3, [r2, #64]	; 0x40
 800425e:	4b85      	ldr	r3, [pc, #532]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426e:	4b82      	ldr	r3, [pc, #520]	; (8004478 <HAL_RCC_OscConfig+0x4d0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d118      	bne.n	80042ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800427a:	4b7f      	ldr	r3, [pc, #508]	; (8004478 <HAL_RCC_OscConfig+0x4d0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a7e      	ldr	r2, [pc, #504]	; (8004478 <HAL_RCC_OscConfig+0x4d0>)
 8004280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004286:	f7fe fa87 	bl	8002798 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428e:	f7fe fa83 	bl	8002798 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b64      	cmp	r3, #100	; 0x64
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e120      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a0:	4b75      	ldr	r3, [pc, #468]	; (8004478 <HAL_RCC_OscConfig+0x4d0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d106      	bne.n	80042c2 <HAL_RCC_OscConfig+0x31a>
 80042b4:	4b6f      	ldr	r3, [pc, #444]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	4a6e      	ldr	r2, [pc, #440]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6713      	str	r3, [r2, #112]	; 0x70
 80042c0:	e02d      	b.n	800431e <HAL_RCC_OscConfig+0x376>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCC_OscConfig+0x33c>
 80042ca:	4b6a      	ldr	r3, [pc, #424]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	4a69      	ldr	r2, [pc, #420]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6713      	str	r3, [r2, #112]	; 0x70
 80042d6:	4b67      	ldr	r3, [pc, #412]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	4a66      	ldr	r2, [pc, #408]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	6713      	str	r3, [r2, #112]	; 0x70
 80042e2:	e01c      	b.n	800431e <HAL_RCC_OscConfig+0x376>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	d10c      	bne.n	8004306 <HAL_RCC_OscConfig+0x35e>
 80042ec:	4b61      	ldr	r3, [pc, #388]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	4a60      	ldr	r2, [pc, #384]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80042f2:	f043 0304 	orr.w	r3, r3, #4
 80042f6:	6713      	str	r3, [r2, #112]	; 0x70
 80042f8:	4b5e      	ldr	r3, [pc, #376]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	4a5d      	ldr	r2, [pc, #372]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6713      	str	r3, [r2, #112]	; 0x70
 8004304:	e00b      	b.n	800431e <HAL_RCC_OscConfig+0x376>
 8004306:	4b5b      	ldr	r3, [pc, #364]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	4a5a      	ldr	r2, [pc, #360]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	6713      	str	r3, [r2, #112]	; 0x70
 8004312:	4b58      	ldr	r3, [pc, #352]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a57      	ldr	r2, [pc, #348]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004318:	f023 0304 	bic.w	r3, r3, #4
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d015      	beq.n	8004352 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004326:	f7fe fa37 	bl	8002798 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432c:	e00a      	b.n	8004344 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f7fe fa33 	bl	8002798 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f241 3288 	movw	r2, #5000	; 0x1388
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e0ce      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004344:	4b4b      	ldr	r3, [pc, #300]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0ee      	beq.n	800432e <HAL_RCC_OscConfig+0x386>
 8004350:	e014      	b.n	800437c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004352:	f7fe fa21 	bl	8002798 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435a:	f7fe fa1d 	bl	8002798 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f241 3288 	movw	r2, #5000	; 0x1388
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e0b8      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004370:	4b40      	ldr	r3, [pc, #256]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ee      	bne.n	800435a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d105      	bne.n	800438e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004382:	4b3c      	ldr	r3, [pc, #240]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	4a3b      	ldr	r2, [pc, #236]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800438c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80a4 	beq.w	80044e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004398:	4b36      	ldr	r3, [pc, #216]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d06b      	beq.n	800447c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d149      	bne.n	8004440 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ac:	4b31      	ldr	r3, [pc, #196]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a30      	ldr	r2, [pc, #192]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fe f9ee 	bl	8002798 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fe f9ea 	bl	8002798 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e087      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	4b28      	ldr	r3, [pc, #160]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	019b      	lsls	r3, r3, #6
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	3b01      	subs	r3, #1
 80043f8:	041b      	lsls	r3, r3, #16
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	061b      	lsls	r3, r3, #24
 8004402:	4313      	orrs	r3, r2
 8004404:	4a1b      	ldr	r2, [pc, #108]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800440a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800440c:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a18      	ldr	r2, [pc, #96]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fe f9be 	bl	8002798 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004420:	f7fe f9ba 	bl	8002798 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e057      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0x478>
 800443e:	e04f      	b.n	80044e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004440:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a0b      	ldr	r2, [pc, #44]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800444a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fe f9a4 	bl	8002798 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004454:	f7fe f9a0 	bl	8002798 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e03d      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004466:	4b03      	ldr	r3, [pc, #12]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x4ac>
 8004472:	e035      	b.n	80044e0 <HAL_RCC_OscConfig+0x538>
 8004474:	40023800 	.word	0x40023800
 8004478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <HAL_RCC_OscConfig+0x544>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d028      	beq.n	80044dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d121      	bne.n	80044dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d11a      	bne.n	80044dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044ac:	4013      	ands	r3, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d111      	bne.n	80044dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	3b01      	subs	r3, #1
 80044c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d107      	bne.n	80044dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800

080044f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0d0      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004508:	4b6a      	ldr	r3, [pc, #424]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d910      	bls.n	8004538 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b67      	ldr	r3, [pc, #412]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 020f 	bic.w	r2, r3, #15
 800451e:	4965      	ldr	r1, [pc, #404]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b63      	ldr	r3, [pc, #396]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0b8      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d020      	beq.n	8004586 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004550:	4b59      	ldr	r3, [pc, #356]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4a58      	ldr	r2, [pc, #352]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800455a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004568:	4b53      	ldr	r3, [pc, #332]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4a52      	ldr	r2, [pc, #328]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 800456e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004572:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004574:	4b50      	ldr	r3, [pc, #320]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	494d      	ldr	r1, [pc, #308]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d040      	beq.n	8004614 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d115      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e07f      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d107      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b2:	4b41      	ldr	r3, [pc, #260]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e073      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c2:	4b3d      	ldr	r3, [pc, #244]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e06b      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045d2:	4b39      	ldr	r3, [pc, #228]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f023 0203 	bic.w	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4936      	ldr	r1, [pc, #216]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e4:	f7fe f8d8 	bl	8002798 <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ec:	f7fe f8d4 	bl	8002798 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e053      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004602:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 020c 	and.w	r2, r3, #12
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	429a      	cmp	r2, r3
 8004612:	d1eb      	bne.n	80045ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004614:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d210      	bcs.n	8004644 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004622:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 020f 	bic.w	r2, r3, #15
 800462a:	4922      	ldr	r1, [pc, #136]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e032      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004650:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4916      	ldr	r1, [pc, #88]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	490e      	ldr	r1, [pc, #56]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004682:	f000 f821 	bl	80046c8 <HAL_RCC_GetSysClockFreq>
 8004686:	4602      	mov	r2, r0
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	490a      	ldr	r1, [pc, #40]	; (80046bc <HAL_RCC_ClockConfig+0x1cc>)
 8004694:	5ccb      	ldrb	r3, [r1, r3]
 8004696:	fa22 f303 	lsr.w	r3, r2, r3
 800469a:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <HAL_RCC_ClockConfig+0x1d0>)
 800469c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_ClockConfig+0x1d4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe f834 	bl	8002710 <HAL_InitTick>

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40023c00 	.word	0x40023c00
 80046b8:	40023800 	.word	0x40023800
 80046bc:	0800af30 	.word	0x0800af30
 80046c0:	2000001c 	.word	0x2000001c
 80046c4:	20000020 	.word	0x20000020

080046c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046cc:	b094      	sub	sp, #80	; 0x50
 80046ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	647b      	str	r3, [r7, #68]	; 0x44
 80046d4:	2300      	movs	r3, #0
 80046d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d8:	2300      	movs	r3, #0
 80046da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e0:	4b79      	ldr	r3, [pc, #484]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d00d      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x40>
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	f200 80e1 	bhi.w	80048b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x34>
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d003      	beq.n	8004702 <HAL_RCC_GetSysClockFreq+0x3a>
 80046fa:	e0db      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046fc:	4b73      	ldr	r3, [pc, #460]	; (80048cc <HAL_RCC_GetSysClockFreq+0x204>)
 80046fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004700:	e0db      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004702:	4b73      	ldr	r3, [pc, #460]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004704:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004706:	e0d8      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004708:	4b6f      	ldr	r3, [pc, #444]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004710:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004712:	4b6d      	ldr	r3, [pc, #436]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d063      	beq.n	80047e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800471e:	4b6a      	ldr	r3, [pc, #424]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	2200      	movs	r2, #0
 8004726:	63bb      	str	r3, [r7, #56]	; 0x38
 8004728:	63fa      	str	r2, [r7, #60]	; 0x3c
 800472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004730:	633b      	str	r3, [r7, #48]	; 0x30
 8004732:	2300      	movs	r3, #0
 8004734:	637b      	str	r3, [r7, #52]	; 0x34
 8004736:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800473a:	4622      	mov	r2, r4
 800473c:	462b      	mov	r3, r5
 800473e:	f04f 0000 	mov.w	r0, #0
 8004742:	f04f 0100 	mov.w	r1, #0
 8004746:	0159      	lsls	r1, r3, #5
 8004748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800474c:	0150      	lsls	r0, r2, #5
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4621      	mov	r1, r4
 8004754:	1a51      	subs	r1, r2, r1
 8004756:	6139      	str	r1, [r7, #16]
 8004758:	4629      	mov	r1, r5
 800475a:	eb63 0301 	sbc.w	r3, r3, r1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800476c:	4659      	mov	r1, fp
 800476e:	018b      	lsls	r3, r1, #6
 8004770:	4651      	mov	r1, sl
 8004772:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004776:	4651      	mov	r1, sl
 8004778:	018a      	lsls	r2, r1, #6
 800477a:	4651      	mov	r1, sl
 800477c:	ebb2 0801 	subs.w	r8, r2, r1
 8004780:	4659      	mov	r1, fp
 8004782:	eb63 0901 	sbc.w	r9, r3, r1
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800479a:	4690      	mov	r8, r2
 800479c:	4699      	mov	r9, r3
 800479e:	4623      	mov	r3, r4
 80047a0:	eb18 0303 	adds.w	r3, r8, r3
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	462b      	mov	r3, r5
 80047a8:	eb49 0303 	adc.w	r3, r9, r3
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047ba:	4629      	mov	r1, r5
 80047bc:	024b      	lsls	r3, r1, #9
 80047be:	4621      	mov	r1, r4
 80047c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047c4:	4621      	mov	r1, r4
 80047c6:	024a      	lsls	r2, r1, #9
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ce:	2200      	movs	r2, #0
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047d8:	f7fc fa56 	bl	8000c88 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4613      	mov	r3, r2
 80047e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e4:	e058      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e6:	4b38      	ldr	r3, [pc, #224]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	099b      	lsrs	r3, r3, #6
 80047ec:	2200      	movs	r2, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	4611      	mov	r1, r2
 80047f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047f6:	623b      	str	r3, [r7, #32]
 80047f8:	2300      	movs	r3, #0
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
 80047fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004800:	4642      	mov	r2, r8
 8004802:	464b      	mov	r3, r9
 8004804:	f04f 0000 	mov.w	r0, #0
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	0159      	lsls	r1, r3, #5
 800480e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004812:	0150      	lsls	r0, r2, #5
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4641      	mov	r1, r8
 800481a:	ebb2 0a01 	subs.w	sl, r2, r1
 800481e:	4649      	mov	r1, r9
 8004820:	eb63 0b01 	sbc.w	fp, r3, r1
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004830:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004834:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004838:	ebb2 040a 	subs.w	r4, r2, sl
 800483c:	eb63 050b 	sbc.w	r5, r3, fp
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	00eb      	lsls	r3, r5, #3
 800484a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800484e:	00e2      	lsls	r2, r4, #3
 8004850:	4614      	mov	r4, r2
 8004852:	461d      	mov	r5, r3
 8004854:	4643      	mov	r3, r8
 8004856:	18e3      	adds	r3, r4, r3
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	464b      	mov	r3, r9
 800485c:	eb45 0303 	adc.w	r3, r5, r3
 8004860:	607b      	str	r3, [r7, #4]
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800486e:	4629      	mov	r1, r5
 8004870:	028b      	lsls	r3, r1, #10
 8004872:	4621      	mov	r1, r4
 8004874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004878:	4621      	mov	r1, r4
 800487a:	028a      	lsls	r2, r1, #10
 800487c:	4610      	mov	r0, r2
 800487e:	4619      	mov	r1, r3
 8004880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004882:	2200      	movs	r2, #0
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	61fa      	str	r2, [r7, #28]
 8004888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800488c:	f7fc f9fc 	bl	8000c88 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4613      	mov	r3, r2
 8004896:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	3301      	adds	r3, #1
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80048a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048b2:	e002      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <HAL_RCC_GetSysClockFreq+0x204>)
 80048b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3750      	adds	r7, #80	; 0x50
 80048c0:	46bd      	mov	sp, r7
 80048c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	00f42400 	.word	0x00f42400
 80048d0:	007a1200 	.word	0x007a1200

080048d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048da:	681b      	ldr	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	2000001c 	.word	0x2000001c

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048f0:	f7ff fff0 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0a9b      	lsrs	r3, r3, #10
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4903      	ldr	r1, [pc, #12]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40023800 	.word	0x40023800
 8004910:	0800af40 	.word	0x0800af40

08004914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004918:	f7ff ffdc 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0b5b      	lsrs	r3, r3, #13
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4903      	ldr	r1, [pc, #12]	; (8004938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	0800af40 	.word	0x0800af40

0800493c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d012      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004964:	4b69      	ldr	r3, [pc, #420]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4a68      	ldr	r2, [pc, #416]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800496e:	6093      	str	r3, [r2, #8]
 8004970:	4b66      	ldr	r3, [pc, #408]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	4964      	ldr	r1, [pc, #400]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004986:	2301      	movs	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d017      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004996:	4b5d      	ldr	r3, [pc, #372]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	4959      	ldr	r1, [pc, #356]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b4:	d101      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049b6:	2301      	movs	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049c2:	2301      	movs	r3, #1
 80049c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d017      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049d2:	4b4e      	ldr	r3, [pc, #312]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	494a      	ldr	r1, [pc, #296]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f0:	d101      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049f2:	2301      	movs	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049fe:	2301      	movs	r3, #1
 8004a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 808b 	beq.w	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a20:	4b3a      	ldr	r3, [pc, #232]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	4a39      	ldr	r2, [pc, #228]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2c:	4b37      	ldr	r3, [pc, #220]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a38:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a34      	ldr	r2, [pc, #208]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a44:	f7fd fea8 	bl	8002798 <HAL_GetTick>
 8004a48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4c:	f7fd fea4 	bl	8002798 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	; 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e357      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a5e:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a6a:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d035      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d02e      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a88:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004aaa:	4a18      	ldr	r2, [pc, #96]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ab0:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d114      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fd fe6c 	bl	8002798 <HAL_GetTick>
 8004ac0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac2:	e00a      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f7fd fe68 	bl	8002798 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e319      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ada:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0ee      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af2:	d111      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b00:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b02:	400b      	ands	r3, r1
 8004b04:	4901      	ldr	r1, [pc, #4]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40007000 	.word	0x40007000
 8004b14:	0ffffcff 	.word	0x0ffffcff
 8004b18:	4baa      	ldr	r3, [pc, #680]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4aa9      	ldr	r2, [pc, #676]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b22:	6093      	str	r3, [r2, #8]
 8004b24:	4ba7      	ldr	r3, [pc, #668]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b30:	49a4      	ldr	r1, [pc, #656]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d010      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b42:	4ba0      	ldr	r3, [pc, #640]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b48:	4a9e      	ldr	r2, [pc, #632]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b52:	4b9c      	ldr	r3, [pc, #624]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	4999      	ldr	r1, [pc, #612]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b70:	4b94      	ldr	r3, [pc, #592]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b7e:	4991      	ldr	r1, [pc, #580]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b92:	4b8c      	ldr	r3, [pc, #560]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba0:	4988      	ldr	r1, [pc, #544]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bb4:	4b83      	ldr	r3, [pc, #524]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc2:	4980      	ldr	r1, [pc, #512]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bd6:	4b7b      	ldr	r3, [pc, #492]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	4977      	ldr	r1, [pc, #476]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bf8:	4b72      	ldr	r3, [pc, #456]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfe:	f023 0203 	bic.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	496f      	ldr	r1, [pc, #444]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c1a:	4b6a      	ldr	r3, [pc, #424]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c20:	f023 020c 	bic.w	r2, r3, #12
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c28:	4966      	ldr	r1, [pc, #408]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c3c:	4b61      	ldr	r3, [pc, #388]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	495e      	ldr	r1, [pc, #376]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c5e:	4b59      	ldr	r3, [pc, #356]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6c:	4955      	ldr	r1, [pc, #340]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c80:	4b50      	ldr	r3, [pc, #320]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8e:	494d      	ldr	r1, [pc, #308]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ca2:	4b48      	ldr	r3, [pc, #288]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	4944      	ldr	r1, [pc, #272]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004cc4:	4b3f      	ldr	r3, [pc, #252]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd2:	493c      	ldr	r1, [pc, #240]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ce6:	4b37      	ldr	r3, [pc, #220]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	4933      	ldr	r1, [pc, #204]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d08:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d16:	492b      	ldr	r1, [pc, #172]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d011      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d2a:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d38:	4922      	ldr	r1, [pc, #136]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d48:	d101      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d6a:	4b16      	ldr	r3, [pc, #88]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d78:	4912      	ldr	r1, [pc, #72]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00b      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9c:	4909      	ldr	r1, [pc, #36]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d006      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 80d9 	beq.w	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004db8:	4b02      	ldr	r3, [pc, #8]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a01      	ldr	r2, [pc, #4]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dc2:	e001      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dca:	f7fd fce5 	bl	8002798 <HAL_GetTick>
 8004dce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dd2:	f7fd fce1 	bl	8002798 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b64      	cmp	r3, #100	; 0x64
 8004dde:	d901      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e194      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004de4:	4b6c      	ldr	r3, [pc, #432]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d021      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11d      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e04:	4b64      	ldr	r3, [pc, #400]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0a:	0c1b      	lsrs	r3, r3, #16
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e12:	4b61      	ldr	r3, [pc, #388]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e18:	0e1b      	lsrs	r3, r3, #24
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	019a      	lsls	r2, r3, #6
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	061b      	lsls	r3, r3, #24
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	071b      	lsls	r3, r3, #28
 8004e38:	4957      	ldr	r1, [pc, #348]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d004      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d02e      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e6a:	d129      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e6c:	4b4a      	ldr	r3, [pc, #296]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e72:	0c1b      	lsrs	r3, r3, #16
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e7a:	4b47      	ldr	r3, [pc, #284]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e80:	0f1b      	lsrs	r3, r3, #28
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	019a      	lsls	r2, r3, #6
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	071b      	lsls	r3, r3, #28
 8004ea0:	493d      	ldr	r1, [pc, #244]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ea8:	4b3b      	ldr	r3, [pc, #236]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eae:	f023 021f 	bic.w	r2, r3, #31
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	4937      	ldr	r1, [pc, #220]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01d      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ecc:	4b32      	ldr	r3, [pc, #200]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed2:	0e1b      	lsrs	r3, r3, #24
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004eda:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee0:	0f1b      	lsrs	r3, r3, #28
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	019a      	lsls	r2, r3, #6
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	041b      	lsls	r3, r3, #16
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	061b      	lsls	r3, r3, #24
 8004efa:	431a      	orrs	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	071b      	lsls	r3, r3, #28
 8004f00:	4925      	ldr	r1, [pc, #148]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d011      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	019a      	lsls	r2, r3, #6
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	041b      	lsls	r3, r3, #16
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	061b      	lsls	r3, r3, #24
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	071b      	lsls	r3, r3, #28
 8004f30:	4919      	ldr	r1, [pc, #100]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f38:	4b17      	ldr	r3, [pc, #92]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f44:	f7fd fc28 	bl	8002798 <HAL_GetTick>
 8004f48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f4c:	f7fd fc24 	bl	8002798 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e0d7      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	f040 80cd 	bne.w	800510c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f72:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7e:	f7fd fc0b 	bl	8002798 <HAL_GetTick>
 8004f82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f84:	e00a      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f86:	f7fd fc07 	bl	8002798 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b64      	cmp	r3, #100	; 0x64
 8004f92:	d903      	bls.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e0ba      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004f98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f9c:	4b5e      	ldr	r3, [pc, #376]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa8:	d0ed      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d02e      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d12a      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fd2:	4b51      	ldr	r3, [pc, #324]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fe0:	4b4d      	ldr	r3, [pc, #308]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	0f1b      	lsrs	r3, r3, #28
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	019a      	lsls	r2, r3, #6
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	041b      	lsls	r3, r3, #16
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	061b      	lsls	r3, r3, #24
 8005000:	431a      	orrs	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	071b      	lsls	r3, r3, #28
 8005006:	4944      	ldr	r1, [pc, #272]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800500e:	4b42      	ldr	r3, [pc, #264]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005014:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	3b01      	subs	r3, #1
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	493d      	ldr	r1, [pc, #244]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d022      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503c:	d11d      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800503e:	4b36      	ldr	r3, [pc, #216]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	0e1b      	lsrs	r3, r3, #24
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800504c:	4b32      	ldr	r3, [pc, #200]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	0f1b      	lsrs	r3, r3, #28
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	019a      	lsls	r2, r3, #6
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	431a      	orrs	r2, r3
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	061b      	lsls	r3, r3, #24
 800506c:	431a      	orrs	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	071b      	lsls	r3, r3, #28
 8005072:	4929      	ldr	r1, [pc, #164]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d028      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005086:	4b24      	ldr	r3, [pc, #144]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508c:	0e1b      	lsrs	r3, r3, #24
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005094:	4b20      	ldr	r3, [pc, #128]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	019a      	lsls	r2, r3, #6
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	041b      	lsls	r3, r3, #16
 80050ac:	431a      	orrs	r2, r3
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	061b      	lsls	r3, r3, #24
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	071b      	lsls	r3, r3, #28
 80050ba:	4917      	ldr	r1, [pc, #92]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050c2:	4b15      	ldr	r3, [pc, #84]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	4911      	ldr	r1, [pc, #68]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0e      	ldr	r2, [pc, #56]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e4:	f7fd fb58 	bl	8002798 <HAL_GetTick>
 80050e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050ec:	f7fd fb54 	bl	8002798 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e007      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510a:	d1ef      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40023800 	.word	0x40023800

0800511c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e049      	b.n	80051c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fd f848 	bl	80021d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f000 fd30 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d001      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e054      	b.n	800528e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a26      	ldr	r2, [pc, #152]	; (800529c <HAL_TIM_Base_Start_IT+0xd0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d022      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520e:	d01d      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a22      	ldr	r2, [pc, #136]	; (80052a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d018      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1f      	ldr	r2, [pc, #124]	; (80052a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00e      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <HAL_TIM_Base_Start_IT+0xe0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d009      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1c      	ldr	r2, [pc, #112]	; (80052b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1b      	ldr	r2, [pc, #108]	; (80052b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d115      	bne.n	8005278 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <HAL_TIM_Base_Start_IT+0xec>)
 8005254:	4013      	ands	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b06      	cmp	r3, #6
 800525c:	d015      	beq.n	800528a <HAL_TIM_Base_Start_IT+0xbe>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005264:	d011      	beq.n	800528a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005276:	e008      	b.n	800528a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	e000      	b.n	800528c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40010000 	.word	0x40010000
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800
 80052a8:	40000c00 	.word	0x40000c00
 80052ac:	40010400 	.word	0x40010400
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40001800 	.word	0x40001800
 80052b8:	00010007 	.word	0x00010007

080052bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e049      	b.n	8005362 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f841 	bl	800536a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3304      	adds	r3, #4
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f000 fc60 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <HAL_TIM_PWM_Start+0x24>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e03c      	b.n	800541e <HAL_TIM_PWM_Start+0x9e>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d109      	bne.n	80053be <HAL_TIM_PWM_Start+0x3e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	bf14      	ite	ne
 80053b6:	2301      	movne	r3, #1
 80053b8:	2300      	moveq	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	e02f      	b.n	800541e <HAL_TIM_PWM_Start+0x9e>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d109      	bne.n	80053d8 <HAL_TIM_PWM_Start+0x58>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e022      	b.n	800541e <HAL_TIM_PWM_Start+0x9e>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b0c      	cmp	r3, #12
 80053dc:	d109      	bne.n	80053f2 <HAL_TIM_PWM_Start+0x72>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	bf14      	ite	ne
 80053ea:	2301      	movne	r3, #1
 80053ec:	2300      	moveq	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	e015      	b.n	800541e <HAL_TIM_PWM_Start+0x9e>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d109      	bne.n	800540c <HAL_TIM_PWM_Start+0x8c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	bf14      	ite	ne
 8005404:	2301      	movne	r3, #1
 8005406:	2300      	moveq	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	e008      	b.n	800541e <HAL_TIM_PWM_Start+0x9e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	bf14      	ite	ne
 8005418:	2301      	movne	r3, #1
 800541a:	2300      	moveq	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e092      	b.n	800554c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <HAL_TIM_PWM_Start+0xb6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005434:	e023      	b.n	800547e <HAL_TIM_PWM_Start+0xfe>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b04      	cmp	r3, #4
 800543a:	d104      	bne.n	8005446 <HAL_TIM_PWM_Start+0xc6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005444:	e01b      	b.n	800547e <HAL_TIM_PWM_Start+0xfe>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b08      	cmp	r3, #8
 800544a:	d104      	bne.n	8005456 <HAL_TIM_PWM_Start+0xd6>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005454:	e013      	b.n	800547e <HAL_TIM_PWM_Start+0xfe>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b0c      	cmp	r3, #12
 800545a:	d104      	bne.n	8005466 <HAL_TIM_PWM_Start+0xe6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005464:	e00b      	b.n	800547e <HAL_TIM_PWM_Start+0xfe>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b10      	cmp	r3, #16
 800546a:	d104      	bne.n	8005476 <HAL_TIM_PWM_Start+0xf6>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005474:	e003      	b.n	800547e <HAL_TIM_PWM_Start+0xfe>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2201      	movs	r2, #1
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 ff32 	bl	80062f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a30      	ldr	r2, [pc, #192]	; (8005554 <HAL_TIM_PWM_Start+0x1d4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d004      	beq.n	80054a0 <HAL_TIM_PWM_Start+0x120>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2f      	ldr	r2, [pc, #188]	; (8005558 <HAL_TIM_PWM_Start+0x1d8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d101      	bne.n	80054a4 <HAL_TIM_PWM_Start+0x124>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <HAL_TIM_PWM_Start+0x126>
 80054a4:	2300      	movs	r3, #0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a25      	ldr	r2, [pc, #148]	; (8005554 <HAL_TIM_PWM_Start+0x1d4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d022      	beq.n	800550a <HAL_TIM_PWM_Start+0x18a>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054cc:	d01d      	beq.n	800550a <HAL_TIM_PWM_Start+0x18a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a22      	ldr	r2, [pc, #136]	; (800555c <HAL_TIM_PWM_Start+0x1dc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d018      	beq.n	800550a <HAL_TIM_PWM_Start+0x18a>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a20      	ldr	r2, [pc, #128]	; (8005560 <HAL_TIM_PWM_Start+0x1e0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <HAL_TIM_PWM_Start+0x18a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1f      	ldr	r2, [pc, #124]	; (8005564 <HAL_TIM_PWM_Start+0x1e4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00e      	beq.n	800550a <HAL_TIM_PWM_Start+0x18a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a19      	ldr	r2, [pc, #100]	; (8005558 <HAL_TIM_PWM_Start+0x1d8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d009      	beq.n	800550a <HAL_TIM_PWM_Start+0x18a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1b      	ldr	r2, [pc, #108]	; (8005568 <HAL_TIM_PWM_Start+0x1e8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d004      	beq.n	800550a <HAL_TIM_PWM_Start+0x18a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a19      	ldr	r2, [pc, #100]	; (800556c <HAL_TIM_PWM_Start+0x1ec>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d115      	bne.n	8005536 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <HAL_TIM_PWM_Start+0x1f0>)
 8005512:	4013      	ands	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b06      	cmp	r3, #6
 800551a:	d015      	beq.n	8005548 <HAL_TIM_PWM_Start+0x1c8>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005522:	d011      	beq.n	8005548 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005534:	e008      	b.n	8005548 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e000      	b.n	800554a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005548:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40010000 	.word	0x40010000
 8005558:	40010400 	.word	0x40010400
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40014000 	.word	0x40014000
 800556c:	40001800 	.word	0x40001800
 8005570:	00010007 	.word	0x00010007

08005574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b02      	cmp	r3, #2
 8005588:	d122      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d11b      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0202 	mvn.w	r2, #2
 80055a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fae4 	bl	8005b84 <HAL_TIM_IC_CaptureCallback>
 80055bc:	e005      	b.n	80055ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fad6 	bl	8005b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fae7 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d122      	bne.n	8005624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d11b      	bne.n	8005624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0204 	mvn.w	r2, #4
 80055f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 faba 	bl	8005b84 <HAL_TIM_IC_CaptureCallback>
 8005610:	e005      	b.n	800561e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 faac 	bl	8005b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fabd 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b08      	cmp	r3, #8
 8005630:	d122      	bne.n	8005678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b08      	cmp	r3, #8
 800563e:	d11b      	bne.n	8005678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0208 	mvn.w	r2, #8
 8005648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2204      	movs	r2, #4
 800564e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa90 	bl	8005b84 <HAL_TIM_IC_CaptureCallback>
 8005664:	e005      	b.n	8005672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fa82 	bl	8005b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fa93 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0310 	and.w	r3, r3, #16
 8005682:	2b10      	cmp	r3, #16
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b10      	cmp	r3, #16
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0210 	mvn.w	r2, #16
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2208      	movs	r2, #8
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fa66 	bl	8005b84 <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fa58 	bl	8005b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fa69 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d10e      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d107      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0201 	mvn.w	r2, #1
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fc fc10 	bl	8001f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b80      	cmp	r3, #128	; 0x80
 8005704:	d10e      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005710:	2b80      	cmp	r3, #128	; 0x80
 8005712:	d107      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fea4 	bl	800646c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005732:	d10e      	bne.n	8005752 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573e:	2b80      	cmp	r3, #128	; 0x80
 8005740:	d107      	bne.n	8005752 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800574a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fe97 	bl	8006480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	d10e      	bne.n	800577e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d107      	bne.n	800577e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fa17 	bl	8005bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b20      	cmp	r3, #32
 800578a:	d10e      	bne.n	80057aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b20      	cmp	r3, #32
 8005798:	d107      	bne.n	80057aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f06f 0220 	mvn.w	r2, #32
 80057a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fe57 	bl	8006458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e0ff      	b.n	80059d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b14      	cmp	r3, #20
 80057de:	f200 80f0 	bhi.w	80059c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057e2:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	0800583d 	.word	0x0800583d
 80057ec:	080059c3 	.word	0x080059c3
 80057f0:	080059c3 	.word	0x080059c3
 80057f4:	080059c3 	.word	0x080059c3
 80057f8:	0800587d 	.word	0x0800587d
 80057fc:	080059c3 	.word	0x080059c3
 8005800:	080059c3 	.word	0x080059c3
 8005804:	080059c3 	.word	0x080059c3
 8005808:	080058bf 	.word	0x080058bf
 800580c:	080059c3 	.word	0x080059c3
 8005810:	080059c3 	.word	0x080059c3
 8005814:	080059c3 	.word	0x080059c3
 8005818:	080058ff 	.word	0x080058ff
 800581c:	080059c3 	.word	0x080059c3
 8005820:	080059c3 	.word	0x080059c3
 8005824:	080059c3 	.word	0x080059c3
 8005828:	08005941 	.word	0x08005941
 800582c:	080059c3 	.word	0x080059c3
 8005830:	080059c3 	.word	0x080059c3
 8005834:	080059c3 	.word	0x080059c3
 8005838:	08005981 	.word	0x08005981
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fa5c 	bl	8005d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0208 	orr.w	r2, r2, #8
 8005856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0204 	bic.w	r2, r2, #4
 8005866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6999      	ldr	r1, [r3, #24]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	619a      	str	r2, [r3, #24]
      break;
 800587a:	e0a5      	b.n	80059c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 faae 	bl	8005de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6999      	ldr	r1, [r3, #24]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	021a      	lsls	r2, r3, #8
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	619a      	str	r2, [r3, #24]
      break;
 80058bc:	e084      	b.n	80059c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fb05 	bl	8005ed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0208 	orr.w	r2, r2, #8
 80058d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0204 	bic.w	r2, r2, #4
 80058e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69d9      	ldr	r1, [r3, #28]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	61da      	str	r2, [r3, #28]
      break;
 80058fc:	e064      	b.n	80059c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fb5b 	bl	8005fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69d9      	ldr	r1, [r3, #28]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	021a      	lsls	r2, r3, #8
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	61da      	str	r2, [r3, #28]
      break;
 800593e:	e043      	b.n	80059c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fb92 	bl	8006070 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0208 	orr.w	r2, r2, #8
 800595a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0204 	bic.w	r2, r2, #4
 800596a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800597e:	e023      	b.n	80059c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fbc4 	bl	8006114 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800599a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	021a      	lsls	r2, r3, #8
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059c0:	e002      	b.n	80059c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	75fb      	strb	r3, [r7, #23]
      break;
 80059c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop

080059dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_TIM_ConfigClockSource+0x1c>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e0b4      	b.n	8005b62 <HAL_TIM_ConfigClockSource+0x186>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	4b56      	ldr	r3, [pc, #344]	; (8005b6c <HAL_TIM_ConfigClockSource+0x190>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a30:	d03e      	beq.n	8005ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a36:	f200 8087 	bhi.w	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3e:	f000 8086 	beq.w	8005b4e <HAL_TIM_ConfigClockSource+0x172>
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a46:	d87f      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a48:	2b70      	cmp	r3, #112	; 0x70
 8005a4a:	d01a      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0xa6>
 8005a4c:	2b70      	cmp	r3, #112	; 0x70
 8005a4e:	d87b      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a50:	2b60      	cmp	r3, #96	; 0x60
 8005a52:	d050      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x11a>
 8005a54:	2b60      	cmp	r3, #96	; 0x60
 8005a56:	d877      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a58:	2b50      	cmp	r3, #80	; 0x50
 8005a5a:	d03c      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8005a5c:	2b50      	cmp	r3, #80	; 0x50
 8005a5e:	d873      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	d058      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x13a>
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d86f      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a68:	2b30      	cmp	r3, #48	; 0x30
 8005a6a:	d064      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a6c:	2b30      	cmp	r3, #48	; 0x30
 8005a6e:	d86b      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d060      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d867      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d05c      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d05a      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a80:	e062      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a92:	f000 fc0d 	bl	80062b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	609a      	str	r2, [r3, #8]
      break;
 8005aae:	e04f      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ac0:	f000 fbf6 	bl	80062b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ad2:	609a      	str	r2, [r3, #8]
      break;
 8005ad4:	e03c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f000 fb6a 	bl	80061bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2150      	movs	r1, #80	; 0x50
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fbc3 	bl	800627a <TIM_ITRx_SetConfig>
      break;
 8005af4:	e02c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 fb89 	bl	800621a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2160      	movs	r1, #96	; 0x60
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fbb3 	bl	800627a <TIM_ITRx_SetConfig>
      break;
 8005b14:	e01c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b22:	461a      	mov	r2, r3
 8005b24:	f000 fb4a 	bl	80061bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2140      	movs	r1, #64	; 0x40
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fba3 	bl	800627a <TIM_ITRx_SetConfig>
      break;
 8005b34:	e00c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f000 fb9a 	bl	800627a <TIM_ITRx_SetConfig>
      break;
 8005b46:	e003      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4c:	e000      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	fffeff88 	.word	0xfffeff88

08005b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a40      	ldr	r2, [pc, #256]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d013      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bde:	d00f      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3d      	ldr	r2, [pc, #244]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3c      	ldr	r2, [pc, #240]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3b      	ldr	r2, [pc, #236]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3a      	ldr	r2, [pc, #232]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d108      	bne.n	8005c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2f      	ldr	r2, [pc, #188]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d02b      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c20:	d027      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2c      	ldr	r2, [pc, #176]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d023      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01f      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2a      	ldr	r2, [pc, #168]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01b      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a29      	ldr	r2, [pc, #164]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d017      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a28      	ldr	r2, [pc, #160]	; (8005ce8 <TIM_Base_SetConfig+0x128>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d013      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a27      	ldr	r2, [pc, #156]	; (8005cec <TIM_Base_SetConfig+0x12c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00f      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <TIM_Base_SetConfig+0x130>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00b      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a25      	ldr	r2, [pc, #148]	; (8005cf4 <TIM_Base_SetConfig+0x134>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a24      	ldr	r2, [pc, #144]	; (8005cf8 <TIM_Base_SetConfig+0x138>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a23      	ldr	r2, [pc, #140]	; (8005cfc <TIM_Base_SetConfig+0x13c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d108      	bne.n	8005c84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a0a      	ldr	r2, [pc, #40]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a0c      	ldr	r2, [pc, #48]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d103      	bne.n	8005cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	615a      	str	r2, [r3, #20]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40010000 	.word	0x40010000
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00
 8005ce4:	40010400 	.word	0x40010400
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40014400 	.word	0x40014400
 8005cf0:	40014800 	.word	0x40014800
 8005cf4:	40001800 	.word	0x40001800
 8005cf8:	40001c00 	.word	0x40001c00
 8005cfc:	40002000 	.word	0x40002000

08005d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f023 0201 	bic.w	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4b2b      	ldr	r3, [pc, #172]	; (8005dd8 <TIM_OC1_SetConfig+0xd8>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0303 	bic.w	r3, r3, #3
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f023 0302 	bic.w	r3, r3, #2
 8005d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a21      	ldr	r2, [pc, #132]	; (8005ddc <TIM_OC1_SetConfig+0xdc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_OC1_SetConfig+0x64>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a20      	ldr	r2, [pc, #128]	; (8005de0 <TIM_OC1_SetConfig+0xe0>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d10c      	bne.n	8005d7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f023 0308 	bic.w	r3, r3, #8
 8005d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 0304 	bic.w	r3, r3, #4
 8005d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <TIM_OC1_SetConfig+0xdc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_OC1_SetConfig+0x8e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <TIM_OC1_SetConfig+0xe0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d111      	bne.n	8005db2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	621a      	str	r2, [r3, #32]
}
 8005dcc:	bf00      	nop
 8005dce:	371c      	adds	r7, #28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	fffeff8f 	.word	0xfffeff8f
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40010400 	.word	0x40010400

08005de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f023 0210 	bic.w	r2, r3, #16
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4b2e      	ldr	r3, [pc, #184]	; (8005ec8 <TIM_OC2_SetConfig+0xe4>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f023 0320 	bic.w	r3, r3, #32
 8005e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a23      	ldr	r2, [pc, #140]	; (8005ecc <TIM_OC2_SetConfig+0xe8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_OC2_SetConfig+0x68>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a22      	ldr	r2, [pc, #136]	; (8005ed0 <TIM_OC2_SetConfig+0xec>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d10d      	bne.n	8005e68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a18      	ldr	r2, [pc, #96]	; (8005ecc <TIM_OC2_SetConfig+0xe8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_OC2_SetConfig+0x94>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a17      	ldr	r2, [pc, #92]	; (8005ed0 <TIM_OC2_SetConfig+0xec>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d113      	bne.n	8005ea0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	feff8fff 	.word	0xfeff8fff
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40010400 	.word	0x40010400

08005ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4b2d      	ldr	r3, [pc, #180]	; (8005fb4 <TIM_OC3_SetConfig+0xe0>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0303 	bic.w	r3, r3, #3
 8005f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a22      	ldr	r2, [pc, #136]	; (8005fb8 <TIM_OC3_SetConfig+0xe4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d003      	beq.n	8005f3a <TIM_OC3_SetConfig+0x66>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a21      	ldr	r2, [pc, #132]	; (8005fbc <TIM_OC3_SetConfig+0xe8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d10d      	bne.n	8005f56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a17      	ldr	r2, [pc, #92]	; (8005fb8 <TIM_OC3_SetConfig+0xe4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_OC3_SetConfig+0x92>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a16      	ldr	r2, [pc, #88]	; (8005fbc <TIM_OC3_SetConfig+0xe8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d113      	bne.n	8005f8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	621a      	str	r2, [r3, #32]
}
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	fffeff8f 	.word	0xfffeff8f
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	40010400 	.word	0x40010400

08005fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4b1e      	ldr	r3, [pc, #120]	; (8006064 <TIM_OC4_SetConfig+0xa4>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800600a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	031b      	lsls	r3, r3, #12
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a13      	ldr	r2, [pc, #76]	; (8006068 <TIM_OC4_SetConfig+0xa8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_OC4_SetConfig+0x68>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a12      	ldr	r2, [pc, #72]	; (800606c <TIM_OC4_SetConfig+0xac>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d109      	bne.n	800603c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800602e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	019b      	lsls	r3, r3, #6
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	621a      	str	r2, [r3, #32]
}
 8006056:	bf00      	nop
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	feff8fff 	.word	0xfeff8fff
 8006068:	40010000 	.word	0x40010000
 800606c:	40010400 	.word	0x40010400

08006070 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4b1b      	ldr	r3, [pc, #108]	; (8006108 <TIM_OC5_SetConfig+0x98>)
 800609c:	4013      	ands	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80060b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	041b      	lsls	r3, r3, #16
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a12      	ldr	r2, [pc, #72]	; (800610c <TIM_OC5_SetConfig+0x9c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d003      	beq.n	80060ce <TIM_OC5_SetConfig+0x5e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a11      	ldr	r2, [pc, #68]	; (8006110 <TIM_OC5_SetConfig+0xa0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d109      	bne.n	80060e2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	021b      	lsls	r3, r3, #8
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	621a      	str	r2, [r3, #32]
}
 80060fc:	bf00      	nop
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	fffeff8f 	.word	0xfffeff8f
 800610c:	40010000 	.word	0x40010000
 8006110:	40010400 	.word	0x40010400

08006114 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4b1c      	ldr	r3, [pc, #112]	; (80061b0 <TIM_OC6_SetConfig+0x9c>)
 8006140:	4013      	ands	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	051b      	lsls	r3, r3, #20
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a13      	ldr	r2, [pc, #76]	; (80061b4 <TIM_OC6_SetConfig+0xa0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_OC6_SetConfig+0x60>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <TIM_OC6_SetConfig+0xa4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d109      	bne.n	8006188 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800617a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	029b      	lsls	r3, r3, #10
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	feff8fff 	.word	0xfeff8fff
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40010400 	.word	0x40010400

080061bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f023 0201 	bic.w	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f023 030a 	bic.w	r3, r3, #10
 80061f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800621a:	b480      	push	{r7}
 800621c:	b087      	sub	sp, #28
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	f023 0210 	bic.w	r2, r3, #16
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006244:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	031b      	lsls	r3, r3, #12
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006256:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	f043 0307 	orr.w	r3, r3, #7
 800629c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	609a      	str	r2, [r3, #8]
}
 80062a4:	bf00      	nop
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	021a      	lsls	r2, r3, #8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	609a      	str	r2, [r3, #8]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	2201      	movs	r2, #1
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1a      	ldr	r2, [r3, #32]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	43db      	mvns	r3, r3
 8006312:	401a      	ands	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a1a      	ldr	r2, [r3, #32]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	fa01 f303 	lsl.w	r3, r1, r3
 8006328:	431a      	orrs	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]
}
 800632e:	bf00      	nop
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
	...

0800633c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006350:	2302      	movs	r3, #2
 8006352:	e06d      	b.n	8006430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a30      	ldr	r2, [pc, #192]	; (800643c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2f      	ldr	r2, [pc, #188]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d108      	bne.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800638e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a20      	ldr	r2, [pc, #128]	; (800643c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d022      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c6:	d01d      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1d      	ldr	r2, [pc, #116]	; (8006444 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d018      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d013      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1a      	ldr	r2, [pc, #104]	; (800644c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00e      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a15      	ldr	r2, [pc, #84]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d009      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a16      	ldr	r2, [pc, #88]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d004      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a15      	ldr	r2, [pc, #84]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d10c      	bne.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800640a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	4313      	orrs	r3, r2
 8006414:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	40010000 	.word	0x40010000
 8006440:	40010400 	.word	0x40010400
 8006444:	40000400 	.word	0x40000400
 8006448:	40000800 	.word	0x40000800
 800644c:	40000c00 	.word	0x40000c00
 8006450:	40014000 	.word	0x40014000
 8006454:	40001800 	.word	0x40001800

08006458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e040      	b.n	8006528 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fb fefc 	bl	80022b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2224      	movs	r2, #36	; 0x24
 80064c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0201 	bic.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fbe6 	bl	8006ca4 <UART_SetConfig>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e022      	b.n	8006528 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fe3e 	bl	800716c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800650e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fec5 	bl	80072b0 <UART_CheckIdleState>
 8006526:	4603      	mov	r3, r0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08a      	sub	sp, #40	; 0x28
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	4613      	mov	r3, r2
 800653e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006544:	2b20      	cmp	r3, #32
 8006546:	d171      	bne.n	800662c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_UART_Transmit+0x24>
 800654e:	88fb      	ldrh	r3, [r7, #6]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e06a      	b.n	800662e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2221      	movs	r2, #33	; 0x21
 8006564:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006566:	f7fc f917 	bl	8002798 <HAL_GetTick>
 800656a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	88fa      	ldrh	r2, [r7, #6]
 8006578:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006584:	d108      	bne.n	8006598 <HAL_UART_Transmit+0x68>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d104      	bne.n	8006598 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	e003      	b.n	80065a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800659c:	2300      	movs	r3, #0
 800659e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065a0:	e02c      	b.n	80065fc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2200      	movs	r2, #0
 80065aa:	2180      	movs	r1, #128	; 0x80
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 feb6 	bl	800731e <UART_WaitOnFlagUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e038      	b.n	800662e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	3302      	adds	r3, #2
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	e007      	b.n	80065ea <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	781a      	ldrb	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	3301      	adds	r3, #1
 80065e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006602:	b29b      	uxth	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1cc      	bne.n	80065a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2200      	movs	r2, #0
 8006610:	2140      	movs	r1, #64	; 0x40
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fe83 	bl	800731e <UART_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e005      	b.n	800662e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2220      	movs	r2, #32
 8006626:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	e000      	b.n	800662e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800662c:	2302      	movs	r3, #2
  }
}
 800662e:	4618      	mov	r0, r3
 8006630:	3720      	adds	r7, #32
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b08a      	sub	sp, #40	; 0x28
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	4613      	mov	r3, r2
 8006642:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800664a:	2b20      	cmp	r3, #32
 800664c:	d132      	bne.n	80066b4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_UART_Receive_IT+0x24>
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e02b      	b.n	80066b6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d018      	beq.n	80066a4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	613b      	str	r3, [r7, #16]
   return(result);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	623b      	str	r3, [r7, #32]
 8006692:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	69f9      	ldr	r1, [r7, #28]
 8006696:	6a3a      	ldr	r2, [r7, #32]
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	61bb      	str	r3, [r7, #24]
   return(result);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e6      	bne.n	8006672 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	461a      	mov	r2, r3
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 fefe 	bl	80074ac <UART_Start_Receive_IT>
 80066b0:	4603      	mov	r3, r0
 80066b2:	e000      	b.n	80066b6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3728      	adds	r7, #40	; 0x28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b0ba      	sub	sp, #232	; 0xe8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80066ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80066ee:	4013      	ands	r3, r2
 80066f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80066f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d115      	bne.n	8006728 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00f      	beq.n	8006728 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d009      	beq.n	8006728 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8297 	beq.w	8006c4c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
      }
      return;
 8006726:	e291      	b.n	8006c4c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8117 	beq.w	8006960 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800673e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006742:	4b85      	ldr	r3, [pc, #532]	; (8006958 <HAL_UART_IRQHandler+0x298>)
 8006744:	4013      	ands	r3, r2
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 810a 	beq.w	8006960 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800674c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d011      	beq.n	800677c <HAL_UART_IRQHandler+0xbc>
 8006758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00b      	beq.n	800677c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2201      	movs	r2, #1
 800676a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006772:	f043 0201 	orr.w	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800677c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d011      	beq.n	80067ac <HAL_UART_IRQHandler+0xec>
 8006788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2202      	movs	r2, #2
 800679a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067a2:	f043 0204 	orr.w	r2, r3, #4
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d011      	beq.n	80067dc <HAL_UART_IRQHandler+0x11c>
 80067b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2204      	movs	r2, #4
 80067ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067d2:	f043 0202 	orr.w	r2, r3, #2
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d017      	beq.n	8006818 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80067f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2208      	movs	r2, #8
 8006806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800680e:	f043 0208 	orr.w	r2, r3, #8
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006820:	2b00      	cmp	r3, #0
 8006822:	d012      	beq.n	800684a <HAL_UART_IRQHandler+0x18a>
 8006824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00c      	beq.n	800684a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006840:	f043 0220 	orr.w	r2, r3, #32
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 81fd 	beq.w	8006c50 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00d      	beq.n	800687e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	2b40      	cmp	r3, #64	; 0x40
 8006894:	d005      	beq.n	80068a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800689a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d04f      	beq.n	8006942 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fec8 	bl	8007638 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	d141      	bne.n	800693a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3308      	adds	r3, #8
 80068bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3308      	adds	r3, #8
 80068de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1d9      	bne.n	80068b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006906:	2b00      	cmp	r3, #0
 8006908:	d013      	beq.n	8006932 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800690e:	4a13      	ldr	r2, [pc, #76]	; (800695c <HAL_UART_IRQHandler+0x29c>)
 8006910:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006916:	4618      	mov	r0, r3
 8006918:	f7fc f8ef 	bl	8002afa <HAL_DMA_Abort_IT>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d017      	beq.n	8006952 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800692c:	4610      	mov	r0, r2
 800692e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006930:	e00f      	b.n	8006952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f9a0 	bl	8006c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006938:	e00b      	b.n	8006952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f99c 	bl	8006c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006940:	e007      	b.n	8006952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f998 	bl	8006c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006950:	e17e      	b.n	8006c50 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006952:	bf00      	nop
    return;
 8006954:	e17c      	b.n	8006c50 <HAL_UART_IRQHandler+0x590>
 8006956:	bf00      	nop
 8006958:	04000120 	.word	0x04000120
 800695c:	08007701 	.word	0x08007701

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006964:	2b01      	cmp	r3, #1
 8006966:	f040 814c 	bne.w	8006c02 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 8145 	beq.w	8006c02 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 813e 	beq.w	8006c02 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2210      	movs	r2, #16
 800698c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006998:	2b40      	cmp	r3, #64	; 0x40
 800699a:	f040 80b6 	bne.w	8006b0a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 8150 	beq.w	8006c54 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069be:	429a      	cmp	r2, r3
 80069c0:	f080 8148 	bcs.w	8006c54 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d8:	f000 8086 	beq.w	8006ae8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1da      	bne.n	80069dc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3308      	adds	r3, #8
 8006a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e1      	bne.n	8006a26 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3308      	adds	r3, #8
 8006a68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3308      	adds	r3, #8
 8006a82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e3      	bne.n	8006a62 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ab8:	f023 0310 	bic.w	r3, r3, #16
 8006abc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aca:	65bb      	str	r3, [r7, #88]	; 0x58
 8006acc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ad0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e4      	bne.n	8006aa8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fb ff99 	bl	8002a1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f8c2 	bl	8006c8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b08:	e0a4      	b.n	8006c54 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8096 	beq.w	8006c58 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006b2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8091 	beq.w	8006c58 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	e853 3f00 	ldrex	r3, [r3]
 8006b42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b58:	647b      	str	r3, [r7, #68]	; 0x44
 8006b5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e4      	bne.n	8006b36 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3308      	adds	r3, #8
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	f023 0301 	bic.w	r3, r3, #1
 8006b82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b90:	633a      	str	r2, [r7, #48]	; 0x30
 8006b92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e3      	bne.n	8006b6c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f023 0310 	bic.w	r3, r3, #16
 8006bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	69b9      	ldr	r1, [r7, #24]
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	617b      	str	r3, [r7, #20]
   return(result);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e4      	bne.n	8006bb8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f846 	bl	8006c8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c00:	e02a      	b.n	8006c58 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00e      	beq.n	8006c2c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d008      	beq.n	8006c2c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01c      	beq.n	8006c5c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
    }
    return;
 8006c2a:	e017      	b.n	8006c5c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d012      	beq.n	8006c5e <HAL_UART_IRQHandler+0x59e>
 8006c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00c      	beq.n	8006c5e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fd71 	bl	800772c <UART_EndTransmit_IT>
    return;
 8006c4a:	e008      	b.n	8006c5e <HAL_UART_IRQHandler+0x59e>
      return;
 8006c4c:	bf00      	nop
 8006c4e:	e006      	b.n	8006c5e <HAL_UART_IRQHandler+0x59e>
    return;
 8006c50:	bf00      	nop
 8006c52:	e004      	b.n	8006c5e <HAL_UART_IRQHandler+0x59e>
      return;
 8006c54:	bf00      	nop
 8006c56:	e002      	b.n	8006c5e <HAL_UART_IRQHandler+0x59e>
      return;
 8006c58:	bf00      	nop
 8006c5a:	e000      	b.n	8006c5e <HAL_UART_IRQHandler+0x59e>
    return;
 8006c5c:	bf00      	nop
  }

}
 8006c5e:	37e8      	adds	r7, #232	; 0xe8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4ba6      	ldr	r3, [pc, #664]	; (8006f68 <UART_SetConfig+0x2c4>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6812      	ldr	r2, [r2, #0]
 8006cd6:	6979      	ldr	r1, [r7, #20]
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a94      	ldr	r2, [pc, #592]	; (8006f6c <UART_SetConfig+0x2c8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d120      	bne.n	8006d62 <UART_SetConfig+0xbe>
 8006d20:	4b93      	ldr	r3, [pc, #588]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d816      	bhi.n	8006d5c <UART_SetConfig+0xb8>
 8006d2e:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <UART_SetConfig+0x90>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d45 	.word	0x08006d45
 8006d38:	08006d51 	.word	0x08006d51
 8006d3c:	08006d4b 	.word	0x08006d4b
 8006d40:	08006d57 	.word	0x08006d57
 8006d44:	2301      	movs	r3, #1
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e150      	b.n	8006fec <UART_SetConfig+0x348>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	77fb      	strb	r3, [r7, #31]
 8006d4e:	e14d      	b.n	8006fec <UART_SetConfig+0x348>
 8006d50:	2304      	movs	r3, #4
 8006d52:	77fb      	strb	r3, [r7, #31]
 8006d54:	e14a      	b.n	8006fec <UART_SetConfig+0x348>
 8006d56:	2308      	movs	r3, #8
 8006d58:	77fb      	strb	r3, [r7, #31]
 8006d5a:	e147      	b.n	8006fec <UART_SetConfig+0x348>
 8006d5c:	2310      	movs	r3, #16
 8006d5e:	77fb      	strb	r3, [r7, #31]
 8006d60:	e144      	b.n	8006fec <UART_SetConfig+0x348>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a83      	ldr	r2, [pc, #524]	; (8006f74 <UART_SetConfig+0x2d0>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d132      	bne.n	8006dd2 <UART_SetConfig+0x12e>
 8006d6c:	4b80      	ldr	r3, [pc, #512]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d72:	f003 030c 	and.w	r3, r3, #12
 8006d76:	2b0c      	cmp	r3, #12
 8006d78:	d828      	bhi.n	8006dcc <UART_SetConfig+0x128>
 8006d7a:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <UART_SetConfig+0xdc>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006db5 	.word	0x08006db5
 8006d84:	08006dcd 	.word	0x08006dcd
 8006d88:	08006dcd 	.word	0x08006dcd
 8006d8c:	08006dcd 	.word	0x08006dcd
 8006d90:	08006dc1 	.word	0x08006dc1
 8006d94:	08006dcd 	.word	0x08006dcd
 8006d98:	08006dcd 	.word	0x08006dcd
 8006d9c:	08006dcd 	.word	0x08006dcd
 8006da0:	08006dbb 	.word	0x08006dbb
 8006da4:	08006dcd 	.word	0x08006dcd
 8006da8:	08006dcd 	.word	0x08006dcd
 8006dac:	08006dcd 	.word	0x08006dcd
 8006db0:	08006dc7 	.word	0x08006dc7
 8006db4:	2300      	movs	r3, #0
 8006db6:	77fb      	strb	r3, [r7, #31]
 8006db8:	e118      	b.n	8006fec <UART_SetConfig+0x348>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	77fb      	strb	r3, [r7, #31]
 8006dbe:	e115      	b.n	8006fec <UART_SetConfig+0x348>
 8006dc0:	2304      	movs	r3, #4
 8006dc2:	77fb      	strb	r3, [r7, #31]
 8006dc4:	e112      	b.n	8006fec <UART_SetConfig+0x348>
 8006dc6:	2308      	movs	r3, #8
 8006dc8:	77fb      	strb	r3, [r7, #31]
 8006dca:	e10f      	b.n	8006fec <UART_SetConfig+0x348>
 8006dcc:	2310      	movs	r3, #16
 8006dce:	77fb      	strb	r3, [r7, #31]
 8006dd0:	e10c      	b.n	8006fec <UART_SetConfig+0x348>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a68      	ldr	r2, [pc, #416]	; (8006f78 <UART_SetConfig+0x2d4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d120      	bne.n	8006e1e <UART_SetConfig+0x17a>
 8006ddc:	4b64      	ldr	r3, [pc, #400]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006de6:	2b30      	cmp	r3, #48	; 0x30
 8006de8:	d013      	beq.n	8006e12 <UART_SetConfig+0x16e>
 8006dea:	2b30      	cmp	r3, #48	; 0x30
 8006dec:	d814      	bhi.n	8006e18 <UART_SetConfig+0x174>
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	d009      	beq.n	8006e06 <UART_SetConfig+0x162>
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d810      	bhi.n	8006e18 <UART_SetConfig+0x174>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <UART_SetConfig+0x15c>
 8006dfa:	2b10      	cmp	r3, #16
 8006dfc:	d006      	beq.n	8006e0c <UART_SetConfig+0x168>
 8006dfe:	e00b      	b.n	8006e18 <UART_SetConfig+0x174>
 8006e00:	2300      	movs	r3, #0
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	e0f2      	b.n	8006fec <UART_SetConfig+0x348>
 8006e06:	2302      	movs	r3, #2
 8006e08:	77fb      	strb	r3, [r7, #31]
 8006e0a:	e0ef      	b.n	8006fec <UART_SetConfig+0x348>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	77fb      	strb	r3, [r7, #31]
 8006e10:	e0ec      	b.n	8006fec <UART_SetConfig+0x348>
 8006e12:	2308      	movs	r3, #8
 8006e14:	77fb      	strb	r3, [r7, #31]
 8006e16:	e0e9      	b.n	8006fec <UART_SetConfig+0x348>
 8006e18:	2310      	movs	r3, #16
 8006e1a:	77fb      	strb	r3, [r7, #31]
 8006e1c:	e0e6      	b.n	8006fec <UART_SetConfig+0x348>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a56      	ldr	r2, [pc, #344]	; (8006f7c <UART_SetConfig+0x2d8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d120      	bne.n	8006e6a <UART_SetConfig+0x1c6>
 8006e28:	4b51      	ldr	r3, [pc, #324]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e32:	2bc0      	cmp	r3, #192	; 0xc0
 8006e34:	d013      	beq.n	8006e5e <UART_SetConfig+0x1ba>
 8006e36:	2bc0      	cmp	r3, #192	; 0xc0
 8006e38:	d814      	bhi.n	8006e64 <UART_SetConfig+0x1c0>
 8006e3a:	2b80      	cmp	r3, #128	; 0x80
 8006e3c:	d009      	beq.n	8006e52 <UART_SetConfig+0x1ae>
 8006e3e:	2b80      	cmp	r3, #128	; 0x80
 8006e40:	d810      	bhi.n	8006e64 <UART_SetConfig+0x1c0>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <UART_SetConfig+0x1a8>
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d006      	beq.n	8006e58 <UART_SetConfig+0x1b4>
 8006e4a:	e00b      	b.n	8006e64 <UART_SetConfig+0x1c0>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	e0cc      	b.n	8006fec <UART_SetConfig+0x348>
 8006e52:	2302      	movs	r3, #2
 8006e54:	77fb      	strb	r3, [r7, #31]
 8006e56:	e0c9      	b.n	8006fec <UART_SetConfig+0x348>
 8006e58:	2304      	movs	r3, #4
 8006e5a:	77fb      	strb	r3, [r7, #31]
 8006e5c:	e0c6      	b.n	8006fec <UART_SetConfig+0x348>
 8006e5e:	2308      	movs	r3, #8
 8006e60:	77fb      	strb	r3, [r7, #31]
 8006e62:	e0c3      	b.n	8006fec <UART_SetConfig+0x348>
 8006e64:	2310      	movs	r3, #16
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	e0c0      	b.n	8006fec <UART_SetConfig+0x348>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a44      	ldr	r2, [pc, #272]	; (8006f80 <UART_SetConfig+0x2dc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d125      	bne.n	8006ec0 <UART_SetConfig+0x21c>
 8006e74:	4b3e      	ldr	r3, [pc, #248]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e82:	d017      	beq.n	8006eb4 <UART_SetConfig+0x210>
 8006e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e88:	d817      	bhi.n	8006eba <UART_SetConfig+0x216>
 8006e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e8e:	d00b      	beq.n	8006ea8 <UART_SetConfig+0x204>
 8006e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e94:	d811      	bhi.n	8006eba <UART_SetConfig+0x216>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <UART_SetConfig+0x1fe>
 8006e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e9e:	d006      	beq.n	8006eae <UART_SetConfig+0x20a>
 8006ea0:	e00b      	b.n	8006eba <UART_SetConfig+0x216>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	77fb      	strb	r3, [r7, #31]
 8006ea6:	e0a1      	b.n	8006fec <UART_SetConfig+0x348>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	e09e      	b.n	8006fec <UART_SetConfig+0x348>
 8006eae:	2304      	movs	r3, #4
 8006eb0:	77fb      	strb	r3, [r7, #31]
 8006eb2:	e09b      	b.n	8006fec <UART_SetConfig+0x348>
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e098      	b.n	8006fec <UART_SetConfig+0x348>
 8006eba:	2310      	movs	r3, #16
 8006ebc:	77fb      	strb	r3, [r7, #31]
 8006ebe:	e095      	b.n	8006fec <UART_SetConfig+0x348>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a2f      	ldr	r2, [pc, #188]	; (8006f84 <UART_SetConfig+0x2e0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d125      	bne.n	8006f16 <UART_SetConfig+0x272>
 8006eca:	4b29      	ldr	r3, [pc, #164]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ed8:	d017      	beq.n	8006f0a <UART_SetConfig+0x266>
 8006eda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ede:	d817      	bhi.n	8006f10 <UART_SetConfig+0x26c>
 8006ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee4:	d00b      	beq.n	8006efe <UART_SetConfig+0x25a>
 8006ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eea:	d811      	bhi.n	8006f10 <UART_SetConfig+0x26c>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <UART_SetConfig+0x254>
 8006ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef4:	d006      	beq.n	8006f04 <UART_SetConfig+0x260>
 8006ef6:	e00b      	b.n	8006f10 <UART_SetConfig+0x26c>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e076      	b.n	8006fec <UART_SetConfig+0x348>
 8006efe:	2302      	movs	r3, #2
 8006f00:	77fb      	strb	r3, [r7, #31]
 8006f02:	e073      	b.n	8006fec <UART_SetConfig+0x348>
 8006f04:	2304      	movs	r3, #4
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e070      	b.n	8006fec <UART_SetConfig+0x348>
 8006f0a:	2308      	movs	r3, #8
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e06d      	b.n	8006fec <UART_SetConfig+0x348>
 8006f10:	2310      	movs	r3, #16
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e06a      	b.n	8006fec <UART_SetConfig+0x348>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1b      	ldr	r2, [pc, #108]	; (8006f88 <UART_SetConfig+0x2e4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d138      	bne.n	8006f92 <UART_SetConfig+0x2ee>
 8006f20:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f2e:	d017      	beq.n	8006f60 <UART_SetConfig+0x2bc>
 8006f30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f34:	d82a      	bhi.n	8006f8c <UART_SetConfig+0x2e8>
 8006f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f3a:	d00b      	beq.n	8006f54 <UART_SetConfig+0x2b0>
 8006f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f40:	d824      	bhi.n	8006f8c <UART_SetConfig+0x2e8>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <UART_SetConfig+0x2aa>
 8006f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4a:	d006      	beq.n	8006f5a <UART_SetConfig+0x2b6>
 8006f4c:	e01e      	b.n	8006f8c <UART_SetConfig+0x2e8>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	77fb      	strb	r3, [r7, #31]
 8006f52:	e04b      	b.n	8006fec <UART_SetConfig+0x348>
 8006f54:	2302      	movs	r3, #2
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e048      	b.n	8006fec <UART_SetConfig+0x348>
 8006f5a:	2304      	movs	r3, #4
 8006f5c:	77fb      	strb	r3, [r7, #31]
 8006f5e:	e045      	b.n	8006fec <UART_SetConfig+0x348>
 8006f60:	2308      	movs	r3, #8
 8006f62:	77fb      	strb	r3, [r7, #31]
 8006f64:	e042      	b.n	8006fec <UART_SetConfig+0x348>
 8006f66:	bf00      	nop
 8006f68:	efff69f3 	.word	0xefff69f3
 8006f6c:	40011000 	.word	0x40011000
 8006f70:	40023800 	.word	0x40023800
 8006f74:	40004400 	.word	0x40004400
 8006f78:	40004800 	.word	0x40004800
 8006f7c:	40004c00 	.word	0x40004c00
 8006f80:	40005000 	.word	0x40005000
 8006f84:	40011400 	.word	0x40011400
 8006f88:	40007800 	.word	0x40007800
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e02c      	b.n	8006fec <UART_SetConfig+0x348>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a72      	ldr	r2, [pc, #456]	; (8007160 <UART_SetConfig+0x4bc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d125      	bne.n	8006fe8 <UART_SetConfig+0x344>
 8006f9c:	4b71      	ldr	r3, [pc, #452]	; (8007164 <UART_SetConfig+0x4c0>)
 8006f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fa6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006faa:	d017      	beq.n	8006fdc <UART_SetConfig+0x338>
 8006fac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006fb0:	d817      	bhi.n	8006fe2 <UART_SetConfig+0x33e>
 8006fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb6:	d00b      	beq.n	8006fd0 <UART_SetConfig+0x32c>
 8006fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fbc:	d811      	bhi.n	8006fe2 <UART_SetConfig+0x33e>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <UART_SetConfig+0x326>
 8006fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fc6:	d006      	beq.n	8006fd6 <UART_SetConfig+0x332>
 8006fc8:	e00b      	b.n	8006fe2 <UART_SetConfig+0x33e>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	77fb      	strb	r3, [r7, #31]
 8006fce:	e00d      	b.n	8006fec <UART_SetConfig+0x348>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	77fb      	strb	r3, [r7, #31]
 8006fd4:	e00a      	b.n	8006fec <UART_SetConfig+0x348>
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	77fb      	strb	r3, [r7, #31]
 8006fda:	e007      	b.n	8006fec <UART_SetConfig+0x348>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	77fb      	strb	r3, [r7, #31]
 8006fe0:	e004      	b.n	8006fec <UART_SetConfig+0x348>
 8006fe2:	2310      	movs	r3, #16
 8006fe4:	77fb      	strb	r3, [r7, #31]
 8006fe6:	e001      	b.n	8006fec <UART_SetConfig+0x348>
 8006fe8:	2310      	movs	r3, #16
 8006fea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff4:	d15b      	bne.n	80070ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006ff6:	7ffb      	ldrb	r3, [r7, #31]
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d828      	bhi.n	800704e <UART_SetConfig+0x3aa>
 8006ffc:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <UART_SetConfig+0x360>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	08007029 	.word	0x08007029
 8007008:	08007031 	.word	0x08007031
 800700c:	08007039 	.word	0x08007039
 8007010:	0800704f 	.word	0x0800704f
 8007014:	0800703f 	.word	0x0800703f
 8007018:	0800704f 	.word	0x0800704f
 800701c:	0800704f 	.word	0x0800704f
 8007020:	0800704f 	.word	0x0800704f
 8007024:	08007047 	.word	0x08007047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007028:	f7fd fc60 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 800702c:	61b8      	str	r0, [r7, #24]
        break;
 800702e:	e013      	b.n	8007058 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007030:	f7fd fc70 	bl	8004914 <HAL_RCC_GetPCLK2Freq>
 8007034:	61b8      	str	r0, [r7, #24]
        break;
 8007036:	e00f      	b.n	8007058 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007038:	4b4b      	ldr	r3, [pc, #300]	; (8007168 <UART_SetConfig+0x4c4>)
 800703a:	61bb      	str	r3, [r7, #24]
        break;
 800703c:	e00c      	b.n	8007058 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703e:	f7fd fb43 	bl	80046c8 <HAL_RCC_GetSysClockFreq>
 8007042:	61b8      	str	r0, [r7, #24]
        break;
 8007044:	e008      	b.n	8007058 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704a:	61bb      	str	r3, [r7, #24]
        break;
 800704c:	e004      	b.n	8007058 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	77bb      	strb	r3, [r7, #30]
        break;
 8007056:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d074      	beq.n	8007148 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	005a      	lsls	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	441a      	add	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	2b0f      	cmp	r3, #15
 8007078:	d916      	bls.n	80070a8 <UART_SetConfig+0x404>
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007080:	d212      	bcs.n	80070a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	b29b      	uxth	r3, r3
 8007086:	f023 030f 	bic.w	r3, r3, #15
 800708a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	085b      	lsrs	r3, r3, #1
 8007090:	b29b      	uxth	r3, r3
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	b29a      	uxth	r2, r3
 8007098:	89fb      	ldrh	r3, [r7, #14]
 800709a:	4313      	orrs	r3, r2
 800709c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	89fa      	ldrh	r2, [r7, #14]
 80070a4:	60da      	str	r2, [r3, #12]
 80070a6:	e04f      	b.n	8007148 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	77bb      	strb	r3, [r7, #30]
 80070ac:	e04c      	b.n	8007148 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070ae:	7ffb      	ldrb	r3, [r7, #31]
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d828      	bhi.n	8007106 <UART_SetConfig+0x462>
 80070b4:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <UART_SetConfig+0x418>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	08007107 	.word	0x08007107
 80070cc:	080070f7 	.word	0x080070f7
 80070d0:	08007107 	.word	0x08007107
 80070d4:	08007107 	.word	0x08007107
 80070d8:	08007107 	.word	0x08007107
 80070dc:	080070ff 	.word	0x080070ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e0:	f7fd fc04 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 80070e4:	61b8      	str	r0, [r7, #24]
        break;
 80070e6:	e013      	b.n	8007110 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070e8:	f7fd fc14 	bl	8004914 <HAL_RCC_GetPCLK2Freq>
 80070ec:	61b8      	str	r0, [r7, #24]
        break;
 80070ee:	e00f      	b.n	8007110 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f0:	4b1d      	ldr	r3, [pc, #116]	; (8007168 <UART_SetConfig+0x4c4>)
 80070f2:	61bb      	str	r3, [r7, #24]
        break;
 80070f4:	e00c      	b.n	8007110 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070f6:	f7fd fae7 	bl	80046c8 <HAL_RCC_GetSysClockFreq>
 80070fa:	61b8      	str	r0, [r7, #24]
        break;
 80070fc:	e008      	b.n	8007110 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007102:	61bb      	str	r3, [r7, #24]
        break;
 8007104:	e004      	b.n	8007110 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	77bb      	strb	r3, [r7, #30]
        break;
 800710e:	bf00      	nop
    }

    if (pclk != 0U)
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d018      	beq.n	8007148 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	085a      	lsrs	r2, r3, #1
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	441a      	add	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	fbb2 f3f3 	udiv	r3, r2, r3
 8007128:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b0f      	cmp	r3, #15
 800712e:	d909      	bls.n	8007144 <UART_SetConfig+0x4a0>
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007136:	d205      	bcs.n	8007144 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	b29a      	uxth	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60da      	str	r2, [r3, #12]
 8007142:	e001      	b.n	8007148 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007154:	7fbb      	ldrb	r3, [r7, #30]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3720      	adds	r7, #32
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40007c00 	.word	0x40007c00
 8007164:	40023800 	.word	0x40023800
 8007168:	00f42400 	.word	0x00f42400

0800716c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00a      	beq.n	800721e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01a      	beq.n	8007282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800726a:	d10a      	bne.n	8007282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	605a      	str	r2, [r3, #4]
  }
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072c0:	f7fb fa6a 	bl	8002798 <HAL_GetTick>
 80072c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d10e      	bne.n	80072f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f81b 	bl	800731e <UART_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e011      	b.n	8007316 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2220      	movs	r2, #32
 80072f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b09c      	sub	sp, #112	; 0x70
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	603b      	str	r3, [r7, #0]
 800732a:	4613      	mov	r3, r2
 800732c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800732e:	e0a7      	b.n	8007480 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	f000 80a3 	beq.w	8007480 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733a:	f7fb fa2d 	bl	8002798 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007346:	429a      	cmp	r2, r3
 8007348:	d302      	bcc.n	8007350 <UART_WaitOnFlagUntilTimeout+0x32>
 800734a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800734c:	2b00      	cmp	r3, #0
 800734e:	d13f      	bne.n	80073d0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800735e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007360:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007364:	667b      	str	r3, [r7, #100]	; 0x64
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800736e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007370:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800737c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e6      	bne.n	8007350 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3308      	adds	r3, #8
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	f023 0301 	bic.w	r3, r3, #1
 8007398:	663b      	str	r3, [r7, #96]	; 0x60
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3308      	adds	r3, #8
 80073a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80073a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e5      	bne.n	8007382 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2220      	movs	r2, #32
 80073ba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2220      	movs	r2, #32
 80073c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e068      	b.n	80074a2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d050      	beq.n	8007480 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ec:	d148      	bne.n	8007480 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073f6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800740c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007416:	637b      	str	r3, [r7, #52]	; 0x34
 8007418:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800741c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e6      	bne.n	80073f8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3308      	adds	r3, #8
 8007430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	613b      	str	r3, [r7, #16]
   return(result);
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	66bb      	str	r3, [r7, #104]	; 0x68
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3308      	adds	r3, #8
 8007448:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800744a:	623a      	str	r2, [r7, #32]
 800744c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	69f9      	ldr	r1, [r7, #28]
 8007450:	6a3a      	ldr	r2, [r7, #32]
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	61bb      	str	r3, [r7, #24]
   return(result);
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e5      	bne.n	800742a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2220      	movs	r2, #32
 8007462:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2220      	movs	r2, #32
 8007468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2220      	movs	r2, #32
 8007470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e010      	b.n	80074a2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69da      	ldr	r2, [r3, #28]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	4013      	ands	r3, r2
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	429a      	cmp	r2, r3
 800748e:	bf0c      	ite	eq
 8007490:	2301      	moveq	r3, #1
 8007492:	2300      	movne	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	461a      	mov	r2, r3
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	429a      	cmp	r2, r3
 800749c:	f43f af48 	beq.w	8007330 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3770      	adds	r7, #112	; 0x70
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b097      	sub	sp, #92	; 0x5c
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	4613      	mov	r3, r2
 80074b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	88fa      	ldrh	r2, [r7, #6]
 80074c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074de:	d10e      	bne.n	80074fe <UART_Start_Receive_IT+0x52>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d105      	bne.n	80074f4 <UART_Start_Receive_IT+0x48>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80074ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074f2:	e02d      	b.n	8007550 <UART_Start_Receive_IT+0xa4>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	22ff      	movs	r2, #255	; 0xff
 80074f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074fc:	e028      	b.n	8007550 <UART_Start_Receive_IT+0xa4>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10d      	bne.n	8007522 <UART_Start_Receive_IT+0x76>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d104      	bne.n	8007518 <UART_Start_Receive_IT+0x6c>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	22ff      	movs	r2, #255	; 0xff
 8007512:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007516:	e01b      	b.n	8007550 <UART_Start_Receive_IT+0xa4>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	227f      	movs	r2, #127	; 0x7f
 800751c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007520:	e016      	b.n	8007550 <UART_Start_Receive_IT+0xa4>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800752a:	d10d      	bne.n	8007548 <UART_Start_Receive_IT+0x9c>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <UART_Start_Receive_IT+0x92>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	227f      	movs	r2, #127	; 0x7f
 8007538:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800753c:	e008      	b.n	8007550 <UART_Start_Receive_IT+0xa4>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	223f      	movs	r2, #63	; 0x3f
 8007542:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007546:	e003      	b.n	8007550 <UART_Start_Receive_IT+0xa4>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2222      	movs	r2, #34	; 0x22
 800755c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3308      	adds	r3, #8
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	f043 0301 	orr.w	r3, r3, #1
 8007576:	657b      	str	r3, [r7, #84]	; 0x54
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3308      	adds	r3, #8
 800757e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007580:	64ba      	str	r2, [r7, #72]	; 0x48
 8007582:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800758e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e5      	bne.n	8007560 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759c:	d107      	bne.n	80075ae <UART_Start_Receive_IT+0x102>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d103      	bne.n	80075ae <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4a21      	ldr	r2, [pc, #132]	; (8007630 <UART_Start_Receive_IT+0x184>)
 80075aa:	669a      	str	r2, [r3, #104]	; 0x68
 80075ac:	e002      	b.n	80075b4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4a20      	ldr	r2, [pc, #128]	; (8007634 <UART_Start_Receive_IT+0x188>)
 80075b2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d019      	beq.n	80075f0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80075d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075da:	637b      	str	r3, [r7, #52]	; 0x34
 80075dc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e6      	bne.n	80075bc <UART_Start_Receive_IT+0x110>
 80075ee:	e018      	b.n	8007622 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	613b      	str	r3, [r7, #16]
   return(result);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f043 0320 	orr.w	r3, r3, #32
 8007604:	653b      	str	r3, [r7, #80]	; 0x50
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800760e:	623b      	str	r3, [r7, #32]
 8007610:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	69f9      	ldr	r1, [r7, #28]
 8007614:	6a3a      	ldr	r2, [r7, #32]
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	61bb      	str	r3, [r7, #24]
   return(result);
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e6      	bne.n	80075f0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	375c      	adds	r7, #92	; 0x5c
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	080078e7 	.word	0x080078e7
 8007634:	08007781 	.word	0x08007781

08007638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007638:	b480      	push	{r7}
 800763a:	b095      	sub	sp, #84	; 0x54
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007654:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765e:	643b      	str	r3, [r7, #64]	; 0x40
 8007660:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e6      	bne.n	8007640 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3308      	adds	r3, #8
 8007678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	61fb      	str	r3, [r7, #28]
   return(result);
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	f023 0301 	bic.w	r3, r3, #1
 8007688:	64bb      	str	r3, [r7, #72]	; 0x48
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007692:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007694:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e5      	bne.n	8007672 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d118      	bne.n	80076e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f023 0310 	bic.w	r3, r3, #16
 80076c2:	647b      	str	r3, [r7, #68]	; 0x44
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076cc:	61bb      	str	r3, [r7, #24]
 80076ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	6979      	ldr	r1, [r7, #20]
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	613b      	str	r3, [r7, #16]
   return(result);
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e6      	bne.n	80076ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80076f4:	bf00      	nop
 80076f6:	3754      	adds	r7, #84	; 0x54
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f7ff faaa 	bl	8006c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007724:	bf00      	nop
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	60bb      	str	r3, [r7, #8]
   return(result);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007748:	61fb      	str	r3, [r7, #28]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	61bb      	str	r3, [r7, #24]
 8007754:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6979      	ldr	r1, [r7, #20]
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	613b      	str	r3, [r7, #16]
   return(result);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e6      	bne.n	8007734 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff fa76 	bl	8006c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007778:	bf00      	nop
 800777a:	3720      	adds	r7, #32
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b096      	sub	sp, #88	; 0x58
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800778e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007798:	2b22      	cmp	r3, #34	; 0x22
 800779a:	f040 8098 	bne.w	80078ce <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077a8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80077ac:	b2d9      	uxtb	r1, r3
 80077ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b8:	400a      	ands	r2, r1
 80077ba:	b2d2      	uxtb	r2, r2
 80077bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d17b      	bne.n	80078de <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ee:	e853 3f00 	ldrex	r3, [r3]
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077fa:	653b      	str	r3, [r7, #80]	; 0x50
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	461a      	mov	r2, r3
 8007802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007804:	647b      	str	r3, [r7, #68]	; 0x44
 8007806:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800780a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800780c:	e841 2300 	strex	r3, r2, [r1]
 8007810:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e6      	bne.n	80077e6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3308      	adds	r3, #8
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	623b      	str	r3, [r7, #32]
   return(result);
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	f023 0301 	bic.w	r3, r3, #1
 800782e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3308      	adds	r3, #8
 8007836:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007838:	633a      	str	r2, [r7, #48]	; 0x30
 800783a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800783e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e5      	bne.n	8007818 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007864:	2b01      	cmp	r3, #1
 8007866:	d12e      	bne.n	80078c6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	60fb      	str	r3, [r7, #12]
   return(result);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0310 	bic.w	r3, r3, #16
 8007882:	64bb      	str	r3, [r7, #72]	; 0x48
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	461a      	mov	r2, r3
 800788a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800788c:	61fb      	str	r3, [r7, #28]
 800788e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	69b9      	ldr	r1, [r7, #24]
 8007892:	69fa      	ldr	r2, [r7, #28]
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	617b      	str	r3, [r7, #20]
   return(result);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e6      	bne.n	800786e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 0310 	and.w	r3, r3, #16
 80078aa:	2b10      	cmp	r3, #16
 80078ac:	d103      	bne.n	80078b6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2210      	movs	r2, #16
 80078b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff f9e4 	bl	8006c8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078c4:	e00b      	b.n	80078de <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fa faf2 	bl	8001eb0 <HAL_UART_RxCpltCallback>
}
 80078cc:	e007      	b.n	80078de <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	699a      	ldr	r2, [r3, #24]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0208 	orr.w	r2, r2, #8
 80078dc:	619a      	str	r2, [r3, #24]
}
 80078de:	bf00      	nop
 80078e0:	3758      	adds	r7, #88	; 0x58
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b096      	sub	sp, #88	; 0x58
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078fe:	2b22      	cmp	r3, #34	; 0x22
 8007900:	f040 8098 	bne.w	8007a34 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007912:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007914:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007918:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800791c:	4013      	ands	r3, r2
 800791e:	b29a      	uxth	r2, r3
 8007920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007922:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007928:	1c9a      	adds	r2, r3, #2
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007946:	b29b      	uxth	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d17b      	bne.n	8007a44 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796a:	643b      	str	r3, [r7, #64]	; 0x40
 800796c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007970:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e6      	bne.n	800794c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3308      	adds	r3, #8
 8007984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	61fb      	str	r3, [r7, #28]
   return(result);
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	f023 0301 	bic.w	r3, r3, #1
 8007994:	64bb      	str	r3, [r7, #72]	; 0x48
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800799e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e5      	bne.n	800797e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d12e      	bne.n	8007a2c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f023 0310 	bic.w	r3, r3, #16
 80079e8:	647b      	str	r3, [r7, #68]	; 0x44
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f2:	61bb      	str	r3, [r7, #24]
 80079f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	6979      	ldr	r1, [r7, #20]
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	e841 2300 	strex	r3, r2, [r1]
 80079fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1e6      	bne.n	80079d4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	f003 0310 	and.w	r3, r3, #16
 8007a10:	2b10      	cmp	r3, #16
 8007a12:	d103      	bne.n	8007a1c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2210      	movs	r2, #16
 8007a1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff f931 	bl	8006c8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a2a:	e00b      	b.n	8007a44 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7fa fa3f 	bl	8001eb0 <HAL_UART_RxCpltCallback>
}
 8007a32:	e007      	b.n	8007a44 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699a      	ldr	r2, [r3, #24]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0208 	orr.w	r2, r2, #8
 8007a42:	619a      	str	r2, [r3, #24]
}
 8007a44:	bf00      	nop
 8007a46:	3758      	adds	r7, #88	; 0x58
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	f107 001c 	add.w	r0, r7, #28
 8007a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d120      	bne.n	8007aa6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	4b20      	ldr	r3, [pc, #128]	; (8007af8 <USB_CoreInit+0xac>)
 8007a76:	4013      	ands	r3, r2
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d105      	bne.n	8007a9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa96 	bl	8007fcc <USB_CoreReset>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
 8007aa4:	e010      	b.n	8007ac8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa8a 	bl	8007fcc <USB_CoreReset>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d10b      	bne.n	8007ae6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f043 0206 	orr.w	r2, r3, #6
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f043 0220 	orr.w	r2, r3, #32
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007af2:	b004      	add	sp, #16
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	ffbdffbf 	.word	0xffbdffbf

08007afc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f023 0201 	bic.w	r2, r3, #1
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	460b      	mov	r3, r1
 8007b28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d115      	bne.n	8007b6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b4c:	2001      	movs	r0, #1
 8007b4e:	f7fa fe2f 	bl	80027b0 <HAL_Delay>
      ms++;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3301      	adds	r3, #1
 8007b56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fa29 	bl	8007fb0 <USB_GetMode>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d01e      	beq.n	8007ba2 <USB_SetCurrentMode+0x84>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b31      	cmp	r3, #49	; 0x31
 8007b68:	d9f0      	bls.n	8007b4c <USB_SetCurrentMode+0x2e>
 8007b6a:	e01a      	b.n	8007ba2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d115      	bne.n	8007b9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b7e:	2001      	movs	r0, #1
 8007b80:	f7fa fe16 	bl	80027b0 <HAL_Delay>
      ms++;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	3301      	adds	r3, #1
 8007b88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fa10 	bl	8007fb0 <USB_GetMode>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d005      	beq.n	8007ba2 <USB_SetCurrentMode+0x84>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2b31      	cmp	r3, #49	; 0x31
 8007b9a:	d9f0      	bls.n	8007b7e <USB_SetCurrentMode+0x60>
 8007b9c:	e001      	b.n	8007ba2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e005      	b.n	8007bae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b32      	cmp	r3, #50	; 0x32
 8007ba6:	d101      	bne.n	8007bac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e000      	b.n	8007bae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bb8:	b084      	sub	sp, #16
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b086      	sub	sp, #24
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	613b      	str	r3, [r7, #16]
 8007bd6:	e009      	b.n	8007bec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	3340      	adds	r3, #64	; 0x40
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	2200      	movs	r2, #0
 8007be4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	3301      	adds	r3, #1
 8007bea:	613b      	str	r3, [r7, #16]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	2b0e      	cmp	r3, #14
 8007bf0:	d9f2      	bls.n	8007bd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d11c      	bne.n	8007c32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c06:	f043 0302 	orr.w	r3, r3, #2
 8007c0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e005      	b.n	8007c3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c44:	461a      	mov	r2, r3
 8007c46:	2300      	movs	r3, #0
 8007c48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c50:	4619      	mov	r1, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c58:	461a      	mov	r2, r3
 8007c5a:	680b      	ldr	r3, [r1, #0]
 8007c5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d10c      	bne.n	8007c7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d104      	bne.n	8007c74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f965 	bl	8007f3c <USB_SetDevSpeed>
 8007c72:	e008      	b.n	8007c86 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c74:	2101      	movs	r1, #1
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f960 	bl	8007f3c <USB_SetDevSpeed>
 8007c7c:	e003      	b.n	8007c86 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c7e:	2103      	movs	r1, #3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f95b 	bl	8007f3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c86:	2110      	movs	r1, #16
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f8f3 	bl	8007e74 <USB_FlushTxFifo>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f91f 	bl	8007edc <USB_FlushRxFifo>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cae:	461a      	mov	r2, r3
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cba:	461a      	mov	r2, r3
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	613b      	str	r3, [r7, #16]
 8007cd0:	e043      	b.n	8007d5a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ce8:	d118      	bne.n	8007d1c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10a      	bne.n	8007d06 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	e013      	b.n	8007d2e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d12:	461a      	mov	r2, r3
 8007d14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	e008      	b.n	8007d2e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	015a      	lsls	r2, r3, #5
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4413      	add	r3, r2
 8007d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d28:	461a      	mov	r2, r3
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	3301      	adds	r3, #1
 8007d58:	613b      	str	r3, [r7, #16]
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d3b7      	bcc.n	8007cd2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d62:	2300      	movs	r3, #0
 8007d64:	613b      	str	r3, [r7, #16]
 8007d66:	e043      	b.n	8007df0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d7e:	d118      	bne.n	8007db2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d92:	461a      	mov	r2, r3
 8007d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	e013      	b.n	8007dc4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da8:	461a      	mov	r2, r3
 8007daa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007dae:	6013      	str	r3, [r2, #0]
 8007db0:	e008      	b.n	8007dc4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de2:	461a      	mov	r2, r3
 8007de4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007de8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	3301      	adds	r3, #1
 8007dee:	613b      	str	r3, [r7, #16]
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d3b7      	bcc.n	8007d68 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d105      	bne.n	8007e2c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	f043 0210 	orr.w	r2, r3, #16
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699a      	ldr	r2, [r3, #24]
 8007e30:	4b0e      	ldr	r3, [pc, #56]	; (8007e6c <USB_DevInit+0x2b4>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d005      	beq.n	8007e4a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	f043 0208 	orr.w	r2, r3, #8
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d105      	bne.n	8007e5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	699a      	ldr	r2, [r3, #24]
 8007e54:	4b06      	ldr	r3, [pc, #24]	; (8007e70 <USB_DevInit+0x2b8>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e68:	b004      	add	sp, #16
 8007e6a:	4770      	bx	lr
 8007e6c:	803c3800 	.word	0x803c3800
 8007e70:	40000004 	.word	0x40000004

08007e74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3301      	adds	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4a13      	ldr	r2, [pc, #76]	; (8007ed8 <USB_FlushTxFifo+0x64>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d901      	bls.n	8007e94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e01b      	b.n	8007ecc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	daf2      	bge.n	8007e82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	019b      	lsls	r3, r3, #6
 8007ea4:	f043 0220 	orr.w	r2, r3, #32
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4a08      	ldr	r2, [pc, #32]	; (8007ed8 <USB_FlushTxFifo+0x64>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d901      	bls.n	8007ebe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e006      	b.n	8007ecc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0320 	and.w	r3, r3, #32
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	d0f0      	beq.n	8007eac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	00030d40 	.word	0x00030d40

08007edc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4a11      	ldr	r2, [pc, #68]	; (8007f38 <USB_FlushRxFifo+0x5c>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d901      	bls.n	8007efa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e018      	b.n	8007f2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	daf2      	bge.n	8007ee8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2210      	movs	r2, #16
 8007f0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4a08      	ldr	r2, [pc, #32]	; (8007f38 <USB_FlushRxFifo+0x5c>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d901      	bls.n	8007f1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e006      	b.n	8007f2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f003 0310 	and.w	r3, r3, #16
 8007f26:	2b10      	cmp	r3, #16
 8007f28:	d0f0      	beq.n	8007f0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	00030d40 	.word	0x00030d40

08007f3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	68f9      	ldr	r1, [r7, #12]
 8007f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b085      	sub	sp, #20
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f88:	f023 0303 	bic.w	r3, r3, #3
 8007f8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f9c:	f043 0302 	orr.w	r3, r3, #2
 8007fa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4a13      	ldr	r2, [pc, #76]	; (8008030 <USB_CoreReset+0x64>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d901      	bls.n	8007fea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e01b      	b.n	8008022 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	daf2      	bge.n	8007fd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f043 0201 	orr.w	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3301      	adds	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4a09      	ldr	r2, [pc, #36]	; (8008030 <USB_CoreReset+0x64>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d901      	bls.n	8008014 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e006      	b.n	8008022 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b01      	cmp	r3, #1
 800801e:	d0f0      	beq.n	8008002 <USB_CoreReset+0x36>

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	00030d40 	.word	0x00030d40

08008034 <atoi>:
 8008034:	220a      	movs	r2, #10
 8008036:	2100      	movs	r1, #0
 8008038:	f000 b882 	b.w	8008140 <strtol>

0800803c <_strtol_l.constprop.0>:
 800803c:	2b01      	cmp	r3, #1
 800803e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008042:	d001      	beq.n	8008048 <_strtol_l.constprop.0+0xc>
 8008044:	2b24      	cmp	r3, #36	; 0x24
 8008046:	d906      	bls.n	8008056 <_strtol_l.constprop.0+0x1a>
 8008048:	f000 fe62 	bl	8008d10 <__errno>
 800804c:	2316      	movs	r3, #22
 800804e:	6003      	str	r3, [r0, #0]
 8008050:	2000      	movs	r0, #0
 8008052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008056:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800813c <_strtol_l.constprop.0+0x100>
 800805a:	460d      	mov	r5, r1
 800805c:	462e      	mov	r6, r5
 800805e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008062:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008066:	f017 0708 	ands.w	r7, r7, #8
 800806a:	d1f7      	bne.n	800805c <_strtol_l.constprop.0+0x20>
 800806c:	2c2d      	cmp	r4, #45	; 0x2d
 800806e:	d132      	bne.n	80080d6 <_strtol_l.constprop.0+0x9a>
 8008070:	782c      	ldrb	r4, [r5, #0]
 8008072:	2701      	movs	r7, #1
 8008074:	1cb5      	adds	r5, r6, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d05b      	beq.n	8008132 <_strtol_l.constprop.0+0xf6>
 800807a:	2b10      	cmp	r3, #16
 800807c:	d109      	bne.n	8008092 <_strtol_l.constprop.0+0x56>
 800807e:	2c30      	cmp	r4, #48	; 0x30
 8008080:	d107      	bne.n	8008092 <_strtol_l.constprop.0+0x56>
 8008082:	782c      	ldrb	r4, [r5, #0]
 8008084:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008088:	2c58      	cmp	r4, #88	; 0x58
 800808a:	d14d      	bne.n	8008128 <_strtol_l.constprop.0+0xec>
 800808c:	786c      	ldrb	r4, [r5, #1]
 800808e:	2310      	movs	r3, #16
 8008090:	3502      	adds	r5, #2
 8008092:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008096:	f108 38ff 	add.w	r8, r8, #4294967295
 800809a:	f04f 0e00 	mov.w	lr, #0
 800809e:	fbb8 f9f3 	udiv	r9, r8, r3
 80080a2:	4676      	mov	r6, lr
 80080a4:	fb03 8a19 	mls	sl, r3, r9, r8
 80080a8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80080ac:	f1bc 0f09 	cmp.w	ip, #9
 80080b0:	d816      	bhi.n	80080e0 <_strtol_l.constprop.0+0xa4>
 80080b2:	4664      	mov	r4, ip
 80080b4:	42a3      	cmp	r3, r4
 80080b6:	dd24      	ble.n	8008102 <_strtol_l.constprop.0+0xc6>
 80080b8:	f1be 3fff 	cmp.w	lr, #4294967295
 80080bc:	d008      	beq.n	80080d0 <_strtol_l.constprop.0+0x94>
 80080be:	45b1      	cmp	r9, r6
 80080c0:	d31c      	bcc.n	80080fc <_strtol_l.constprop.0+0xc0>
 80080c2:	d101      	bne.n	80080c8 <_strtol_l.constprop.0+0x8c>
 80080c4:	45a2      	cmp	sl, r4
 80080c6:	db19      	blt.n	80080fc <_strtol_l.constprop.0+0xc0>
 80080c8:	fb06 4603 	mla	r6, r6, r3, r4
 80080cc:	f04f 0e01 	mov.w	lr, #1
 80080d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080d4:	e7e8      	b.n	80080a8 <_strtol_l.constprop.0+0x6c>
 80080d6:	2c2b      	cmp	r4, #43	; 0x2b
 80080d8:	bf04      	itt	eq
 80080da:	782c      	ldrbeq	r4, [r5, #0]
 80080dc:	1cb5      	addeq	r5, r6, #2
 80080de:	e7ca      	b.n	8008076 <_strtol_l.constprop.0+0x3a>
 80080e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80080e4:	f1bc 0f19 	cmp.w	ip, #25
 80080e8:	d801      	bhi.n	80080ee <_strtol_l.constprop.0+0xb2>
 80080ea:	3c37      	subs	r4, #55	; 0x37
 80080ec:	e7e2      	b.n	80080b4 <_strtol_l.constprop.0+0x78>
 80080ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80080f2:	f1bc 0f19 	cmp.w	ip, #25
 80080f6:	d804      	bhi.n	8008102 <_strtol_l.constprop.0+0xc6>
 80080f8:	3c57      	subs	r4, #87	; 0x57
 80080fa:	e7db      	b.n	80080b4 <_strtol_l.constprop.0+0x78>
 80080fc:	f04f 3eff 	mov.w	lr, #4294967295
 8008100:	e7e6      	b.n	80080d0 <_strtol_l.constprop.0+0x94>
 8008102:	f1be 3fff 	cmp.w	lr, #4294967295
 8008106:	d105      	bne.n	8008114 <_strtol_l.constprop.0+0xd8>
 8008108:	2322      	movs	r3, #34	; 0x22
 800810a:	6003      	str	r3, [r0, #0]
 800810c:	4646      	mov	r6, r8
 800810e:	b942      	cbnz	r2, 8008122 <_strtol_l.constprop.0+0xe6>
 8008110:	4630      	mov	r0, r6
 8008112:	e79e      	b.n	8008052 <_strtol_l.constprop.0+0x16>
 8008114:	b107      	cbz	r7, 8008118 <_strtol_l.constprop.0+0xdc>
 8008116:	4276      	negs	r6, r6
 8008118:	2a00      	cmp	r2, #0
 800811a:	d0f9      	beq.n	8008110 <_strtol_l.constprop.0+0xd4>
 800811c:	f1be 0f00 	cmp.w	lr, #0
 8008120:	d000      	beq.n	8008124 <_strtol_l.constprop.0+0xe8>
 8008122:	1e69      	subs	r1, r5, #1
 8008124:	6011      	str	r1, [r2, #0]
 8008126:	e7f3      	b.n	8008110 <_strtol_l.constprop.0+0xd4>
 8008128:	2430      	movs	r4, #48	; 0x30
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1b1      	bne.n	8008092 <_strtol_l.constprop.0+0x56>
 800812e:	2308      	movs	r3, #8
 8008130:	e7af      	b.n	8008092 <_strtol_l.constprop.0+0x56>
 8008132:	2c30      	cmp	r4, #48	; 0x30
 8008134:	d0a5      	beq.n	8008082 <_strtol_l.constprop.0+0x46>
 8008136:	230a      	movs	r3, #10
 8008138:	e7ab      	b.n	8008092 <_strtol_l.constprop.0+0x56>
 800813a:	bf00      	nop
 800813c:	0800af49 	.word	0x0800af49

08008140 <strtol>:
 8008140:	4613      	mov	r3, r2
 8008142:	460a      	mov	r2, r1
 8008144:	4601      	mov	r1, r0
 8008146:	4802      	ldr	r0, [pc, #8]	; (8008150 <strtol+0x10>)
 8008148:	6800      	ldr	r0, [r0, #0]
 800814a:	f7ff bf77 	b.w	800803c <_strtol_l.constprop.0>
 800814e:	bf00      	nop
 8008150:	20000080 	.word	0x20000080

08008154 <__cvt>:
 8008154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008158:	ec55 4b10 	vmov	r4, r5, d0
 800815c:	2d00      	cmp	r5, #0
 800815e:	460e      	mov	r6, r1
 8008160:	4619      	mov	r1, r3
 8008162:	462b      	mov	r3, r5
 8008164:	bfbb      	ittet	lt
 8008166:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800816a:	461d      	movlt	r5, r3
 800816c:	2300      	movge	r3, #0
 800816e:	232d      	movlt	r3, #45	; 0x2d
 8008170:	700b      	strb	r3, [r1, #0]
 8008172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008174:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008178:	4691      	mov	r9, r2
 800817a:	f023 0820 	bic.w	r8, r3, #32
 800817e:	bfbc      	itt	lt
 8008180:	4622      	movlt	r2, r4
 8008182:	4614      	movlt	r4, r2
 8008184:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008188:	d005      	beq.n	8008196 <__cvt+0x42>
 800818a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800818e:	d100      	bne.n	8008192 <__cvt+0x3e>
 8008190:	3601      	adds	r6, #1
 8008192:	2102      	movs	r1, #2
 8008194:	e000      	b.n	8008198 <__cvt+0x44>
 8008196:	2103      	movs	r1, #3
 8008198:	ab03      	add	r3, sp, #12
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	ab02      	add	r3, sp, #8
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	ec45 4b10 	vmov	d0, r4, r5
 80081a4:	4653      	mov	r3, sl
 80081a6:	4632      	mov	r2, r6
 80081a8:	f000 fe6a 	bl	8008e80 <_dtoa_r>
 80081ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80081b0:	4607      	mov	r7, r0
 80081b2:	d102      	bne.n	80081ba <__cvt+0x66>
 80081b4:	f019 0f01 	tst.w	r9, #1
 80081b8:	d022      	beq.n	8008200 <__cvt+0xac>
 80081ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081be:	eb07 0906 	add.w	r9, r7, r6
 80081c2:	d110      	bne.n	80081e6 <__cvt+0x92>
 80081c4:	783b      	ldrb	r3, [r7, #0]
 80081c6:	2b30      	cmp	r3, #48	; 0x30
 80081c8:	d10a      	bne.n	80081e0 <__cvt+0x8c>
 80081ca:	2200      	movs	r2, #0
 80081cc:	2300      	movs	r3, #0
 80081ce:	4620      	mov	r0, r4
 80081d0:	4629      	mov	r1, r5
 80081d2:	f7f8 fc99 	bl	8000b08 <__aeabi_dcmpeq>
 80081d6:	b918      	cbnz	r0, 80081e0 <__cvt+0x8c>
 80081d8:	f1c6 0601 	rsb	r6, r6, #1
 80081dc:	f8ca 6000 	str.w	r6, [sl]
 80081e0:	f8da 3000 	ldr.w	r3, [sl]
 80081e4:	4499      	add	r9, r3
 80081e6:	2200      	movs	r2, #0
 80081e8:	2300      	movs	r3, #0
 80081ea:	4620      	mov	r0, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	f7f8 fc8b 	bl	8000b08 <__aeabi_dcmpeq>
 80081f2:	b108      	cbz	r0, 80081f8 <__cvt+0xa4>
 80081f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80081f8:	2230      	movs	r2, #48	; 0x30
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	454b      	cmp	r3, r9
 80081fe:	d307      	bcc.n	8008210 <__cvt+0xbc>
 8008200:	9b03      	ldr	r3, [sp, #12]
 8008202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008204:	1bdb      	subs	r3, r3, r7
 8008206:	4638      	mov	r0, r7
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	b004      	add	sp, #16
 800820c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008210:	1c59      	adds	r1, r3, #1
 8008212:	9103      	str	r1, [sp, #12]
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	e7f0      	b.n	80081fa <__cvt+0xa6>

08008218 <__exponent>:
 8008218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800821a:	4603      	mov	r3, r0
 800821c:	2900      	cmp	r1, #0
 800821e:	bfb8      	it	lt
 8008220:	4249      	neglt	r1, r1
 8008222:	f803 2b02 	strb.w	r2, [r3], #2
 8008226:	bfb4      	ite	lt
 8008228:	222d      	movlt	r2, #45	; 0x2d
 800822a:	222b      	movge	r2, #43	; 0x2b
 800822c:	2909      	cmp	r1, #9
 800822e:	7042      	strb	r2, [r0, #1]
 8008230:	dd2a      	ble.n	8008288 <__exponent+0x70>
 8008232:	f10d 0207 	add.w	r2, sp, #7
 8008236:	4617      	mov	r7, r2
 8008238:	260a      	movs	r6, #10
 800823a:	4694      	mov	ip, r2
 800823c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008240:	fb06 1415 	mls	r4, r6, r5, r1
 8008244:	3430      	adds	r4, #48	; 0x30
 8008246:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800824a:	460c      	mov	r4, r1
 800824c:	2c63      	cmp	r4, #99	; 0x63
 800824e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008252:	4629      	mov	r1, r5
 8008254:	dcf1      	bgt.n	800823a <__exponent+0x22>
 8008256:	3130      	adds	r1, #48	; 0x30
 8008258:	f1ac 0402 	sub.w	r4, ip, #2
 800825c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008260:	1c41      	adds	r1, r0, #1
 8008262:	4622      	mov	r2, r4
 8008264:	42ba      	cmp	r2, r7
 8008266:	d30a      	bcc.n	800827e <__exponent+0x66>
 8008268:	f10d 0209 	add.w	r2, sp, #9
 800826c:	eba2 020c 	sub.w	r2, r2, ip
 8008270:	42bc      	cmp	r4, r7
 8008272:	bf88      	it	hi
 8008274:	2200      	movhi	r2, #0
 8008276:	4413      	add	r3, r2
 8008278:	1a18      	subs	r0, r3, r0
 800827a:	b003      	add	sp, #12
 800827c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800827e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008282:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008286:	e7ed      	b.n	8008264 <__exponent+0x4c>
 8008288:	2330      	movs	r3, #48	; 0x30
 800828a:	3130      	adds	r1, #48	; 0x30
 800828c:	7083      	strb	r3, [r0, #2]
 800828e:	70c1      	strb	r1, [r0, #3]
 8008290:	1d03      	adds	r3, r0, #4
 8008292:	e7f1      	b.n	8008278 <__exponent+0x60>

08008294 <_printf_float>:
 8008294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008298:	ed2d 8b02 	vpush	{d8}
 800829c:	b08d      	sub	sp, #52	; 0x34
 800829e:	460c      	mov	r4, r1
 80082a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80082a4:	4616      	mov	r6, r2
 80082a6:	461f      	mov	r7, r3
 80082a8:	4605      	mov	r5, r0
 80082aa:	f000 fce7 	bl	8008c7c <_localeconv_r>
 80082ae:	f8d0 a000 	ldr.w	sl, [r0]
 80082b2:	4650      	mov	r0, sl
 80082b4:	f7f7 fffc 	bl	80002b0 <strlen>
 80082b8:	2300      	movs	r3, #0
 80082ba:	930a      	str	r3, [sp, #40]	; 0x28
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	9305      	str	r3, [sp, #20]
 80082c0:	f8d8 3000 	ldr.w	r3, [r8]
 80082c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80082c8:	3307      	adds	r3, #7
 80082ca:	f023 0307 	bic.w	r3, r3, #7
 80082ce:	f103 0208 	add.w	r2, r3, #8
 80082d2:	f8c8 2000 	str.w	r2, [r8]
 80082d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082de:	9307      	str	r3, [sp, #28]
 80082e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80082e4:	ee08 0a10 	vmov	s16, r0
 80082e8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80082ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082f0:	4b9e      	ldr	r3, [pc, #632]	; (800856c <_printf_float+0x2d8>)
 80082f2:	f04f 32ff 	mov.w	r2, #4294967295
 80082f6:	f7f8 fc39 	bl	8000b6c <__aeabi_dcmpun>
 80082fa:	bb88      	cbnz	r0, 8008360 <_printf_float+0xcc>
 80082fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008300:	4b9a      	ldr	r3, [pc, #616]	; (800856c <_printf_float+0x2d8>)
 8008302:	f04f 32ff 	mov.w	r2, #4294967295
 8008306:	f7f8 fc13 	bl	8000b30 <__aeabi_dcmple>
 800830a:	bb48      	cbnz	r0, 8008360 <_printf_float+0xcc>
 800830c:	2200      	movs	r2, #0
 800830e:	2300      	movs	r3, #0
 8008310:	4640      	mov	r0, r8
 8008312:	4649      	mov	r1, r9
 8008314:	f7f8 fc02 	bl	8000b1c <__aeabi_dcmplt>
 8008318:	b110      	cbz	r0, 8008320 <_printf_float+0x8c>
 800831a:	232d      	movs	r3, #45	; 0x2d
 800831c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008320:	4a93      	ldr	r2, [pc, #588]	; (8008570 <_printf_float+0x2dc>)
 8008322:	4b94      	ldr	r3, [pc, #592]	; (8008574 <_printf_float+0x2e0>)
 8008324:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008328:	bf94      	ite	ls
 800832a:	4690      	movls	r8, r2
 800832c:	4698      	movhi	r8, r3
 800832e:	2303      	movs	r3, #3
 8008330:	6123      	str	r3, [r4, #16]
 8008332:	9b05      	ldr	r3, [sp, #20]
 8008334:	f023 0304 	bic.w	r3, r3, #4
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	f04f 0900 	mov.w	r9, #0
 800833e:	9700      	str	r7, [sp, #0]
 8008340:	4633      	mov	r3, r6
 8008342:	aa0b      	add	r2, sp, #44	; 0x2c
 8008344:	4621      	mov	r1, r4
 8008346:	4628      	mov	r0, r5
 8008348:	f000 f9da 	bl	8008700 <_printf_common>
 800834c:	3001      	adds	r0, #1
 800834e:	f040 8090 	bne.w	8008472 <_printf_float+0x1de>
 8008352:	f04f 30ff 	mov.w	r0, #4294967295
 8008356:	b00d      	add	sp, #52	; 0x34
 8008358:	ecbd 8b02 	vpop	{d8}
 800835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008360:	4642      	mov	r2, r8
 8008362:	464b      	mov	r3, r9
 8008364:	4640      	mov	r0, r8
 8008366:	4649      	mov	r1, r9
 8008368:	f7f8 fc00 	bl	8000b6c <__aeabi_dcmpun>
 800836c:	b140      	cbz	r0, 8008380 <_printf_float+0xec>
 800836e:	464b      	mov	r3, r9
 8008370:	2b00      	cmp	r3, #0
 8008372:	bfbc      	itt	lt
 8008374:	232d      	movlt	r3, #45	; 0x2d
 8008376:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800837a:	4a7f      	ldr	r2, [pc, #508]	; (8008578 <_printf_float+0x2e4>)
 800837c:	4b7f      	ldr	r3, [pc, #508]	; (800857c <_printf_float+0x2e8>)
 800837e:	e7d1      	b.n	8008324 <_printf_float+0x90>
 8008380:	6863      	ldr	r3, [r4, #4]
 8008382:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008386:	9206      	str	r2, [sp, #24]
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	d13f      	bne.n	800840c <_printf_float+0x178>
 800838c:	2306      	movs	r3, #6
 800838e:	6063      	str	r3, [r4, #4]
 8008390:	9b05      	ldr	r3, [sp, #20]
 8008392:	6861      	ldr	r1, [r4, #4]
 8008394:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008398:	2300      	movs	r3, #0
 800839a:	9303      	str	r3, [sp, #12]
 800839c:	ab0a      	add	r3, sp, #40	; 0x28
 800839e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80083a2:	ab09      	add	r3, sp, #36	; 0x24
 80083a4:	ec49 8b10 	vmov	d0, r8, r9
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80083b0:	4628      	mov	r0, r5
 80083b2:	f7ff fecf 	bl	8008154 <__cvt>
 80083b6:	9b06      	ldr	r3, [sp, #24]
 80083b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083ba:	2b47      	cmp	r3, #71	; 0x47
 80083bc:	4680      	mov	r8, r0
 80083be:	d108      	bne.n	80083d2 <_printf_float+0x13e>
 80083c0:	1cc8      	adds	r0, r1, #3
 80083c2:	db02      	blt.n	80083ca <_printf_float+0x136>
 80083c4:	6863      	ldr	r3, [r4, #4]
 80083c6:	4299      	cmp	r1, r3
 80083c8:	dd41      	ble.n	800844e <_printf_float+0x1ba>
 80083ca:	f1ab 0302 	sub.w	r3, fp, #2
 80083ce:	fa5f fb83 	uxtb.w	fp, r3
 80083d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083d6:	d820      	bhi.n	800841a <_printf_float+0x186>
 80083d8:	3901      	subs	r1, #1
 80083da:	465a      	mov	r2, fp
 80083dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80083e0:	9109      	str	r1, [sp, #36]	; 0x24
 80083e2:	f7ff ff19 	bl	8008218 <__exponent>
 80083e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083e8:	1813      	adds	r3, r2, r0
 80083ea:	2a01      	cmp	r2, #1
 80083ec:	4681      	mov	r9, r0
 80083ee:	6123      	str	r3, [r4, #16]
 80083f0:	dc02      	bgt.n	80083f8 <_printf_float+0x164>
 80083f2:	6822      	ldr	r2, [r4, #0]
 80083f4:	07d2      	lsls	r2, r2, #31
 80083f6:	d501      	bpl.n	80083fc <_printf_float+0x168>
 80083f8:	3301      	adds	r3, #1
 80083fa:	6123      	str	r3, [r4, #16]
 80083fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008400:	2b00      	cmp	r3, #0
 8008402:	d09c      	beq.n	800833e <_printf_float+0xaa>
 8008404:	232d      	movs	r3, #45	; 0x2d
 8008406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800840a:	e798      	b.n	800833e <_printf_float+0xaa>
 800840c:	9a06      	ldr	r2, [sp, #24]
 800840e:	2a47      	cmp	r2, #71	; 0x47
 8008410:	d1be      	bne.n	8008390 <_printf_float+0xfc>
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1bc      	bne.n	8008390 <_printf_float+0xfc>
 8008416:	2301      	movs	r3, #1
 8008418:	e7b9      	b.n	800838e <_printf_float+0xfa>
 800841a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800841e:	d118      	bne.n	8008452 <_printf_float+0x1be>
 8008420:	2900      	cmp	r1, #0
 8008422:	6863      	ldr	r3, [r4, #4]
 8008424:	dd0b      	ble.n	800843e <_printf_float+0x1aa>
 8008426:	6121      	str	r1, [r4, #16]
 8008428:	b913      	cbnz	r3, 8008430 <_printf_float+0x19c>
 800842a:	6822      	ldr	r2, [r4, #0]
 800842c:	07d0      	lsls	r0, r2, #31
 800842e:	d502      	bpl.n	8008436 <_printf_float+0x1a2>
 8008430:	3301      	adds	r3, #1
 8008432:	440b      	add	r3, r1
 8008434:	6123      	str	r3, [r4, #16]
 8008436:	65a1      	str	r1, [r4, #88]	; 0x58
 8008438:	f04f 0900 	mov.w	r9, #0
 800843c:	e7de      	b.n	80083fc <_printf_float+0x168>
 800843e:	b913      	cbnz	r3, 8008446 <_printf_float+0x1b2>
 8008440:	6822      	ldr	r2, [r4, #0]
 8008442:	07d2      	lsls	r2, r2, #31
 8008444:	d501      	bpl.n	800844a <_printf_float+0x1b6>
 8008446:	3302      	adds	r3, #2
 8008448:	e7f4      	b.n	8008434 <_printf_float+0x1a0>
 800844a:	2301      	movs	r3, #1
 800844c:	e7f2      	b.n	8008434 <_printf_float+0x1a0>
 800844e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008454:	4299      	cmp	r1, r3
 8008456:	db05      	blt.n	8008464 <_printf_float+0x1d0>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	6121      	str	r1, [r4, #16]
 800845c:	07d8      	lsls	r0, r3, #31
 800845e:	d5ea      	bpl.n	8008436 <_printf_float+0x1a2>
 8008460:	1c4b      	adds	r3, r1, #1
 8008462:	e7e7      	b.n	8008434 <_printf_float+0x1a0>
 8008464:	2900      	cmp	r1, #0
 8008466:	bfd4      	ite	le
 8008468:	f1c1 0202 	rsble	r2, r1, #2
 800846c:	2201      	movgt	r2, #1
 800846e:	4413      	add	r3, r2
 8008470:	e7e0      	b.n	8008434 <_printf_float+0x1a0>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	055a      	lsls	r2, r3, #21
 8008476:	d407      	bmi.n	8008488 <_printf_float+0x1f4>
 8008478:	6923      	ldr	r3, [r4, #16]
 800847a:	4642      	mov	r2, r8
 800847c:	4631      	mov	r1, r6
 800847e:	4628      	mov	r0, r5
 8008480:	47b8      	blx	r7
 8008482:	3001      	adds	r0, #1
 8008484:	d12c      	bne.n	80084e0 <_printf_float+0x24c>
 8008486:	e764      	b.n	8008352 <_printf_float+0xbe>
 8008488:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800848c:	f240 80e0 	bls.w	8008650 <_printf_float+0x3bc>
 8008490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008494:	2200      	movs	r2, #0
 8008496:	2300      	movs	r3, #0
 8008498:	f7f8 fb36 	bl	8000b08 <__aeabi_dcmpeq>
 800849c:	2800      	cmp	r0, #0
 800849e:	d034      	beq.n	800850a <_printf_float+0x276>
 80084a0:	4a37      	ldr	r2, [pc, #220]	; (8008580 <_printf_float+0x2ec>)
 80084a2:	2301      	movs	r3, #1
 80084a4:	4631      	mov	r1, r6
 80084a6:	4628      	mov	r0, r5
 80084a8:	47b8      	blx	r7
 80084aa:	3001      	adds	r0, #1
 80084ac:	f43f af51 	beq.w	8008352 <_printf_float+0xbe>
 80084b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084b4:	429a      	cmp	r2, r3
 80084b6:	db02      	blt.n	80084be <_printf_float+0x22a>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	07d8      	lsls	r0, r3, #31
 80084bc:	d510      	bpl.n	80084e0 <_printf_float+0x24c>
 80084be:	ee18 3a10 	vmov	r3, s16
 80084c2:	4652      	mov	r2, sl
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	f43f af41 	beq.w	8008352 <_printf_float+0xbe>
 80084d0:	f04f 0800 	mov.w	r8, #0
 80084d4:	f104 091a 	add.w	r9, r4, #26
 80084d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084da:	3b01      	subs	r3, #1
 80084dc:	4543      	cmp	r3, r8
 80084de:	dc09      	bgt.n	80084f4 <_printf_float+0x260>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	079b      	lsls	r3, r3, #30
 80084e4:	f100 8107 	bmi.w	80086f6 <_printf_float+0x462>
 80084e8:	68e0      	ldr	r0, [r4, #12]
 80084ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ec:	4298      	cmp	r0, r3
 80084ee:	bfb8      	it	lt
 80084f0:	4618      	movlt	r0, r3
 80084f2:	e730      	b.n	8008356 <_printf_float+0xc2>
 80084f4:	2301      	movs	r3, #1
 80084f6:	464a      	mov	r2, r9
 80084f8:	4631      	mov	r1, r6
 80084fa:	4628      	mov	r0, r5
 80084fc:	47b8      	blx	r7
 80084fe:	3001      	adds	r0, #1
 8008500:	f43f af27 	beq.w	8008352 <_printf_float+0xbe>
 8008504:	f108 0801 	add.w	r8, r8, #1
 8008508:	e7e6      	b.n	80084d8 <_printf_float+0x244>
 800850a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850c:	2b00      	cmp	r3, #0
 800850e:	dc39      	bgt.n	8008584 <_printf_float+0x2f0>
 8008510:	4a1b      	ldr	r2, [pc, #108]	; (8008580 <_printf_float+0x2ec>)
 8008512:	2301      	movs	r3, #1
 8008514:	4631      	mov	r1, r6
 8008516:	4628      	mov	r0, r5
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	f43f af19 	beq.w	8008352 <_printf_float+0xbe>
 8008520:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008524:	4313      	orrs	r3, r2
 8008526:	d102      	bne.n	800852e <_printf_float+0x29a>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	07d9      	lsls	r1, r3, #31
 800852c:	d5d8      	bpl.n	80084e0 <_printf_float+0x24c>
 800852e:	ee18 3a10 	vmov	r3, s16
 8008532:	4652      	mov	r2, sl
 8008534:	4631      	mov	r1, r6
 8008536:	4628      	mov	r0, r5
 8008538:	47b8      	blx	r7
 800853a:	3001      	adds	r0, #1
 800853c:	f43f af09 	beq.w	8008352 <_printf_float+0xbe>
 8008540:	f04f 0900 	mov.w	r9, #0
 8008544:	f104 0a1a 	add.w	sl, r4, #26
 8008548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854a:	425b      	negs	r3, r3
 800854c:	454b      	cmp	r3, r9
 800854e:	dc01      	bgt.n	8008554 <_printf_float+0x2c0>
 8008550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008552:	e792      	b.n	800847a <_printf_float+0x1e6>
 8008554:	2301      	movs	r3, #1
 8008556:	4652      	mov	r2, sl
 8008558:	4631      	mov	r1, r6
 800855a:	4628      	mov	r0, r5
 800855c:	47b8      	blx	r7
 800855e:	3001      	adds	r0, #1
 8008560:	f43f aef7 	beq.w	8008352 <_printf_float+0xbe>
 8008564:	f109 0901 	add.w	r9, r9, #1
 8008568:	e7ee      	b.n	8008548 <_printf_float+0x2b4>
 800856a:	bf00      	nop
 800856c:	7fefffff 	.word	0x7fefffff
 8008570:	0800b049 	.word	0x0800b049
 8008574:	0800b04d 	.word	0x0800b04d
 8008578:	0800b051 	.word	0x0800b051
 800857c:	0800b055 	.word	0x0800b055
 8008580:	0800b059 	.word	0x0800b059
 8008584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008586:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008588:	429a      	cmp	r2, r3
 800858a:	bfa8      	it	ge
 800858c:	461a      	movge	r2, r3
 800858e:	2a00      	cmp	r2, #0
 8008590:	4691      	mov	r9, r2
 8008592:	dc37      	bgt.n	8008604 <_printf_float+0x370>
 8008594:	f04f 0b00 	mov.w	fp, #0
 8008598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800859c:	f104 021a 	add.w	r2, r4, #26
 80085a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085a2:	9305      	str	r3, [sp, #20]
 80085a4:	eba3 0309 	sub.w	r3, r3, r9
 80085a8:	455b      	cmp	r3, fp
 80085aa:	dc33      	bgt.n	8008614 <_printf_float+0x380>
 80085ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085b0:	429a      	cmp	r2, r3
 80085b2:	db3b      	blt.n	800862c <_printf_float+0x398>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	07da      	lsls	r2, r3, #31
 80085b8:	d438      	bmi.n	800862c <_printf_float+0x398>
 80085ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80085be:	eba2 0903 	sub.w	r9, r2, r3
 80085c2:	9b05      	ldr	r3, [sp, #20]
 80085c4:	1ad2      	subs	r2, r2, r3
 80085c6:	4591      	cmp	r9, r2
 80085c8:	bfa8      	it	ge
 80085ca:	4691      	movge	r9, r2
 80085cc:	f1b9 0f00 	cmp.w	r9, #0
 80085d0:	dc35      	bgt.n	800863e <_printf_float+0x3aa>
 80085d2:	f04f 0800 	mov.w	r8, #0
 80085d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085da:	f104 0a1a 	add.w	sl, r4, #26
 80085de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085e2:	1a9b      	subs	r3, r3, r2
 80085e4:	eba3 0309 	sub.w	r3, r3, r9
 80085e8:	4543      	cmp	r3, r8
 80085ea:	f77f af79 	ble.w	80084e0 <_printf_float+0x24c>
 80085ee:	2301      	movs	r3, #1
 80085f0:	4652      	mov	r2, sl
 80085f2:	4631      	mov	r1, r6
 80085f4:	4628      	mov	r0, r5
 80085f6:	47b8      	blx	r7
 80085f8:	3001      	adds	r0, #1
 80085fa:	f43f aeaa 	beq.w	8008352 <_printf_float+0xbe>
 80085fe:	f108 0801 	add.w	r8, r8, #1
 8008602:	e7ec      	b.n	80085de <_printf_float+0x34a>
 8008604:	4613      	mov	r3, r2
 8008606:	4631      	mov	r1, r6
 8008608:	4642      	mov	r2, r8
 800860a:	4628      	mov	r0, r5
 800860c:	47b8      	blx	r7
 800860e:	3001      	adds	r0, #1
 8008610:	d1c0      	bne.n	8008594 <_printf_float+0x300>
 8008612:	e69e      	b.n	8008352 <_printf_float+0xbe>
 8008614:	2301      	movs	r3, #1
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	9205      	str	r2, [sp, #20]
 800861c:	47b8      	blx	r7
 800861e:	3001      	adds	r0, #1
 8008620:	f43f ae97 	beq.w	8008352 <_printf_float+0xbe>
 8008624:	9a05      	ldr	r2, [sp, #20]
 8008626:	f10b 0b01 	add.w	fp, fp, #1
 800862a:	e7b9      	b.n	80085a0 <_printf_float+0x30c>
 800862c:	ee18 3a10 	vmov	r3, s16
 8008630:	4652      	mov	r2, sl
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	d1be      	bne.n	80085ba <_printf_float+0x326>
 800863c:	e689      	b.n	8008352 <_printf_float+0xbe>
 800863e:	9a05      	ldr	r2, [sp, #20]
 8008640:	464b      	mov	r3, r9
 8008642:	4442      	add	r2, r8
 8008644:	4631      	mov	r1, r6
 8008646:	4628      	mov	r0, r5
 8008648:	47b8      	blx	r7
 800864a:	3001      	adds	r0, #1
 800864c:	d1c1      	bne.n	80085d2 <_printf_float+0x33e>
 800864e:	e680      	b.n	8008352 <_printf_float+0xbe>
 8008650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008652:	2a01      	cmp	r2, #1
 8008654:	dc01      	bgt.n	800865a <_printf_float+0x3c6>
 8008656:	07db      	lsls	r3, r3, #31
 8008658:	d53a      	bpl.n	80086d0 <_printf_float+0x43c>
 800865a:	2301      	movs	r3, #1
 800865c:	4642      	mov	r2, r8
 800865e:	4631      	mov	r1, r6
 8008660:	4628      	mov	r0, r5
 8008662:	47b8      	blx	r7
 8008664:	3001      	adds	r0, #1
 8008666:	f43f ae74 	beq.w	8008352 <_printf_float+0xbe>
 800866a:	ee18 3a10 	vmov	r3, s16
 800866e:	4652      	mov	r2, sl
 8008670:	4631      	mov	r1, r6
 8008672:	4628      	mov	r0, r5
 8008674:	47b8      	blx	r7
 8008676:	3001      	adds	r0, #1
 8008678:	f43f ae6b 	beq.w	8008352 <_printf_float+0xbe>
 800867c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008680:	2200      	movs	r2, #0
 8008682:	2300      	movs	r3, #0
 8008684:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008688:	f7f8 fa3e 	bl	8000b08 <__aeabi_dcmpeq>
 800868c:	b9d8      	cbnz	r0, 80086c6 <_printf_float+0x432>
 800868e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008692:	f108 0201 	add.w	r2, r8, #1
 8008696:	4631      	mov	r1, r6
 8008698:	4628      	mov	r0, r5
 800869a:	47b8      	blx	r7
 800869c:	3001      	adds	r0, #1
 800869e:	d10e      	bne.n	80086be <_printf_float+0x42a>
 80086a0:	e657      	b.n	8008352 <_printf_float+0xbe>
 80086a2:	2301      	movs	r3, #1
 80086a4:	4652      	mov	r2, sl
 80086a6:	4631      	mov	r1, r6
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b8      	blx	r7
 80086ac:	3001      	adds	r0, #1
 80086ae:	f43f ae50 	beq.w	8008352 <_printf_float+0xbe>
 80086b2:	f108 0801 	add.w	r8, r8, #1
 80086b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b8:	3b01      	subs	r3, #1
 80086ba:	4543      	cmp	r3, r8
 80086bc:	dcf1      	bgt.n	80086a2 <_printf_float+0x40e>
 80086be:	464b      	mov	r3, r9
 80086c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80086c4:	e6da      	b.n	800847c <_printf_float+0x1e8>
 80086c6:	f04f 0800 	mov.w	r8, #0
 80086ca:	f104 0a1a 	add.w	sl, r4, #26
 80086ce:	e7f2      	b.n	80086b6 <_printf_float+0x422>
 80086d0:	2301      	movs	r3, #1
 80086d2:	4642      	mov	r2, r8
 80086d4:	e7df      	b.n	8008696 <_printf_float+0x402>
 80086d6:	2301      	movs	r3, #1
 80086d8:	464a      	mov	r2, r9
 80086da:	4631      	mov	r1, r6
 80086dc:	4628      	mov	r0, r5
 80086de:	47b8      	blx	r7
 80086e0:	3001      	adds	r0, #1
 80086e2:	f43f ae36 	beq.w	8008352 <_printf_float+0xbe>
 80086e6:	f108 0801 	add.w	r8, r8, #1
 80086ea:	68e3      	ldr	r3, [r4, #12]
 80086ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086ee:	1a5b      	subs	r3, r3, r1
 80086f0:	4543      	cmp	r3, r8
 80086f2:	dcf0      	bgt.n	80086d6 <_printf_float+0x442>
 80086f4:	e6f8      	b.n	80084e8 <_printf_float+0x254>
 80086f6:	f04f 0800 	mov.w	r8, #0
 80086fa:	f104 0919 	add.w	r9, r4, #25
 80086fe:	e7f4      	b.n	80086ea <_printf_float+0x456>

08008700 <_printf_common>:
 8008700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008704:	4616      	mov	r6, r2
 8008706:	4699      	mov	r9, r3
 8008708:	688a      	ldr	r2, [r1, #8]
 800870a:	690b      	ldr	r3, [r1, #16]
 800870c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008710:	4293      	cmp	r3, r2
 8008712:	bfb8      	it	lt
 8008714:	4613      	movlt	r3, r2
 8008716:	6033      	str	r3, [r6, #0]
 8008718:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800871c:	4607      	mov	r7, r0
 800871e:	460c      	mov	r4, r1
 8008720:	b10a      	cbz	r2, 8008726 <_printf_common+0x26>
 8008722:	3301      	adds	r3, #1
 8008724:	6033      	str	r3, [r6, #0]
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	0699      	lsls	r1, r3, #26
 800872a:	bf42      	ittt	mi
 800872c:	6833      	ldrmi	r3, [r6, #0]
 800872e:	3302      	addmi	r3, #2
 8008730:	6033      	strmi	r3, [r6, #0]
 8008732:	6825      	ldr	r5, [r4, #0]
 8008734:	f015 0506 	ands.w	r5, r5, #6
 8008738:	d106      	bne.n	8008748 <_printf_common+0x48>
 800873a:	f104 0a19 	add.w	sl, r4, #25
 800873e:	68e3      	ldr	r3, [r4, #12]
 8008740:	6832      	ldr	r2, [r6, #0]
 8008742:	1a9b      	subs	r3, r3, r2
 8008744:	42ab      	cmp	r3, r5
 8008746:	dc26      	bgt.n	8008796 <_printf_common+0x96>
 8008748:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800874c:	1e13      	subs	r3, r2, #0
 800874e:	6822      	ldr	r2, [r4, #0]
 8008750:	bf18      	it	ne
 8008752:	2301      	movne	r3, #1
 8008754:	0692      	lsls	r2, r2, #26
 8008756:	d42b      	bmi.n	80087b0 <_printf_common+0xb0>
 8008758:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800875c:	4649      	mov	r1, r9
 800875e:	4638      	mov	r0, r7
 8008760:	47c0      	blx	r8
 8008762:	3001      	adds	r0, #1
 8008764:	d01e      	beq.n	80087a4 <_printf_common+0xa4>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	6922      	ldr	r2, [r4, #16]
 800876a:	f003 0306 	and.w	r3, r3, #6
 800876e:	2b04      	cmp	r3, #4
 8008770:	bf02      	ittt	eq
 8008772:	68e5      	ldreq	r5, [r4, #12]
 8008774:	6833      	ldreq	r3, [r6, #0]
 8008776:	1aed      	subeq	r5, r5, r3
 8008778:	68a3      	ldr	r3, [r4, #8]
 800877a:	bf0c      	ite	eq
 800877c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008780:	2500      	movne	r5, #0
 8008782:	4293      	cmp	r3, r2
 8008784:	bfc4      	itt	gt
 8008786:	1a9b      	subgt	r3, r3, r2
 8008788:	18ed      	addgt	r5, r5, r3
 800878a:	2600      	movs	r6, #0
 800878c:	341a      	adds	r4, #26
 800878e:	42b5      	cmp	r5, r6
 8008790:	d11a      	bne.n	80087c8 <_printf_common+0xc8>
 8008792:	2000      	movs	r0, #0
 8008794:	e008      	b.n	80087a8 <_printf_common+0xa8>
 8008796:	2301      	movs	r3, #1
 8008798:	4652      	mov	r2, sl
 800879a:	4649      	mov	r1, r9
 800879c:	4638      	mov	r0, r7
 800879e:	47c0      	blx	r8
 80087a0:	3001      	adds	r0, #1
 80087a2:	d103      	bne.n	80087ac <_printf_common+0xac>
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ac:	3501      	adds	r5, #1
 80087ae:	e7c6      	b.n	800873e <_printf_common+0x3e>
 80087b0:	18e1      	adds	r1, r4, r3
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	2030      	movs	r0, #48	; 0x30
 80087b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087ba:	4422      	add	r2, r4
 80087bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087c4:	3302      	adds	r3, #2
 80087c6:	e7c7      	b.n	8008758 <_printf_common+0x58>
 80087c8:	2301      	movs	r3, #1
 80087ca:	4622      	mov	r2, r4
 80087cc:	4649      	mov	r1, r9
 80087ce:	4638      	mov	r0, r7
 80087d0:	47c0      	blx	r8
 80087d2:	3001      	adds	r0, #1
 80087d4:	d0e6      	beq.n	80087a4 <_printf_common+0xa4>
 80087d6:	3601      	adds	r6, #1
 80087d8:	e7d9      	b.n	800878e <_printf_common+0x8e>
	...

080087dc <_printf_i>:
 80087dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087e0:	7e0f      	ldrb	r7, [r1, #24]
 80087e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087e4:	2f78      	cmp	r7, #120	; 0x78
 80087e6:	4691      	mov	r9, r2
 80087e8:	4680      	mov	r8, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	469a      	mov	sl, r3
 80087ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087f2:	d807      	bhi.n	8008804 <_printf_i+0x28>
 80087f4:	2f62      	cmp	r7, #98	; 0x62
 80087f6:	d80a      	bhi.n	800880e <_printf_i+0x32>
 80087f8:	2f00      	cmp	r7, #0
 80087fa:	f000 80d4 	beq.w	80089a6 <_printf_i+0x1ca>
 80087fe:	2f58      	cmp	r7, #88	; 0x58
 8008800:	f000 80c0 	beq.w	8008984 <_printf_i+0x1a8>
 8008804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800880c:	e03a      	b.n	8008884 <_printf_i+0xa8>
 800880e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008812:	2b15      	cmp	r3, #21
 8008814:	d8f6      	bhi.n	8008804 <_printf_i+0x28>
 8008816:	a101      	add	r1, pc, #4	; (adr r1, 800881c <_printf_i+0x40>)
 8008818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800881c:	08008875 	.word	0x08008875
 8008820:	08008889 	.word	0x08008889
 8008824:	08008805 	.word	0x08008805
 8008828:	08008805 	.word	0x08008805
 800882c:	08008805 	.word	0x08008805
 8008830:	08008805 	.word	0x08008805
 8008834:	08008889 	.word	0x08008889
 8008838:	08008805 	.word	0x08008805
 800883c:	08008805 	.word	0x08008805
 8008840:	08008805 	.word	0x08008805
 8008844:	08008805 	.word	0x08008805
 8008848:	0800898d 	.word	0x0800898d
 800884c:	080088b5 	.word	0x080088b5
 8008850:	08008947 	.word	0x08008947
 8008854:	08008805 	.word	0x08008805
 8008858:	08008805 	.word	0x08008805
 800885c:	080089af 	.word	0x080089af
 8008860:	08008805 	.word	0x08008805
 8008864:	080088b5 	.word	0x080088b5
 8008868:	08008805 	.word	0x08008805
 800886c:	08008805 	.word	0x08008805
 8008870:	0800894f 	.word	0x0800894f
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	1d1a      	adds	r2, r3, #4
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	602a      	str	r2, [r5, #0]
 800887c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008884:	2301      	movs	r3, #1
 8008886:	e09f      	b.n	80089c8 <_printf_i+0x1ec>
 8008888:	6820      	ldr	r0, [r4, #0]
 800888a:	682b      	ldr	r3, [r5, #0]
 800888c:	0607      	lsls	r7, r0, #24
 800888e:	f103 0104 	add.w	r1, r3, #4
 8008892:	6029      	str	r1, [r5, #0]
 8008894:	d501      	bpl.n	800889a <_printf_i+0xbe>
 8008896:	681e      	ldr	r6, [r3, #0]
 8008898:	e003      	b.n	80088a2 <_printf_i+0xc6>
 800889a:	0646      	lsls	r6, r0, #25
 800889c:	d5fb      	bpl.n	8008896 <_printf_i+0xba>
 800889e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80088a2:	2e00      	cmp	r6, #0
 80088a4:	da03      	bge.n	80088ae <_printf_i+0xd2>
 80088a6:	232d      	movs	r3, #45	; 0x2d
 80088a8:	4276      	negs	r6, r6
 80088aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ae:	485a      	ldr	r0, [pc, #360]	; (8008a18 <_printf_i+0x23c>)
 80088b0:	230a      	movs	r3, #10
 80088b2:	e012      	b.n	80088da <_printf_i+0xfe>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	6820      	ldr	r0, [r4, #0]
 80088b8:	1d19      	adds	r1, r3, #4
 80088ba:	6029      	str	r1, [r5, #0]
 80088bc:	0605      	lsls	r5, r0, #24
 80088be:	d501      	bpl.n	80088c4 <_printf_i+0xe8>
 80088c0:	681e      	ldr	r6, [r3, #0]
 80088c2:	e002      	b.n	80088ca <_printf_i+0xee>
 80088c4:	0641      	lsls	r1, r0, #25
 80088c6:	d5fb      	bpl.n	80088c0 <_printf_i+0xe4>
 80088c8:	881e      	ldrh	r6, [r3, #0]
 80088ca:	4853      	ldr	r0, [pc, #332]	; (8008a18 <_printf_i+0x23c>)
 80088cc:	2f6f      	cmp	r7, #111	; 0x6f
 80088ce:	bf0c      	ite	eq
 80088d0:	2308      	moveq	r3, #8
 80088d2:	230a      	movne	r3, #10
 80088d4:	2100      	movs	r1, #0
 80088d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088da:	6865      	ldr	r5, [r4, #4]
 80088dc:	60a5      	str	r5, [r4, #8]
 80088de:	2d00      	cmp	r5, #0
 80088e0:	bfa2      	ittt	ge
 80088e2:	6821      	ldrge	r1, [r4, #0]
 80088e4:	f021 0104 	bicge.w	r1, r1, #4
 80088e8:	6021      	strge	r1, [r4, #0]
 80088ea:	b90e      	cbnz	r6, 80088f0 <_printf_i+0x114>
 80088ec:	2d00      	cmp	r5, #0
 80088ee:	d04b      	beq.n	8008988 <_printf_i+0x1ac>
 80088f0:	4615      	mov	r5, r2
 80088f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80088f6:	fb03 6711 	mls	r7, r3, r1, r6
 80088fa:	5dc7      	ldrb	r7, [r0, r7]
 80088fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008900:	4637      	mov	r7, r6
 8008902:	42bb      	cmp	r3, r7
 8008904:	460e      	mov	r6, r1
 8008906:	d9f4      	bls.n	80088f2 <_printf_i+0x116>
 8008908:	2b08      	cmp	r3, #8
 800890a:	d10b      	bne.n	8008924 <_printf_i+0x148>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	07de      	lsls	r6, r3, #31
 8008910:	d508      	bpl.n	8008924 <_printf_i+0x148>
 8008912:	6923      	ldr	r3, [r4, #16]
 8008914:	6861      	ldr	r1, [r4, #4]
 8008916:	4299      	cmp	r1, r3
 8008918:	bfde      	ittt	le
 800891a:	2330      	movle	r3, #48	; 0x30
 800891c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008924:	1b52      	subs	r2, r2, r5
 8008926:	6122      	str	r2, [r4, #16]
 8008928:	f8cd a000 	str.w	sl, [sp]
 800892c:	464b      	mov	r3, r9
 800892e:	aa03      	add	r2, sp, #12
 8008930:	4621      	mov	r1, r4
 8008932:	4640      	mov	r0, r8
 8008934:	f7ff fee4 	bl	8008700 <_printf_common>
 8008938:	3001      	adds	r0, #1
 800893a:	d14a      	bne.n	80089d2 <_printf_i+0x1f6>
 800893c:	f04f 30ff 	mov.w	r0, #4294967295
 8008940:	b004      	add	sp, #16
 8008942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	f043 0320 	orr.w	r3, r3, #32
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	4833      	ldr	r0, [pc, #204]	; (8008a1c <_printf_i+0x240>)
 8008950:	2778      	movs	r7, #120	; 0x78
 8008952:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	6829      	ldr	r1, [r5, #0]
 800895a:	061f      	lsls	r7, r3, #24
 800895c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008960:	d402      	bmi.n	8008968 <_printf_i+0x18c>
 8008962:	065f      	lsls	r7, r3, #25
 8008964:	bf48      	it	mi
 8008966:	b2b6      	uxthmi	r6, r6
 8008968:	07df      	lsls	r7, r3, #31
 800896a:	bf48      	it	mi
 800896c:	f043 0320 	orrmi.w	r3, r3, #32
 8008970:	6029      	str	r1, [r5, #0]
 8008972:	bf48      	it	mi
 8008974:	6023      	strmi	r3, [r4, #0]
 8008976:	b91e      	cbnz	r6, 8008980 <_printf_i+0x1a4>
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	f023 0320 	bic.w	r3, r3, #32
 800897e:	6023      	str	r3, [r4, #0]
 8008980:	2310      	movs	r3, #16
 8008982:	e7a7      	b.n	80088d4 <_printf_i+0xf8>
 8008984:	4824      	ldr	r0, [pc, #144]	; (8008a18 <_printf_i+0x23c>)
 8008986:	e7e4      	b.n	8008952 <_printf_i+0x176>
 8008988:	4615      	mov	r5, r2
 800898a:	e7bd      	b.n	8008908 <_printf_i+0x12c>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	6826      	ldr	r6, [r4, #0]
 8008990:	6961      	ldr	r1, [r4, #20]
 8008992:	1d18      	adds	r0, r3, #4
 8008994:	6028      	str	r0, [r5, #0]
 8008996:	0635      	lsls	r5, r6, #24
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	d501      	bpl.n	80089a0 <_printf_i+0x1c4>
 800899c:	6019      	str	r1, [r3, #0]
 800899e:	e002      	b.n	80089a6 <_printf_i+0x1ca>
 80089a0:	0670      	lsls	r0, r6, #25
 80089a2:	d5fb      	bpl.n	800899c <_printf_i+0x1c0>
 80089a4:	8019      	strh	r1, [r3, #0]
 80089a6:	2300      	movs	r3, #0
 80089a8:	6123      	str	r3, [r4, #16]
 80089aa:	4615      	mov	r5, r2
 80089ac:	e7bc      	b.n	8008928 <_printf_i+0x14c>
 80089ae:	682b      	ldr	r3, [r5, #0]
 80089b0:	1d1a      	adds	r2, r3, #4
 80089b2:	602a      	str	r2, [r5, #0]
 80089b4:	681d      	ldr	r5, [r3, #0]
 80089b6:	6862      	ldr	r2, [r4, #4]
 80089b8:	2100      	movs	r1, #0
 80089ba:	4628      	mov	r0, r5
 80089bc:	f7f7 fc28 	bl	8000210 <memchr>
 80089c0:	b108      	cbz	r0, 80089c6 <_printf_i+0x1ea>
 80089c2:	1b40      	subs	r0, r0, r5
 80089c4:	6060      	str	r0, [r4, #4]
 80089c6:	6863      	ldr	r3, [r4, #4]
 80089c8:	6123      	str	r3, [r4, #16]
 80089ca:	2300      	movs	r3, #0
 80089cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089d0:	e7aa      	b.n	8008928 <_printf_i+0x14c>
 80089d2:	6923      	ldr	r3, [r4, #16]
 80089d4:	462a      	mov	r2, r5
 80089d6:	4649      	mov	r1, r9
 80089d8:	4640      	mov	r0, r8
 80089da:	47d0      	blx	sl
 80089dc:	3001      	adds	r0, #1
 80089de:	d0ad      	beq.n	800893c <_printf_i+0x160>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	079b      	lsls	r3, r3, #30
 80089e4:	d413      	bmi.n	8008a0e <_printf_i+0x232>
 80089e6:	68e0      	ldr	r0, [r4, #12]
 80089e8:	9b03      	ldr	r3, [sp, #12]
 80089ea:	4298      	cmp	r0, r3
 80089ec:	bfb8      	it	lt
 80089ee:	4618      	movlt	r0, r3
 80089f0:	e7a6      	b.n	8008940 <_printf_i+0x164>
 80089f2:	2301      	movs	r3, #1
 80089f4:	4632      	mov	r2, r6
 80089f6:	4649      	mov	r1, r9
 80089f8:	4640      	mov	r0, r8
 80089fa:	47d0      	blx	sl
 80089fc:	3001      	adds	r0, #1
 80089fe:	d09d      	beq.n	800893c <_printf_i+0x160>
 8008a00:	3501      	adds	r5, #1
 8008a02:	68e3      	ldr	r3, [r4, #12]
 8008a04:	9903      	ldr	r1, [sp, #12]
 8008a06:	1a5b      	subs	r3, r3, r1
 8008a08:	42ab      	cmp	r3, r5
 8008a0a:	dcf2      	bgt.n	80089f2 <_printf_i+0x216>
 8008a0c:	e7eb      	b.n	80089e6 <_printf_i+0x20a>
 8008a0e:	2500      	movs	r5, #0
 8008a10:	f104 0619 	add.w	r6, r4, #25
 8008a14:	e7f5      	b.n	8008a02 <_printf_i+0x226>
 8008a16:	bf00      	nop
 8008a18:	0800b05b 	.word	0x0800b05b
 8008a1c:	0800b06c 	.word	0x0800b06c

08008a20 <std>:
 8008a20:	2300      	movs	r3, #0
 8008a22:	b510      	push	{r4, lr}
 8008a24:	4604      	mov	r4, r0
 8008a26:	e9c0 3300 	strd	r3, r3, [r0]
 8008a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a2e:	6083      	str	r3, [r0, #8]
 8008a30:	8181      	strh	r1, [r0, #12]
 8008a32:	6643      	str	r3, [r0, #100]	; 0x64
 8008a34:	81c2      	strh	r2, [r0, #14]
 8008a36:	6183      	str	r3, [r0, #24]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	2208      	movs	r2, #8
 8008a3c:	305c      	adds	r0, #92	; 0x5c
 8008a3e:	f000 f914 	bl	8008c6a <memset>
 8008a42:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <std+0x58>)
 8008a44:	6263      	str	r3, [r4, #36]	; 0x24
 8008a46:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <std+0x5c>)
 8008a48:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a4a:	4b0d      	ldr	r3, [pc, #52]	; (8008a80 <std+0x60>)
 8008a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a4e:	4b0d      	ldr	r3, [pc, #52]	; (8008a84 <std+0x64>)
 8008a50:	6323      	str	r3, [r4, #48]	; 0x30
 8008a52:	4b0d      	ldr	r3, [pc, #52]	; (8008a88 <std+0x68>)
 8008a54:	6224      	str	r4, [r4, #32]
 8008a56:	429c      	cmp	r4, r3
 8008a58:	d006      	beq.n	8008a68 <std+0x48>
 8008a5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008a5e:	4294      	cmp	r4, r2
 8008a60:	d002      	beq.n	8008a68 <std+0x48>
 8008a62:	33d0      	adds	r3, #208	; 0xd0
 8008a64:	429c      	cmp	r4, r3
 8008a66:	d105      	bne.n	8008a74 <std+0x54>
 8008a68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a70:	f000 b978 	b.w	8008d64 <__retarget_lock_init_recursive>
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	bf00      	nop
 8008a78:	08008be5 	.word	0x08008be5
 8008a7c:	08008c07 	.word	0x08008c07
 8008a80:	08008c3f 	.word	0x08008c3f
 8008a84:	08008c63 	.word	0x08008c63
 8008a88:	2000094c 	.word	0x2000094c

08008a8c <stdio_exit_handler>:
 8008a8c:	4a02      	ldr	r2, [pc, #8]	; (8008a98 <stdio_exit_handler+0xc>)
 8008a8e:	4903      	ldr	r1, [pc, #12]	; (8008a9c <stdio_exit_handler+0x10>)
 8008a90:	4803      	ldr	r0, [pc, #12]	; (8008aa0 <stdio_exit_handler+0x14>)
 8008a92:	f000 b869 	b.w	8008b68 <_fwalk_sglue>
 8008a96:	bf00      	nop
 8008a98:	20000028 	.word	0x20000028
 8008a9c:	0800a719 	.word	0x0800a719
 8008aa0:	20000034 	.word	0x20000034

08008aa4 <cleanup_stdio>:
 8008aa4:	6841      	ldr	r1, [r0, #4]
 8008aa6:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <cleanup_stdio+0x34>)
 8008aa8:	4299      	cmp	r1, r3
 8008aaa:	b510      	push	{r4, lr}
 8008aac:	4604      	mov	r4, r0
 8008aae:	d001      	beq.n	8008ab4 <cleanup_stdio+0x10>
 8008ab0:	f001 fe32 	bl	800a718 <_fflush_r>
 8008ab4:	68a1      	ldr	r1, [r4, #8]
 8008ab6:	4b09      	ldr	r3, [pc, #36]	; (8008adc <cleanup_stdio+0x38>)
 8008ab8:	4299      	cmp	r1, r3
 8008aba:	d002      	beq.n	8008ac2 <cleanup_stdio+0x1e>
 8008abc:	4620      	mov	r0, r4
 8008abe:	f001 fe2b 	bl	800a718 <_fflush_r>
 8008ac2:	68e1      	ldr	r1, [r4, #12]
 8008ac4:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <cleanup_stdio+0x3c>)
 8008ac6:	4299      	cmp	r1, r3
 8008ac8:	d004      	beq.n	8008ad4 <cleanup_stdio+0x30>
 8008aca:	4620      	mov	r0, r4
 8008acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad0:	f001 be22 	b.w	800a718 <_fflush_r>
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	bf00      	nop
 8008ad8:	2000094c 	.word	0x2000094c
 8008adc:	200009b4 	.word	0x200009b4
 8008ae0:	20000a1c 	.word	0x20000a1c

08008ae4 <global_stdio_init.part.0>:
 8008ae4:	b510      	push	{r4, lr}
 8008ae6:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <global_stdio_init.part.0+0x30>)
 8008ae8:	4c0b      	ldr	r4, [pc, #44]	; (8008b18 <global_stdio_init.part.0+0x34>)
 8008aea:	4a0c      	ldr	r2, [pc, #48]	; (8008b1c <global_stdio_init.part.0+0x38>)
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	4620      	mov	r0, r4
 8008af0:	2200      	movs	r2, #0
 8008af2:	2104      	movs	r1, #4
 8008af4:	f7ff ff94 	bl	8008a20 <std>
 8008af8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008afc:	2201      	movs	r2, #1
 8008afe:	2109      	movs	r1, #9
 8008b00:	f7ff ff8e 	bl	8008a20 <std>
 8008b04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008b08:	2202      	movs	r2, #2
 8008b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b0e:	2112      	movs	r1, #18
 8008b10:	f7ff bf86 	b.w	8008a20 <std>
 8008b14:	20000a84 	.word	0x20000a84
 8008b18:	2000094c 	.word	0x2000094c
 8008b1c:	08008a8d 	.word	0x08008a8d

08008b20 <__sfp_lock_acquire>:
 8008b20:	4801      	ldr	r0, [pc, #4]	; (8008b28 <__sfp_lock_acquire+0x8>)
 8008b22:	f000 b920 	b.w	8008d66 <__retarget_lock_acquire_recursive>
 8008b26:	bf00      	nop
 8008b28:	20000a8d 	.word	0x20000a8d

08008b2c <__sfp_lock_release>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	; (8008b34 <__sfp_lock_release+0x8>)
 8008b2e:	f000 b91b 	b.w	8008d68 <__retarget_lock_release_recursive>
 8008b32:	bf00      	nop
 8008b34:	20000a8d 	.word	0x20000a8d

08008b38 <__sinit>:
 8008b38:	b510      	push	{r4, lr}
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	f7ff fff0 	bl	8008b20 <__sfp_lock_acquire>
 8008b40:	6a23      	ldr	r3, [r4, #32]
 8008b42:	b11b      	cbz	r3, 8008b4c <__sinit+0x14>
 8008b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b48:	f7ff bff0 	b.w	8008b2c <__sfp_lock_release>
 8008b4c:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <__sinit+0x28>)
 8008b4e:	6223      	str	r3, [r4, #32]
 8008b50:	4b04      	ldr	r3, [pc, #16]	; (8008b64 <__sinit+0x2c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1f5      	bne.n	8008b44 <__sinit+0xc>
 8008b58:	f7ff ffc4 	bl	8008ae4 <global_stdio_init.part.0>
 8008b5c:	e7f2      	b.n	8008b44 <__sinit+0xc>
 8008b5e:	bf00      	nop
 8008b60:	08008aa5 	.word	0x08008aa5
 8008b64:	20000a84 	.word	0x20000a84

08008b68 <_fwalk_sglue>:
 8008b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	4688      	mov	r8, r1
 8008b70:	4614      	mov	r4, r2
 8008b72:	2600      	movs	r6, #0
 8008b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b78:	f1b9 0901 	subs.w	r9, r9, #1
 8008b7c:	d505      	bpl.n	8008b8a <_fwalk_sglue+0x22>
 8008b7e:	6824      	ldr	r4, [r4, #0]
 8008b80:	2c00      	cmp	r4, #0
 8008b82:	d1f7      	bne.n	8008b74 <_fwalk_sglue+0xc>
 8008b84:	4630      	mov	r0, r6
 8008b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b8a:	89ab      	ldrh	r3, [r5, #12]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d907      	bls.n	8008ba0 <_fwalk_sglue+0x38>
 8008b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b94:	3301      	adds	r3, #1
 8008b96:	d003      	beq.n	8008ba0 <_fwalk_sglue+0x38>
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	47c0      	blx	r8
 8008b9e:	4306      	orrs	r6, r0
 8008ba0:	3568      	adds	r5, #104	; 0x68
 8008ba2:	e7e9      	b.n	8008b78 <_fwalk_sglue+0x10>

08008ba4 <siprintf>:
 8008ba4:	b40e      	push	{r1, r2, r3}
 8008ba6:	b500      	push	{lr}
 8008ba8:	b09c      	sub	sp, #112	; 0x70
 8008baa:	ab1d      	add	r3, sp, #116	; 0x74
 8008bac:	9002      	str	r0, [sp, #8]
 8008bae:	9006      	str	r0, [sp, #24]
 8008bb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bb4:	4809      	ldr	r0, [pc, #36]	; (8008bdc <siprintf+0x38>)
 8008bb6:	9107      	str	r1, [sp, #28]
 8008bb8:	9104      	str	r1, [sp, #16]
 8008bba:	4909      	ldr	r1, [pc, #36]	; (8008be0 <siprintf+0x3c>)
 8008bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bc0:	9105      	str	r1, [sp, #20]
 8008bc2:	6800      	ldr	r0, [r0, #0]
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	a902      	add	r1, sp, #8
 8008bc8:	f001 fc22 	bl	800a410 <_svfiprintf_r>
 8008bcc:	9b02      	ldr	r3, [sp, #8]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	701a      	strb	r2, [r3, #0]
 8008bd2:	b01c      	add	sp, #112	; 0x70
 8008bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bd8:	b003      	add	sp, #12
 8008bda:	4770      	bx	lr
 8008bdc:	20000080 	.word	0x20000080
 8008be0:	ffff0208 	.word	0xffff0208

08008be4 <__sread>:
 8008be4:	b510      	push	{r4, lr}
 8008be6:	460c      	mov	r4, r1
 8008be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bec:	f000 f86c 	bl	8008cc8 <_read_r>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	bfab      	itete	ge
 8008bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8008bf8:	181b      	addge	r3, r3, r0
 8008bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bfe:	bfac      	ite	ge
 8008c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c02:	81a3      	strhlt	r3, [r4, #12]
 8008c04:	bd10      	pop	{r4, pc}

08008c06 <__swrite>:
 8008c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0a:	461f      	mov	r7, r3
 8008c0c:	898b      	ldrh	r3, [r1, #12]
 8008c0e:	05db      	lsls	r3, r3, #23
 8008c10:	4605      	mov	r5, r0
 8008c12:	460c      	mov	r4, r1
 8008c14:	4616      	mov	r6, r2
 8008c16:	d505      	bpl.n	8008c24 <__swrite+0x1e>
 8008c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f000 f840 	bl	8008ca4 <_lseek_r>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c2e:	81a3      	strh	r3, [r4, #12]
 8008c30:	4632      	mov	r2, r6
 8008c32:	463b      	mov	r3, r7
 8008c34:	4628      	mov	r0, r5
 8008c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3a:	f000 b857 	b.w	8008cec <_write_r>

08008c3e <__sseek>:
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	460c      	mov	r4, r1
 8008c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c46:	f000 f82d 	bl	8008ca4 <_lseek_r>
 8008c4a:	1c43      	adds	r3, r0, #1
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	bf15      	itete	ne
 8008c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c5a:	81a3      	strheq	r3, [r4, #12]
 8008c5c:	bf18      	it	ne
 8008c5e:	81a3      	strhne	r3, [r4, #12]
 8008c60:	bd10      	pop	{r4, pc}

08008c62 <__sclose>:
 8008c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c66:	f000 b80d 	b.w	8008c84 <_close_r>

08008c6a <memset>:
 8008c6a:	4402      	add	r2, r0
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d100      	bne.n	8008c74 <memset+0xa>
 8008c72:	4770      	bx	lr
 8008c74:	f803 1b01 	strb.w	r1, [r3], #1
 8008c78:	e7f9      	b.n	8008c6e <memset+0x4>
	...

08008c7c <_localeconv_r>:
 8008c7c:	4800      	ldr	r0, [pc, #0]	; (8008c80 <_localeconv_r+0x4>)
 8008c7e:	4770      	bx	lr
 8008c80:	20000174 	.word	0x20000174

08008c84 <_close_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	4d06      	ldr	r5, [pc, #24]	; (8008ca0 <_close_r+0x1c>)
 8008c88:	2300      	movs	r3, #0
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	4608      	mov	r0, r1
 8008c8e:	602b      	str	r3, [r5, #0]
 8008c90:	f7f9 fc8b 	bl	80025aa <_close>
 8008c94:	1c43      	adds	r3, r0, #1
 8008c96:	d102      	bne.n	8008c9e <_close_r+0x1a>
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	b103      	cbz	r3, 8008c9e <_close_r+0x1a>
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	20000a88 	.word	0x20000a88

08008ca4 <_lseek_r>:
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	4d07      	ldr	r5, [pc, #28]	; (8008cc4 <_lseek_r+0x20>)
 8008ca8:	4604      	mov	r4, r0
 8008caa:	4608      	mov	r0, r1
 8008cac:	4611      	mov	r1, r2
 8008cae:	2200      	movs	r2, #0
 8008cb0:	602a      	str	r2, [r5, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	f7f9 fca0 	bl	80025f8 <_lseek>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d102      	bne.n	8008cc2 <_lseek_r+0x1e>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	b103      	cbz	r3, 8008cc2 <_lseek_r+0x1e>
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	20000a88 	.word	0x20000a88

08008cc8 <_read_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	4d07      	ldr	r5, [pc, #28]	; (8008ce8 <_read_r+0x20>)
 8008ccc:	4604      	mov	r4, r0
 8008cce:	4608      	mov	r0, r1
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	602a      	str	r2, [r5, #0]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f7f9 fc2e 	bl	8002538 <_read>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d102      	bne.n	8008ce6 <_read_r+0x1e>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	b103      	cbz	r3, 8008ce6 <_read_r+0x1e>
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}
 8008ce8:	20000a88 	.word	0x20000a88

08008cec <_write_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d07      	ldr	r5, [pc, #28]	; (8008d0c <_write_r+0x20>)
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	4608      	mov	r0, r1
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	602a      	str	r2, [r5, #0]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f7f9 fc39 	bl	8002572 <_write>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	d102      	bne.n	8008d0a <_write_r+0x1e>
 8008d04:	682b      	ldr	r3, [r5, #0]
 8008d06:	b103      	cbz	r3, 8008d0a <_write_r+0x1e>
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	20000a88 	.word	0x20000a88

08008d10 <__errno>:
 8008d10:	4b01      	ldr	r3, [pc, #4]	; (8008d18 <__errno+0x8>)
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	20000080 	.word	0x20000080

08008d1c <__libc_init_array>:
 8008d1c:	b570      	push	{r4, r5, r6, lr}
 8008d1e:	4d0d      	ldr	r5, [pc, #52]	; (8008d54 <__libc_init_array+0x38>)
 8008d20:	4c0d      	ldr	r4, [pc, #52]	; (8008d58 <__libc_init_array+0x3c>)
 8008d22:	1b64      	subs	r4, r4, r5
 8008d24:	10a4      	asrs	r4, r4, #2
 8008d26:	2600      	movs	r6, #0
 8008d28:	42a6      	cmp	r6, r4
 8008d2a:	d109      	bne.n	8008d40 <__libc_init_array+0x24>
 8008d2c:	4d0b      	ldr	r5, [pc, #44]	; (8008d5c <__libc_init_array+0x40>)
 8008d2e:	4c0c      	ldr	r4, [pc, #48]	; (8008d60 <__libc_init_array+0x44>)
 8008d30:	f002 f8de 	bl	800aef0 <_init>
 8008d34:	1b64      	subs	r4, r4, r5
 8008d36:	10a4      	asrs	r4, r4, #2
 8008d38:	2600      	movs	r6, #0
 8008d3a:	42a6      	cmp	r6, r4
 8008d3c:	d105      	bne.n	8008d4a <__libc_init_array+0x2e>
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d44:	4798      	blx	r3
 8008d46:	3601      	adds	r6, #1
 8008d48:	e7ee      	b.n	8008d28 <__libc_init_array+0xc>
 8008d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d4e:	4798      	blx	r3
 8008d50:	3601      	adds	r6, #1
 8008d52:	e7f2      	b.n	8008d3a <__libc_init_array+0x1e>
 8008d54:	0800b2c4 	.word	0x0800b2c4
 8008d58:	0800b2c4 	.word	0x0800b2c4
 8008d5c:	0800b2c4 	.word	0x0800b2c4
 8008d60:	0800b2c8 	.word	0x0800b2c8

08008d64 <__retarget_lock_init_recursive>:
 8008d64:	4770      	bx	lr

08008d66 <__retarget_lock_acquire_recursive>:
 8008d66:	4770      	bx	lr

08008d68 <__retarget_lock_release_recursive>:
 8008d68:	4770      	bx	lr

08008d6a <quorem>:
 8008d6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6e:	6903      	ldr	r3, [r0, #16]
 8008d70:	690c      	ldr	r4, [r1, #16]
 8008d72:	42a3      	cmp	r3, r4
 8008d74:	4607      	mov	r7, r0
 8008d76:	db7e      	blt.n	8008e76 <quorem+0x10c>
 8008d78:	3c01      	subs	r4, #1
 8008d7a:	f101 0814 	add.w	r8, r1, #20
 8008d7e:	f100 0514 	add.w	r5, r0, #20
 8008d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d90:	3301      	adds	r3, #1
 8008d92:	429a      	cmp	r2, r3
 8008d94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008da0:	d331      	bcc.n	8008e06 <quorem+0x9c>
 8008da2:	f04f 0e00 	mov.w	lr, #0
 8008da6:	4640      	mov	r0, r8
 8008da8:	46ac      	mov	ip, r5
 8008daa:	46f2      	mov	sl, lr
 8008dac:	f850 2b04 	ldr.w	r2, [r0], #4
 8008db0:	b293      	uxth	r3, r2
 8008db2:	fb06 e303 	mla	r3, r6, r3, lr
 8008db6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008dba:	0c1a      	lsrs	r2, r3, #16
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	ebaa 0303 	sub.w	r3, sl, r3
 8008dc2:	f8dc a000 	ldr.w	sl, [ip]
 8008dc6:	fa13 f38a 	uxtah	r3, r3, sl
 8008dca:	fb06 220e 	mla	r2, r6, lr, r2
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	9b00      	ldr	r3, [sp, #0]
 8008dd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008dd6:	b292      	uxth	r2, r2
 8008dd8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ddc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008de0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008de4:	4581      	cmp	r9, r0
 8008de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dea:	f84c 3b04 	str.w	r3, [ip], #4
 8008dee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008df2:	d2db      	bcs.n	8008dac <quorem+0x42>
 8008df4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008df8:	b92b      	cbnz	r3, 8008e06 <quorem+0x9c>
 8008dfa:	9b01      	ldr	r3, [sp, #4]
 8008dfc:	3b04      	subs	r3, #4
 8008dfe:	429d      	cmp	r5, r3
 8008e00:	461a      	mov	r2, r3
 8008e02:	d32c      	bcc.n	8008e5e <quorem+0xf4>
 8008e04:	613c      	str	r4, [r7, #16]
 8008e06:	4638      	mov	r0, r7
 8008e08:	f001 f9a8 	bl	800a15c <__mcmp>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	db22      	blt.n	8008e56 <quorem+0xec>
 8008e10:	3601      	adds	r6, #1
 8008e12:	4629      	mov	r1, r5
 8008e14:	2000      	movs	r0, #0
 8008e16:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e1a:	f8d1 c000 	ldr.w	ip, [r1]
 8008e1e:	b293      	uxth	r3, r2
 8008e20:	1ac3      	subs	r3, r0, r3
 8008e22:	0c12      	lsrs	r2, r2, #16
 8008e24:	fa13 f38c 	uxtah	r3, r3, ip
 8008e28:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008e2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e36:	45c1      	cmp	r9, r8
 8008e38:	f841 3b04 	str.w	r3, [r1], #4
 8008e3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008e40:	d2e9      	bcs.n	8008e16 <quorem+0xac>
 8008e42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e4a:	b922      	cbnz	r2, 8008e56 <quorem+0xec>
 8008e4c:	3b04      	subs	r3, #4
 8008e4e:	429d      	cmp	r5, r3
 8008e50:	461a      	mov	r2, r3
 8008e52:	d30a      	bcc.n	8008e6a <quorem+0x100>
 8008e54:	613c      	str	r4, [r7, #16]
 8008e56:	4630      	mov	r0, r6
 8008e58:	b003      	add	sp, #12
 8008e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5e:	6812      	ldr	r2, [r2, #0]
 8008e60:	3b04      	subs	r3, #4
 8008e62:	2a00      	cmp	r2, #0
 8008e64:	d1ce      	bne.n	8008e04 <quorem+0x9a>
 8008e66:	3c01      	subs	r4, #1
 8008e68:	e7c9      	b.n	8008dfe <quorem+0x94>
 8008e6a:	6812      	ldr	r2, [r2, #0]
 8008e6c:	3b04      	subs	r3, #4
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	d1f0      	bne.n	8008e54 <quorem+0xea>
 8008e72:	3c01      	subs	r4, #1
 8008e74:	e7eb      	b.n	8008e4e <quorem+0xe4>
 8008e76:	2000      	movs	r0, #0
 8008e78:	e7ee      	b.n	8008e58 <quorem+0xee>
 8008e7a:	0000      	movs	r0, r0
 8008e7c:	0000      	movs	r0, r0
	...

08008e80 <_dtoa_r>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	ed2d 8b04 	vpush	{d8-d9}
 8008e88:	69c5      	ldr	r5, [r0, #28]
 8008e8a:	b093      	sub	sp, #76	; 0x4c
 8008e8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008e90:	ec57 6b10 	vmov	r6, r7, d0
 8008e94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e98:	9107      	str	r1, [sp, #28]
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	920a      	str	r2, [sp, #40]	; 0x28
 8008e9e:	930d      	str	r3, [sp, #52]	; 0x34
 8008ea0:	b975      	cbnz	r5, 8008ec0 <_dtoa_r+0x40>
 8008ea2:	2010      	movs	r0, #16
 8008ea4:	f000 fe2a 	bl	8009afc <malloc>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	61e0      	str	r0, [r4, #28]
 8008eac:	b920      	cbnz	r0, 8008eb8 <_dtoa_r+0x38>
 8008eae:	4bae      	ldr	r3, [pc, #696]	; (8009168 <_dtoa_r+0x2e8>)
 8008eb0:	21ef      	movs	r1, #239	; 0xef
 8008eb2:	48ae      	ldr	r0, [pc, #696]	; (800916c <_dtoa_r+0x2ec>)
 8008eb4:	f001 fc90 	bl	800a7d8 <__assert_func>
 8008eb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ebc:	6005      	str	r5, [r0, #0]
 8008ebe:	60c5      	str	r5, [r0, #12]
 8008ec0:	69e3      	ldr	r3, [r4, #28]
 8008ec2:	6819      	ldr	r1, [r3, #0]
 8008ec4:	b151      	cbz	r1, 8008edc <_dtoa_r+0x5c>
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	604a      	str	r2, [r1, #4]
 8008eca:	2301      	movs	r3, #1
 8008ecc:	4093      	lsls	r3, r2
 8008ece:	608b      	str	r3, [r1, #8]
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f000 ff07 	bl	8009ce4 <_Bfree>
 8008ed6:	69e3      	ldr	r3, [r4, #28]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	1e3b      	subs	r3, r7, #0
 8008ede:	bfbb      	ittet	lt
 8008ee0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ee4:	9303      	strlt	r3, [sp, #12]
 8008ee6:	2300      	movge	r3, #0
 8008ee8:	2201      	movlt	r2, #1
 8008eea:	bfac      	ite	ge
 8008eec:	f8c8 3000 	strge.w	r3, [r8]
 8008ef0:	f8c8 2000 	strlt.w	r2, [r8]
 8008ef4:	4b9e      	ldr	r3, [pc, #632]	; (8009170 <_dtoa_r+0x2f0>)
 8008ef6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008efa:	ea33 0308 	bics.w	r3, r3, r8
 8008efe:	d11b      	bne.n	8008f38 <_dtoa_r+0xb8>
 8008f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f02:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008f0c:	4333      	orrs	r3, r6
 8008f0e:	f000 8593 	beq.w	8009a38 <_dtoa_r+0xbb8>
 8008f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f14:	b963      	cbnz	r3, 8008f30 <_dtoa_r+0xb0>
 8008f16:	4b97      	ldr	r3, [pc, #604]	; (8009174 <_dtoa_r+0x2f4>)
 8008f18:	e027      	b.n	8008f6a <_dtoa_r+0xea>
 8008f1a:	4b97      	ldr	r3, [pc, #604]	; (8009178 <_dtoa_r+0x2f8>)
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	9800      	ldr	r0, [sp, #0]
 8008f26:	b013      	add	sp, #76	; 0x4c
 8008f28:	ecbd 8b04 	vpop	{d8-d9}
 8008f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f30:	4b90      	ldr	r3, [pc, #576]	; (8009174 <_dtoa_r+0x2f4>)
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	3303      	adds	r3, #3
 8008f36:	e7f3      	b.n	8008f20 <_dtoa_r+0xa0>
 8008f38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	ec51 0b17 	vmov	r0, r1, d7
 8008f42:	eeb0 8a47 	vmov.f32	s16, s14
 8008f46:	eef0 8a67 	vmov.f32	s17, s15
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f7f7 fddc 	bl	8000b08 <__aeabi_dcmpeq>
 8008f50:	4681      	mov	r9, r0
 8008f52:	b160      	cbz	r0, 8008f6e <_dtoa_r+0xee>
 8008f54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f56:	2301      	movs	r3, #1
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 8568 	beq.w	8009a32 <_dtoa_r+0xbb2>
 8008f62:	4b86      	ldr	r3, [pc, #536]	; (800917c <_dtoa_r+0x2fc>)
 8008f64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	e7da      	b.n	8008f24 <_dtoa_r+0xa4>
 8008f6e:	aa10      	add	r2, sp, #64	; 0x40
 8008f70:	a911      	add	r1, sp, #68	; 0x44
 8008f72:	4620      	mov	r0, r4
 8008f74:	eeb0 0a48 	vmov.f32	s0, s16
 8008f78:	eef0 0a68 	vmov.f32	s1, s17
 8008f7c:	f001 f994 	bl	800a2a8 <__d2b>
 8008f80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008f84:	4682      	mov	sl, r0
 8008f86:	2d00      	cmp	r5, #0
 8008f88:	d07f      	beq.n	800908a <_dtoa_r+0x20a>
 8008f8a:	ee18 3a90 	vmov	r3, s17
 8008f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008f96:	ec51 0b18 	vmov	r0, r1, d8
 8008f9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008fa2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	2200      	movs	r2, #0
 8008faa:	4b75      	ldr	r3, [pc, #468]	; (8009180 <_dtoa_r+0x300>)
 8008fac:	f7f7 f98c 	bl	80002c8 <__aeabi_dsub>
 8008fb0:	a367      	add	r3, pc, #412	; (adr r3, 8009150 <_dtoa_r+0x2d0>)
 8008fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb6:	f7f7 fb3f 	bl	8000638 <__aeabi_dmul>
 8008fba:	a367      	add	r3, pc, #412	; (adr r3, 8009158 <_dtoa_r+0x2d8>)
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	f7f7 f984 	bl	80002cc <__adddf3>
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	460f      	mov	r7, r1
 8008fca:	f7f7 facb 	bl	8000564 <__aeabi_i2d>
 8008fce:	a364      	add	r3, pc, #400	; (adr r3, 8009160 <_dtoa_r+0x2e0>)
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f7f7 fb30 	bl	8000638 <__aeabi_dmul>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4630      	mov	r0, r6
 8008fde:	4639      	mov	r1, r7
 8008fe0:	f7f7 f974 	bl	80002cc <__adddf3>
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	460f      	mov	r7, r1
 8008fe8:	f7f7 fdd6 	bl	8000b98 <__aeabi_d2iz>
 8008fec:	2200      	movs	r2, #0
 8008fee:	4683      	mov	fp, r0
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	4639      	mov	r1, r7
 8008ff6:	f7f7 fd91 	bl	8000b1c <__aeabi_dcmplt>
 8008ffa:	b148      	cbz	r0, 8009010 <_dtoa_r+0x190>
 8008ffc:	4658      	mov	r0, fp
 8008ffe:	f7f7 fab1 	bl	8000564 <__aeabi_i2d>
 8009002:	4632      	mov	r2, r6
 8009004:	463b      	mov	r3, r7
 8009006:	f7f7 fd7f 	bl	8000b08 <__aeabi_dcmpeq>
 800900a:	b908      	cbnz	r0, 8009010 <_dtoa_r+0x190>
 800900c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009010:	f1bb 0f16 	cmp.w	fp, #22
 8009014:	d857      	bhi.n	80090c6 <_dtoa_r+0x246>
 8009016:	4b5b      	ldr	r3, [pc, #364]	; (8009184 <_dtoa_r+0x304>)
 8009018:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800901c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009020:	ec51 0b18 	vmov	r0, r1, d8
 8009024:	f7f7 fd7a 	bl	8000b1c <__aeabi_dcmplt>
 8009028:	2800      	cmp	r0, #0
 800902a:	d04e      	beq.n	80090ca <_dtoa_r+0x24a>
 800902c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009030:	2300      	movs	r3, #0
 8009032:	930c      	str	r3, [sp, #48]	; 0x30
 8009034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009036:	1b5b      	subs	r3, r3, r5
 8009038:	1e5a      	subs	r2, r3, #1
 800903a:	bf45      	ittet	mi
 800903c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009040:	9305      	strmi	r3, [sp, #20]
 8009042:	2300      	movpl	r3, #0
 8009044:	2300      	movmi	r3, #0
 8009046:	9206      	str	r2, [sp, #24]
 8009048:	bf54      	ite	pl
 800904a:	9305      	strpl	r3, [sp, #20]
 800904c:	9306      	strmi	r3, [sp, #24]
 800904e:	f1bb 0f00 	cmp.w	fp, #0
 8009052:	db3c      	blt.n	80090ce <_dtoa_r+0x24e>
 8009054:	9b06      	ldr	r3, [sp, #24]
 8009056:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800905a:	445b      	add	r3, fp
 800905c:	9306      	str	r3, [sp, #24]
 800905e:	2300      	movs	r3, #0
 8009060:	9308      	str	r3, [sp, #32]
 8009062:	9b07      	ldr	r3, [sp, #28]
 8009064:	2b09      	cmp	r3, #9
 8009066:	d868      	bhi.n	800913a <_dtoa_r+0x2ba>
 8009068:	2b05      	cmp	r3, #5
 800906a:	bfc4      	itt	gt
 800906c:	3b04      	subgt	r3, #4
 800906e:	9307      	strgt	r3, [sp, #28]
 8009070:	9b07      	ldr	r3, [sp, #28]
 8009072:	f1a3 0302 	sub.w	r3, r3, #2
 8009076:	bfcc      	ite	gt
 8009078:	2500      	movgt	r5, #0
 800907a:	2501      	movle	r5, #1
 800907c:	2b03      	cmp	r3, #3
 800907e:	f200 8085 	bhi.w	800918c <_dtoa_r+0x30c>
 8009082:	e8df f003 	tbb	[pc, r3]
 8009086:	3b2e      	.short	0x3b2e
 8009088:	5839      	.short	0x5839
 800908a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800908e:	441d      	add	r5, r3
 8009090:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009094:	2b20      	cmp	r3, #32
 8009096:	bfc1      	itttt	gt
 8009098:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800909c:	fa08 f803 	lslgt.w	r8, r8, r3
 80090a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80090a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80090a8:	bfd6      	itet	le
 80090aa:	f1c3 0320 	rsble	r3, r3, #32
 80090ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80090b2:	fa06 f003 	lslle.w	r0, r6, r3
 80090b6:	f7f7 fa45 	bl	8000544 <__aeabi_ui2d>
 80090ba:	2201      	movs	r2, #1
 80090bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80090c0:	3d01      	subs	r5, #1
 80090c2:	920e      	str	r2, [sp, #56]	; 0x38
 80090c4:	e76f      	b.n	8008fa6 <_dtoa_r+0x126>
 80090c6:	2301      	movs	r3, #1
 80090c8:	e7b3      	b.n	8009032 <_dtoa_r+0x1b2>
 80090ca:	900c      	str	r0, [sp, #48]	; 0x30
 80090cc:	e7b2      	b.n	8009034 <_dtoa_r+0x1b4>
 80090ce:	9b05      	ldr	r3, [sp, #20]
 80090d0:	eba3 030b 	sub.w	r3, r3, fp
 80090d4:	9305      	str	r3, [sp, #20]
 80090d6:	f1cb 0300 	rsb	r3, fp, #0
 80090da:	9308      	str	r3, [sp, #32]
 80090dc:	2300      	movs	r3, #0
 80090de:	930b      	str	r3, [sp, #44]	; 0x2c
 80090e0:	e7bf      	b.n	8009062 <_dtoa_r+0x1e2>
 80090e2:	2300      	movs	r3, #0
 80090e4:	9309      	str	r3, [sp, #36]	; 0x24
 80090e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	dc52      	bgt.n	8009192 <_dtoa_r+0x312>
 80090ec:	2301      	movs	r3, #1
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	9304      	str	r3, [sp, #16]
 80090f2:	461a      	mov	r2, r3
 80090f4:	920a      	str	r2, [sp, #40]	; 0x28
 80090f6:	e00b      	b.n	8009110 <_dtoa_r+0x290>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e7f3      	b.n	80090e4 <_dtoa_r+0x264>
 80090fc:	2300      	movs	r3, #0
 80090fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009102:	445b      	add	r3, fp
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	3301      	adds	r3, #1
 8009108:	2b01      	cmp	r3, #1
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	bfb8      	it	lt
 800910e:	2301      	movlt	r3, #1
 8009110:	69e0      	ldr	r0, [r4, #28]
 8009112:	2100      	movs	r1, #0
 8009114:	2204      	movs	r2, #4
 8009116:	f102 0614 	add.w	r6, r2, #20
 800911a:	429e      	cmp	r6, r3
 800911c:	d93d      	bls.n	800919a <_dtoa_r+0x31a>
 800911e:	6041      	str	r1, [r0, #4]
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fd9f 	bl	8009c64 <_Balloc>
 8009126:	9000      	str	r0, [sp, #0]
 8009128:	2800      	cmp	r0, #0
 800912a:	d139      	bne.n	80091a0 <_dtoa_r+0x320>
 800912c:	4b16      	ldr	r3, [pc, #88]	; (8009188 <_dtoa_r+0x308>)
 800912e:	4602      	mov	r2, r0
 8009130:	f240 11af 	movw	r1, #431	; 0x1af
 8009134:	e6bd      	b.n	8008eb2 <_dtoa_r+0x32>
 8009136:	2301      	movs	r3, #1
 8009138:	e7e1      	b.n	80090fe <_dtoa_r+0x27e>
 800913a:	2501      	movs	r5, #1
 800913c:	2300      	movs	r3, #0
 800913e:	9307      	str	r3, [sp, #28]
 8009140:	9509      	str	r5, [sp, #36]	; 0x24
 8009142:	f04f 33ff 	mov.w	r3, #4294967295
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	2200      	movs	r2, #0
 800914c:	2312      	movs	r3, #18
 800914e:	e7d1      	b.n	80090f4 <_dtoa_r+0x274>
 8009150:	636f4361 	.word	0x636f4361
 8009154:	3fd287a7 	.word	0x3fd287a7
 8009158:	8b60c8b3 	.word	0x8b60c8b3
 800915c:	3fc68a28 	.word	0x3fc68a28
 8009160:	509f79fb 	.word	0x509f79fb
 8009164:	3fd34413 	.word	0x3fd34413
 8009168:	0800b08a 	.word	0x0800b08a
 800916c:	0800b0a1 	.word	0x0800b0a1
 8009170:	7ff00000 	.word	0x7ff00000
 8009174:	0800b086 	.word	0x0800b086
 8009178:	0800b07d 	.word	0x0800b07d
 800917c:	0800b05a 	.word	0x0800b05a
 8009180:	3ff80000 	.word	0x3ff80000
 8009184:	0800b190 	.word	0x0800b190
 8009188:	0800b0f9 	.word	0x0800b0f9
 800918c:	2301      	movs	r3, #1
 800918e:	9309      	str	r3, [sp, #36]	; 0x24
 8009190:	e7d7      	b.n	8009142 <_dtoa_r+0x2c2>
 8009192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	9304      	str	r3, [sp, #16]
 8009198:	e7ba      	b.n	8009110 <_dtoa_r+0x290>
 800919a:	3101      	adds	r1, #1
 800919c:	0052      	lsls	r2, r2, #1
 800919e:	e7ba      	b.n	8009116 <_dtoa_r+0x296>
 80091a0:	69e3      	ldr	r3, [r4, #28]
 80091a2:	9a00      	ldr	r2, [sp, #0]
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	2b0e      	cmp	r3, #14
 80091aa:	f200 80a8 	bhi.w	80092fe <_dtoa_r+0x47e>
 80091ae:	2d00      	cmp	r5, #0
 80091b0:	f000 80a5 	beq.w	80092fe <_dtoa_r+0x47e>
 80091b4:	f1bb 0f00 	cmp.w	fp, #0
 80091b8:	dd38      	ble.n	800922c <_dtoa_r+0x3ac>
 80091ba:	4bc0      	ldr	r3, [pc, #768]	; (80094bc <_dtoa_r+0x63c>)
 80091bc:	f00b 020f 	and.w	r2, fp, #15
 80091c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80091c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80091cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80091d0:	d019      	beq.n	8009206 <_dtoa_r+0x386>
 80091d2:	4bbb      	ldr	r3, [pc, #748]	; (80094c0 <_dtoa_r+0x640>)
 80091d4:	ec51 0b18 	vmov	r0, r1, d8
 80091d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091dc:	f7f7 fb56 	bl	800088c <__aeabi_ddiv>
 80091e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091e4:	f008 080f 	and.w	r8, r8, #15
 80091e8:	2503      	movs	r5, #3
 80091ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80094c0 <_dtoa_r+0x640>
 80091ee:	f1b8 0f00 	cmp.w	r8, #0
 80091f2:	d10a      	bne.n	800920a <_dtoa_r+0x38a>
 80091f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091f8:	4632      	mov	r2, r6
 80091fa:	463b      	mov	r3, r7
 80091fc:	f7f7 fb46 	bl	800088c <__aeabi_ddiv>
 8009200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009204:	e02b      	b.n	800925e <_dtoa_r+0x3de>
 8009206:	2502      	movs	r5, #2
 8009208:	e7ef      	b.n	80091ea <_dtoa_r+0x36a>
 800920a:	f018 0f01 	tst.w	r8, #1
 800920e:	d008      	beq.n	8009222 <_dtoa_r+0x3a2>
 8009210:	4630      	mov	r0, r6
 8009212:	4639      	mov	r1, r7
 8009214:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009218:	f7f7 fa0e 	bl	8000638 <__aeabi_dmul>
 800921c:	3501      	adds	r5, #1
 800921e:	4606      	mov	r6, r0
 8009220:	460f      	mov	r7, r1
 8009222:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009226:	f109 0908 	add.w	r9, r9, #8
 800922a:	e7e0      	b.n	80091ee <_dtoa_r+0x36e>
 800922c:	f000 809f 	beq.w	800936e <_dtoa_r+0x4ee>
 8009230:	f1cb 0600 	rsb	r6, fp, #0
 8009234:	4ba1      	ldr	r3, [pc, #644]	; (80094bc <_dtoa_r+0x63c>)
 8009236:	4fa2      	ldr	r7, [pc, #648]	; (80094c0 <_dtoa_r+0x640>)
 8009238:	f006 020f 	and.w	r2, r6, #15
 800923c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	ec51 0b18 	vmov	r0, r1, d8
 8009248:	f7f7 f9f6 	bl	8000638 <__aeabi_dmul>
 800924c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009250:	1136      	asrs	r6, r6, #4
 8009252:	2300      	movs	r3, #0
 8009254:	2502      	movs	r5, #2
 8009256:	2e00      	cmp	r6, #0
 8009258:	d17e      	bne.n	8009358 <_dtoa_r+0x4d8>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1d0      	bne.n	8009200 <_dtoa_r+0x380>
 800925e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009260:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 8084 	beq.w	8009372 <_dtoa_r+0x4f2>
 800926a:	4b96      	ldr	r3, [pc, #600]	; (80094c4 <_dtoa_r+0x644>)
 800926c:	2200      	movs	r2, #0
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	f7f7 fc53 	bl	8000b1c <__aeabi_dcmplt>
 8009276:	2800      	cmp	r0, #0
 8009278:	d07b      	beq.n	8009372 <_dtoa_r+0x4f2>
 800927a:	9b04      	ldr	r3, [sp, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d078      	beq.n	8009372 <_dtoa_r+0x4f2>
 8009280:	9b01      	ldr	r3, [sp, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	dd39      	ble.n	80092fa <_dtoa_r+0x47a>
 8009286:	4b90      	ldr	r3, [pc, #576]	; (80094c8 <_dtoa_r+0x648>)
 8009288:	2200      	movs	r2, #0
 800928a:	4640      	mov	r0, r8
 800928c:	4649      	mov	r1, r9
 800928e:	f7f7 f9d3 	bl	8000638 <__aeabi_dmul>
 8009292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009296:	9e01      	ldr	r6, [sp, #4]
 8009298:	f10b 37ff 	add.w	r7, fp, #4294967295
 800929c:	3501      	adds	r5, #1
 800929e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80092a2:	4628      	mov	r0, r5
 80092a4:	f7f7 f95e 	bl	8000564 <__aeabi_i2d>
 80092a8:	4642      	mov	r2, r8
 80092aa:	464b      	mov	r3, r9
 80092ac:	f7f7 f9c4 	bl	8000638 <__aeabi_dmul>
 80092b0:	4b86      	ldr	r3, [pc, #536]	; (80094cc <_dtoa_r+0x64c>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	f7f7 f80a 	bl	80002cc <__adddf3>
 80092b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80092bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092c0:	9303      	str	r3, [sp, #12]
 80092c2:	2e00      	cmp	r6, #0
 80092c4:	d158      	bne.n	8009378 <_dtoa_r+0x4f8>
 80092c6:	4b82      	ldr	r3, [pc, #520]	; (80094d0 <_dtoa_r+0x650>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	4640      	mov	r0, r8
 80092cc:	4649      	mov	r1, r9
 80092ce:	f7f6 fffb 	bl	80002c8 <__aeabi_dsub>
 80092d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092d6:	4680      	mov	r8, r0
 80092d8:	4689      	mov	r9, r1
 80092da:	f7f7 fc3d 	bl	8000b58 <__aeabi_dcmpgt>
 80092de:	2800      	cmp	r0, #0
 80092e0:	f040 8296 	bne.w	8009810 <_dtoa_r+0x990>
 80092e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80092e8:	4640      	mov	r0, r8
 80092ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092ee:	4649      	mov	r1, r9
 80092f0:	f7f7 fc14 	bl	8000b1c <__aeabi_dcmplt>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	f040 8289 	bne.w	800980c <_dtoa_r+0x98c>
 80092fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80092fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009300:	2b00      	cmp	r3, #0
 8009302:	f2c0 814e 	blt.w	80095a2 <_dtoa_r+0x722>
 8009306:	f1bb 0f0e 	cmp.w	fp, #14
 800930a:	f300 814a 	bgt.w	80095a2 <_dtoa_r+0x722>
 800930e:	4b6b      	ldr	r3, [pc, #428]	; (80094bc <_dtoa_r+0x63c>)
 8009310:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009314:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800931a:	2b00      	cmp	r3, #0
 800931c:	f280 80dc 	bge.w	80094d8 <_dtoa_r+0x658>
 8009320:	9b04      	ldr	r3, [sp, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	f300 80d8 	bgt.w	80094d8 <_dtoa_r+0x658>
 8009328:	f040 826f 	bne.w	800980a <_dtoa_r+0x98a>
 800932c:	4b68      	ldr	r3, [pc, #416]	; (80094d0 <_dtoa_r+0x650>)
 800932e:	2200      	movs	r2, #0
 8009330:	4640      	mov	r0, r8
 8009332:	4649      	mov	r1, r9
 8009334:	f7f7 f980 	bl	8000638 <__aeabi_dmul>
 8009338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800933c:	f7f7 fc02 	bl	8000b44 <__aeabi_dcmpge>
 8009340:	9e04      	ldr	r6, [sp, #16]
 8009342:	4637      	mov	r7, r6
 8009344:	2800      	cmp	r0, #0
 8009346:	f040 8245 	bne.w	80097d4 <_dtoa_r+0x954>
 800934a:	9d00      	ldr	r5, [sp, #0]
 800934c:	2331      	movs	r3, #49	; 0x31
 800934e:	f805 3b01 	strb.w	r3, [r5], #1
 8009352:	f10b 0b01 	add.w	fp, fp, #1
 8009356:	e241      	b.n	80097dc <_dtoa_r+0x95c>
 8009358:	07f2      	lsls	r2, r6, #31
 800935a:	d505      	bpl.n	8009368 <_dtoa_r+0x4e8>
 800935c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009360:	f7f7 f96a 	bl	8000638 <__aeabi_dmul>
 8009364:	3501      	adds	r5, #1
 8009366:	2301      	movs	r3, #1
 8009368:	1076      	asrs	r6, r6, #1
 800936a:	3708      	adds	r7, #8
 800936c:	e773      	b.n	8009256 <_dtoa_r+0x3d6>
 800936e:	2502      	movs	r5, #2
 8009370:	e775      	b.n	800925e <_dtoa_r+0x3de>
 8009372:	9e04      	ldr	r6, [sp, #16]
 8009374:	465f      	mov	r7, fp
 8009376:	e792      	b.n	800929e <_dtoa_r+0x41e>
 8009378:	9900      	ldr	r1, [sp, #0]
 800937a:	4b50      	ldr	r3, [pc, #320]	; (80094bc <_dtoa_r+0x63c>)
 800937c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009380:	4431      	add	r1, r6
 8009382:	9102      	str	r1, [sp, #8]
 8009384:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009386:	eeb0 9a47 	vmov.f32	s18, s14
 800938a:	eef0 9a67 	vmov.f32	s19, s15
 800938e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009392:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009396:	2900      	cmp	r1, #0
 8009398:	d044      	beq.n	8009424 <_dtoa_r+0x5a4>
 800939a:	494e      	ldr	r1, [pc, #312]	; (80094d4 <_dtoa_r+0x654>)
 800939c:	2000      	movs	r0, #0
 800939e:	f7f7 fa75 	bl	800088c <__aeabi_ddiv>
 80093a2:	ec53 2b19 	vmov	r2, r3, d9
 80093a6:	f7f6 ff8f 	bl	80002c8 <__aeabi_dsub>
 80093aa:	9d00      	ldr	r5, [sp, #0]
 80093ac:	ec41 0b19 	vmov	d9, r0, r1
 80093b0:	4649      	mov	r1, r9
 80093b2:	4640      	mov	r0, r8
 80093b4:	f7f7 fbf0 	bl	8000b98 <__aeabi_d2iz>
 80093b8:	4606      	mov	r6, r0
 80093ba:	f7f7 f8d3 	bl	8000564 <__aeabi_i2d>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	4640      	mov	r0, r8
 80093c4:	4649      	mov	r1, r9
 80093c6:	f7f6 ff7f 	bl	80002c8 <__aeabi_dsub>
 80093ca:	3630      	adds	r6, #48	; 0x30
 80093cc:	f805 6b01 	strb.w	r6, [r5], #1
 80093d0:	ec53 2b19 	vmov	r2, r3, d9
 80093d4:	4680      	mov	r8, r0
 80093d6:	4689      	mov	r9, r1
 80093d8:	f7f7 fba0 	bl	8000b1c <__aeabi_dcmplt>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d164      	bne.n	80094aa <_dtoa_r+0x62a>
 80093e0:	4642      	mov	r2, r8
 80093e2:	464b      	mov	r3, r9
 80093e4:	4937      	ldr	r1, [pc, #220]	; (80094c4 <_dtoa_r+0x644>)
 80093e6:	2000      	movs	r0, #0
 80093e8:	f7f6 ff6e 	bl	80002c8 <__aeabi_dsub>
 80093ec:	ec53 2b19 	vmov	r2, r3, d9
 80093f0:	f7f7 fb94 	bl	8000b1c <__aeabi_dcmplt>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f040 80b6 	bne.w	8009566 <_dtoa_r+0x6e6>
 80093fa:	9b02      	ldr	r3, [sp, #8]
 80093fc:	429d      	cmp	r5, r3
 80093fe:	f43f af7c 	beq.w	80092fa <_dtoa_r+0x47a>
 8009402:	4b31      	ldr	r3, [pc, #196]	; (80094c8 <_dtoa_r+0x648>)
 8009404:	ec51 0b19 	vmov	r0, r1, d9
 8009408:	2200      	movs	r2, #0
 800940a:	f7f7 f915 	bl	8000638 <__aeabi_dmul>
 800940e:	4b2e      	ldr	r3, [pc, #184]	; (80094c8 <_dtoa_r+0x648>)
 8009410:	ec41 0b19 	vmov	d9, r0, r1
 8009414:	2200      	movs	r2, #0
 8009416:	4640      	mov	r0, r8
 8009418:	4649      	mov	r1, r9
 800941a:	f7f7 f90d 	bl	8000638 <__aeabi_dmul>
 800941e:	4680      	mov	r8, r0
 8009420:	4689      	mov	r9, r1
 8009422:	e7c5      	b.n	80093b0 <_dtoa_r+0x530>
 8009424:	ec51 0b17 	vmov	r0, r1, d7
 8009428:	f7f7 f906 	bl	8000638 <__aeabi_dmul>
 800942c:	9b02      	ldr	r3, [sp, #8]
 800942e:	9d00      	ldr	r5, [sp, #0]
 8009430:	930f      	str	r3, [sp, #60]	; 0x3c
 8009432:	ec41 0b19 	vmov	d9, r0, r1
 8009436:	4649      	mov	r1, r9
 8009438:	4640      	mov	r0, r8
 800943a:	f7f7 fbad 	bl	8000b98 <__aeabi_d2iz>
 800943e:	4606      	mov	r6, r0
 8009440:	f7f7 f890 	bl	8000564 <__aeabi_i2d>
 8009444:	3630      	adds	r6, #48	; 0x30
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4640      	mov	r0, r8
 800944c:	4649      	mov	r1, r9
 800944e:	f7f6 ff3b 	bl	80002c8 <__aeabi_dsub>
 8009452:	f805 6b01 	strb.w	r6, [r5], #1
 8009456:	9b02      	ldr	r3, [sp, #8]
 8009458:	429d      	cmp	r5, r3
 800945a:	4680      	mov	r8, r0
 800945c:	4689      	mov	r9, r1
 800945e:	f04f 0200 	mov.w	r2, #0
 8009462:	d124      	bne.n	80094ae <_dtoa_r+0x62e>
 8009464:	4b1b      	ldr	r3, [pc, #108]	; (80094d4 <_dtoa_r+0x654>)
 8009466:	ec51 0b19 	vmov	r0, r1, d9
 800946a:	f7f6 ff2f 	bl	80002cc <__adddf3>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4640      	mov	r0, r8
 8009474:	4649      	mov	r1, r9
 8009476:	f7f7 fb6f 	bl	8000b58 <__aeabi_dcmpgt>
 800947a:	2800      	cmp	r0, #0
 800947c:	d173      	bne.n	8009566 <_dtoa_r+0x6e6>
 800947e:	ec53 2b19 	vmov	r2, r3, d9
 8009482:	4914      	ldr	r1, [pc, #80]	; (80094d4 <_dtoa_r+0x654>)
 8009484:	2000      	movs	r0, #0
 8009486:	f7f6 ff1f 	bl	80002c8 <__aeabi_dsub>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4640      	mov	r0, r8
 8009490:	4649      	mov	r1, r9
 8009492:	f7f7 fb43 	bl	8000b1c <__aeabi_dcmplt>
 8009496:	2800      	cmp	r0, #0
 8009498:	f43f af2f 	beq.w	80092fa <_dtoa_r+0x47a>
 800949c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800949e:	1e6b      	subs	r3, r5, #1
 80094a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80094a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094a6:	2b30      	cmp	r3, #48	; 0x30
 80094a8:	d0f8      	beq.n	800949c <_dtoa_r+0x61c>
 80094aa:	46bb      	mov	fp, r7
 80094ac:	e04a      	b.n	8009544 <_dtoa_r+0x6c4>
 80094ae:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <_dtoa_r+0x648>)
 80094b0:	f7f7 f8c2 	bl	8000638 <__aeabi_dmul>
 80094b4:	4680      	mov	r8, r0
 80094b6:	4689      	mov	r9, r1
 80094b8:	e7bd      	b.n	8009436 <_dtoa_r+0x5b6>
 80094ba:	bf00      	nop
 80094bc:	0800b190 	.word	0x0800b190
 80094c0:	0800b168 	.word	0x0800b168
 80094c4:	3ff00000 	.word	0x3ff00000
 80094c8:	40240000 	.word	0x40240000
 80094cc:	401c0000 	.word	0x401c0000
 80094d0:	40140000 	.word	0x40140000
 80094d4:	3fe00000 	.word	0x3fe00000
 80094d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80094dc:	9d00      	ldr	r5, [sp, #0]
 80094de:	4642      	mov	r2, r8
 80094e0:	464b      	mov	r3, r9
 80094e2:	4630      	mov	r0, r6
 80094e4:	4639      	mov	r1, r7
 80094e6:	f7f7 f9d1 	bl	800088c <__aeabi_ddiv>
 80094ea:	f7f7 fb55 	bl	8000b98 <__aeabi_d2iz>
 80094ee:	9001      	str	r0, [sp, #4]
 80094f0:	f7f7 f838 	bl	8000564 <__aeabi_i2d>
 80094f4:	4642      	mov	r2, r8
 80094f6:	464b      	mov	r3, r9
 80094f8:	f7f7 f89e 	bl	8000638 <__aeabi_dmul>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4630      	mov	r0, r6
 8009502:	4639      	mov	r1, r7
 8009504:	f7f6 fee0 	bl	80002c8 <__aeabi_dsub>
 8009508:	9e01      	ldr	r6, [sp, #4]
 800950a:	9f04      	ldr	r7, [sp, #16]
 800950c:	3630      	adds	r6, #48	; 0x30
 800950e:	f805 6b01 	strb.w	r6, [r5], #1
 8009512:	9e00      	ldr	r6, [sp, #0]
 8009514:	1bae      	subs	r6, r5, r6
 8009516:	42b7      	cmp	r7, r6
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	d134      	bne.n	8009588 <_dtoa_r+0x708>
 800951e:	f7f6 fed5 	bl	80002cc <__adddf3>
 8009522:	4642      	mov	r2, r8
 8009524:	464b      	mov	r3, r9
 8009526:	4606      	mov	r6, r0
 8009528:	460f      	mov	r7, r1
 800952a:	f7f7 fb15 	bl	8000b58 <__aeabi_dcmpgt>
 800952e:	b9c8      	cbnz	r0, 8009564 <_dtoa_r+0x6e4>
 8009530:	4642      	mov	r2, r8
 8009532:	464b      	mov	r3, r9
 8009534:	4630      	mov	r0, r6
 8009536:	4639      	mov	r1, r7
 8009538:	f7f7 fae6 	bl	8000b08 <__aeabi_dcmpeq>
 800953c:	b110      	cbz	r0, 8009544 <_dtoa_r+0x6c4>
 800953e:	9b01      	ldr	r3, [sp, #4]
 8009540:	07db      	lsls	r3, r3, #31
 8009542:	d40f      	bmi.n	8009564 <_dtoa_r+0x6e4>
 8009544:	4651      	mov	r1, sl
 8009546:	4620      	mov	r0, r4
 8009548:	f000 fbcc 	bl	8009ce4 <_Bfree>
 800954c:	2300      	movs	r3, #0
 800954e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009550:	702b      	strb	r3, [r5, #0]
 8009552:	f10b 0301 	add.w	r3, fp, #1
 8009556:	6013      	str	r3, [r2, #0]
 8009558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800955a:	2b00      	cmp	r3, #0
 800955c:	f43f ace2 	beq.w	8008f24 <_dtoa_r+0xa4>
 8009560:	601d      	str	r5, [r3, #0]
 8009562:	e4df      	b.n	8008f24 <_dtoa_r+0xa4>
 8009564:	465f      	mov	r7, fp
 8009566:	462b      	mov	r3, r5
 8009568:	461d      	mov	r5, r3
 800956a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800956e:	2a39      	cmp	r2, #57	; 0x39
 8009570:	d106      	bne.n	8009580 <_dtoa_r+0x700>
 8009572:	9a00      	ldr	r2, [sp, #0]
 8009574:	429a      	cmp	r2, r3
 8009576:	d1f7      	bne.n	8009568 <_dtoa_r+0x6e8>
 8009578:	9900      	ldr	r1, [sp, #0]
 800957a:	2230      	movs	r2, #48	; 0x30
 800957c:	3701      	adds	r7, #1
 800957e:	700a      	strb	r2, [r1, #0]
 8009580:	781a      	ldrb	r2, [r3, #0]
 8009582:	3201      	adds	r2, #1
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	e790      	b.n	80094aa <_dtoa_r+0x62a>
 8009588:	4ba3      	ldr	r3, [pc, #652]	; (8009818 <_dtoa_r+0x998>)
 800958a:	2200      	movs	r2, #0
 800958c:	f7f7 f854 	bl	8000638 <__aeabi_dmul>
 8009590:	2200      	movs	r2, #0
 8009592:	2300      	movs	r3, #0
 8009594:	4606      	mov	r6, r0
 8009596:	460f      	mov	r7, r1
 8009598:	f7f7 fab6 	bl	8000b08 <__aeabi_dcmpeq>
 800959c:	2800      	cmp	r0, #0
 800959e:	d09e      	beq.n	80094de <_dtoa_r+0x65e>
 80095a0:	e7d0      	b.n	8009544 <_dtoa_r+0x6c4>
 80095a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095a4:	2a00      	cmp	r2, #0
 80095a6:	f000 80ca 	beq.w	800973e <_dtoa_r+0x8be>
 80095aa:	9a07      	ldr	r2, [sp, #28]
 80095ac:	2a01      	cmp	r2, #1
 80095ae:	f300 80ad 	bgt.w	800970c <_dtoa_r+0x88c>
 80095b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	f000 80a5 	beq.w	8009704 <_dtoa_r+0x884>
 80095ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095be:	9e08      	ldr	r6, [sp, #32]
 80095c0:	9d05      	ldr	r5, [sp, #20]
 80095c2:	9a05      	ldr	r2, [sp, #20]
 80095c4:	441a      	add	r2, r3
 80095c6:	9205      	str	r2, [sp, #20]
 80095c8:	9a06      	ldr	r2, [sp, #24]
 80095ca:	2101      	movs	r1, #1
 80095cc:	441a      	add	r2, r3
 80095ce:	4620      	mov	r0, r4
 80095d0:	9206      	str	r2, [sp, #24]
 80095d2:	f000 fc3d 	bl	8009e50 <__i2b>
 80095d6:	4607      	mov	r7, r0
 80095d8:	b165      	cbz	r5, 80095f4 <_dtoa_r+0x774>
 80095da:	9b06      	ldr	r3, [sp, #24]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	dd09      	ble.n	80095f4 <_dtoa_r+0x774>
 80095e0:	42ab      	cmp	r3, r5
 80095e2:	9a05      	ldr	r2, [sp, #20]
 80095e4:	bfa8      	it	ge
 80095e6:	462b      	movge	r3, r5
 80095e8:	1ad2      	subs	r2, r2, r3
 80095ea:	9205      	str	r2, [sp, #20]
 80095ec:	9a06      	ldr	r2, [sp, #24]
 80095ee:	1aed      	subs	r5, r5, r3
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	9306      	str	r3, [sp, #24]
 80095f4:	9b08      	ldr	r3, [sp, #32]
 80095f6:	b1f3      	cbz	r3, 8009636 <_dtoa_r+0x7b6>
 80095f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 80a3 	beq.w	8009746 <_dtoa_r+0x8c6>
 8009600:	2e00      	cmp	r6, #0
 8009602:	dd10      	ble.n	8009626 <_dtoa_r+0x7a6>
 8009604:	4639      	mov	r1, r7
 8009606:	4632      	mov	r2, r6
 8009608:	4620      	mov	r0, r4
 800960a:	f000 fce1 	bl	8009fd0 <__pow5mult>
 800960e:	4652      	mov	r2, sl
 8009610:	4601      	mov	r1, r0
 8009612:	4607      	mov	r7, r0
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fc31 	bl	8009e7c <__multiply>
 800961a:	4651      	mov	r1, sl
 800961c:	4680      	mov	r8, r0
 800961e:	4620      	mov	r0, r4
 8009620:	f000 fb60 	bl	8009ce4 <_Bfree>
 8009624:	46c2      	mov	sl, r8
 8009626:	9b08      	ldr	r3, [sp, #32]
 8009628:	1b9a      	subs	r2, r3, r6
 800962a:	d004      	beq.n	8009636 <_dtoa_r+0x7b6>
 800962c:	4651      	mov	r1, sl
 800962e:	4620      	mov	r0, r4
 8009630:	f000 fcce 	bl	8009fd0 <__pow5mult>
 8009634:	4682      	mov	sl, r0
 8009636:	2101      	movs	r1, #1
 8009638:	4620      	mov	r0, r4
 800963a:	f000 fc09 	bl	8009e50 <__i2b>
 800963e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009640:	2b00      	cmp	r3, #0
 8009642:	4606      	mov	r6, r0
 8009644:	f340 8081 	ble.w	800974a <_dtoa_r+0x8ca>
 8009648:	461a      	mov	r2, r3
 800964a:	4601      	mov	r1, r0
 800964c:	4620      	mov	r0, r4
 800964e:	f000 fcbf 	bl	8009fd0 <__pow5mult>
 8009652:	9b07      	ldr	r3, [sp, #28]
 8009654:	2b01      	cmp	r3, #1
 8009656:	4606      	mov	r6, r0
 8009658:	dd7a      	ble.n	8009750 <_dtoa_r+0x8d0>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	6933      	ldr	r3, [r6, #16]
 8009660:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009664:	6918      	ldr	r0, [r3, #16]
 8009666:	f000 fba5 	bl	8009db4 <__hi0bits>
 800966a:	f1c0 0020 	rsb	r0, r0, #32
 800966e:	9b06      	ldr	r3, [sp, #24]
 8009670:	4418      	add	r0, r3
 8009672:	f010 001f 	ands.w	r0, r0, #31
 8009676:	f000 8094 	beq.w	80097a2 <_dtoa_r+0x922>
 800967a:	f1c0 0320 	rsb	r3, r0, #32
 800967e:	2b04      	cmp	r3, #4
 8009680:	f340 8085 	ble.w	800978e <_dtoa_r+0x90e>
 8009684:	9b05      	ldr	r3, [sp, #20]
 8009686:	f1c0 001c 	rsb	r0, r0, #28
 800968a:	4403      	add	r3, r0
 800968c:	9305      	str	r3, [sp, #20]
 800968e:	9b06      	ldr	r3, [sp, #24]
 8009690:	4403      	add	r3, r0
 8009692:	4405      	add	r5, r0
 8009694:	9306      	str	r3, [sp, #24]
 8009696:	9b05      	ldr	r3, [sp, #20]
 8009698:	2b00      	cmp	r3, #0
 800969a:	dd05      	ble.n	80096a8 <_dtoa_r+0x828>
 800969c:	4651      	mov	r1, sl
 800969e:	461a      	mov	r2, r3
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 fcef 	bl	800a084 <__lshift>
 80096a6:	4682      	mov	sl, r0
 80096a8:	9b06      	ldr	r3, [sp, #24]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	dd05      	ble.n	80096ba <_dtoa_r+0x83a>
 80096ae:	4631      	mov	r1, r6
 80096b0:	461a      	mov	r2, r3
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 fce6 	bl	800a084 <__lshift>
 80096b8:	4606      	mov	r6, r0
 80096ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d072      	beq.n	80097a6 <_dtoa_r+0x926>
 80096c0:	4631      	mov	r1, r6
 80096c2:	4650      	mov	r0, sl
 80096c4:	f000 fd4a 	bl	800a15c <__mcmp>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	da6c      	bge.n	80097a6 <_dtoa_r+0x926>
 80096cc:	2300      	movs	r3, #0
 80096ce:	4651      	mov	r1, sl
 80096d0:	220a      	movs	r2, #10
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 fb28 	bl	8009d28 <__multadd>
 80096d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80096de:	4682      	mov	sl, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 81b0 	beq.w	8009a46 <_dtoa_r+0xbc6>
 80096e6:	2300      	movs	r3, #0
 80096e8:	4639      	mov	r1, r7
 80096ea:	220a      	movs	r2, #10
 80096ec:	4620      	mov	r0, r4
 80096ee:	f000 fb1b 	bl	8009d28 <__multadd>
 80096f2:	9b01      	ldr	r3, [sp, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	4607      	mov	r7, r0
 80096f8:	f300 8096 	bgt.w	8009828 <_dtoa_r+0x9a8>
 80096fc:	9b07      	ldr	r3, [sp, #28]
 80096fe:	2b02      	cmp	r3, #2
 8009700:	dc59      	bgt.n	80097b6 <_dtoa_r+0x936>
 8009702:	e091      	b.n	8009828 <_dtoa_r+0x9a8>
 8009704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800970a:	e758      	b.n	80095be <_dtoa_r+0x73e>
 800970c:	9b04      	ldr	r3, [sp, #16]
 800970e:	1e5e      	subs	r6, r3, #1
 8009710:	9b08      	ldr	r3, [sp, #32]
 8009712:	42b3      	cmp	r3, r6
 8009714:	bfbf      	itttt	lt
 8009716:	9b08      	ldrlt	r3, [sp, #32]
 8009718:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800971a:	9608      	strlt	r6, [sp, #32]
 800971c:	1af3      	sublt	r3, r6, r3
 800971e:	bfb4      	ite	lt
 8009720:	18d2      	addlt	r2, r2, r3
 8009722:	1b9e      	subge	r6, r3, r6
 8009724:	9b04      	ldr	r3, [sp, #16]
 8009726:	bfbc      	itt	lt
 8009728:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800972a:	2600      	movlt	r6, #0
 800972c:	2b00      	cmp	r3, #0
 800972e:	bfb7      	itett	lt
 8009730:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009734:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009738:	1a9d      	sublt	r5, r3, r2
 800973a:	2300      	movlt	r3, #0
 800973c:	e741      	b.n	80095c2 <_dtoa_r+0x742>
 800973e:	9e08      	ldr	r6, [sp, #32]
 8009740:	9d05      	ldr	r5, [sp, #20]
 8009742:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009744:	e748      	b.n	80095d8 <_dtoa_r+0x758>
 8009746:	9a08      	ldr	r2, [sp, #32]
 8009748:	e770      	b.n	800962c <_dtoa_r+0x7ac>
 800974a:	9b07      	ldr	r3, [sp, #28]
 800974c:	2b01      	cmp	r3, #1
 800974e:	dc19      	bgt.n	8009784 <_dtoa_r+0x904>
 8009750:	9b02      	ldr	r3, [sp, #8]
 8009752:	b9bb      	cbnz	r3, 8009784 <_dtoa_r+0x904>
 8009754:	9b03      	ldr	r3, [sp, #12]
 8009756:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800975a:	b99b      	cbnz	r3, 8009784 <_dtoa_r+0x904>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009762:	0d1b      	lsrs	r3, r3, #20
 8009764:	051b      	lsls	r3, r3, #20
 8009766:	b183      	cbz	r3, 800978a <_dtoa_r+0x90a>
 8009768:	9b05      	ldr	r3, [sp, #20]
 800976a:	3301      	adds	r3, #1
 800976c:	9305      	str	r3, [sp, #20]
 800976e:	9b06      	ldr	r3, [sp, #24]
 8009770:	3301      	adds	r3, #1
 8009772:	9306      	str	r3, [sp, #24]
 8009774:	f04f 0801 	mov.w	r8, #1
 8009778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800977a:	2b00      	cmp	r3, #0
 800977c:	f47f af6f 	bne.w	800965e <_dtoa_r+0x7de>
 8009780:	2001      	movs	r0, #1
 8009782:	e774      	b.n	800966e <_dtoa_r+0x7ee>
 8009784:	f04f 0800 	mov.w	r8, #0
 8009788:	e7f6      	b.n	8009778 <_dtoa_r+0x8f8>
 800978a:	4698      	mov	r8, r3
 800978c:	e7f4      	b.n	8009778 <_dtoa_r+0x8f8>
 800978e:	d082      	beq.n	8009696 <_dtoa_r+0x816>
 8009790:	9a05      	ldr	r2, [sp, #20]
 8009792:	331c      	adds	r3, #28
 8009794:	441a      	add	r2, r3
 8009796:	9205      	str	r2, [sp, #20]
 8009798:	9a06      	ldr	r2, [sp, #24]
 800979a:	441a      	add	r2, r3
 800979c:	441d      	add	r5, r3
 800979e:	9206      	str	r2, [sp, #24]
 80097a0:	e779      	b.n	8009696 <_dtoa_r+0x816>
 80097a2:	4603      	mov	r3, r0
 80097a4:	e7f4      	b.n	8009790 <_dtoa_r+0x910>
 80097a6:	9b04      	ldr	r3, [sp, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	dc37      	bgt.n	800981c <_dtoa_r+0x99c>
 80097ac:	9b07      	ldr	r3, [sp, #28]
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	dd34      	ble.n	800981c <_dtoa_r+0x99c>
 80097b2:	9b04      	ldr	r3, [sp, #16]
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	b963      	cbnz	r3, 80097d4 <_dtoa_r+0x954>
 80097ba:	4631      	mov	r1, r6
 80097bc:	2205      	movs	r2, #5
 80097be:	4620      	mov	r0, r4
 80097c0:	f000 fab2 	bl	8009d28 <__multadd>
 80097c4:	4601      	mov	r1, r0
 80097c6:	4606      	mov	r6, r0
 80097c8:	4650      	mov	r0, sl
 80097ca:	f000 fcc7 	bl	800a15c <__mcmp>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f73f adbb 	bgt.w	800934a <_dtoa_r+0x4ca>
 80097d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d6:	9d00      	ldr	r5, [sp, #0]
 80097d8:	ea6f 0b03 	mvn.w	fp, r3
 80097dc:	f04f 0800 	mov.w	r8, #0
 80097e0:	4631      	mov	r1, r6
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 fa7e 	bl	8009ce4 <_Bfree>
 80097e8:	2f00      	cmp	r7, #0
 80097ea:	f43f aeab 	beq.w	8009544 <_dtoa_r+0x6c4>
 80097ee:	f1b8 0f00 	cmp.w	r8, #0
 80097f2:	d005      	beq.n	8009800 <_dtoa_r+0x980>
 80097f4:	45b8      	cmp	r8, r7
 80097f6:	d003      	beq.n	8009800 <_dtoa_r+0x980>
 80097f8:	4641      	mov	r1, r8
 80097fa:	4620      	mov	r0, r4
 80097fc:	f000 fa72 	bl	8009ce4 <_Bfree>
 8009800:	4639      	mov	r1, r7
 8009802:	4620      	mov	r0, r4
 8009804:	f000 fa6e 	bl	8009ce4 <_Bfree>
 8009808:	e69c      	b.n	8009544 <_dtoa_r+0x6c4>
 800980a:	2600      	movs	r6, #0
 800980c:	4637      	mov	r7, r6
 800980e:	e7e1      	b.n	80097d4 <_dtoa_r+0x954>
 8009810:	46bb      	mov	fp, r7
 8009812:	4637      	mov	r7, r6
 8009814:	e599      	b.n	800934a <_dtoa_r+0x4ca>
 8009816:	bf00      	nop
 8009818:	40240000 	.word	0x40240000
 800981c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 80c8 	beq.w	80099b4 <_dtoa_r+0xb34>
 8009824:	9b04      	ldr	r3, [sp, #16]
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	2d00      	cmp	r5, #0
 800982a:	dd05      	ble.n	8009838 <_dtoa_r+0x9b8>
 800982c:	4639      	mov	r1, r7
 800982e:	462a      	mov	r2, r5
 8009830:	4620      	mov	r0, r4
 8009832:	f000 fc27 	bl	800a084 <__lshift>
 8009836:	4607      	mov	r7, r0
 8009838:	f1b8 0f00 	cmp.w	r8, #0
 800983c:	d05b      	beq.n	80098f6 <_dtoa_r+0xa76>
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	4620      	mov	r0, r4
 8009842:	f000 fa0f 	bl	8009c64 <_Balloc>
 8009846:	4605      	mov	r5, r0
 8009848:	b928      	cbnz	r0, 8009856 <_dtoa_r+0x9d6>
 800984a:	4b83      	ldr	r3, [pc, #524]	; (8009a58 <_dtoa_r+0xbd8>)
 800984c:	4602      	mov	r2, r0
 800984e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009852:	f7ff bb2e 	b.w	8008eb2 <_dtoa_r+0x32>
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	3202      	adds	r2, #2
 800985a:	0092      	lsls	r2, r2, #2
 800985c:	f107 010c 	add.w	r1, r7, #12
 8009860:	300c      	adds	r0, #12
 8009862:	f000 ffab 	bl	800a7bc <memcpy>
 8009866:	2201      	movs	r2, #1
 8009868:	4629      	mov	r1, r5
 800986a:	4620      	mov	r0, r4
 800986c:	f000 fc0a 	bl	800a084 <__lshift>
 8009870:	9b00      	ldr	r3, [sp, #0]
 8009872:	3301      	adds	r3, #1
 8009874:	9304      	str	r3, [sp, #16]
 8009876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800987a:	4413      	add	r3, r2
 800987c:	9308      	str	r3, [sp, #32]
 800987e:	9b02      	ldr	r3, [sp, #8]
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	46b8      	mov	r8, r7
 8009886:	9306      	str	r3, [sp, #24]
 8009888:	4607      	mov	r7, r0
 800988a:	9b04      	ldr	r3, [sp, #16]
 800988c:	4631      	mov	r1, r6
 800988e:	3b01      	subs	r3, #1
 8009890:	4650      	mov	r0, sl
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	f7ff fa69 	bl	8008d6a <quorem>
 8009898:	4641      	mov	r1, r8
 800989a:	9002      	str	r0, [sp, #8]
 800989c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80098a0:	4650      	mov	r0, sl
 80098a2:	f000 fc5b 	bl	800a15c <__mcmp>
 80098a6:	463a      	mov	r2, r7
 80098a8:	9005      	str	r0, [sp, #20]
 80098aa:	4631      	mov	r1, r6
 80098ac:	4620      	mov	r0, r4
 80098ae:	f000 fc71 	bl	800a194 <__mdiff>
 80098b2:	68c2      	ldr	r2, [r0, #12]
 80098b4:	4605      	mov	r5, r0
 80098b6:	bb02      	cbnz	r2, 80098fa <_dtoa_r+0xa7a>
 80098b8:	4601      	mov	r1, r0
 80098ba:	4650      	mov	r0, sl
 80098bc:	f000 fc4e 	bl	800a15c <__mcmp>
 80098c0:	4602      	mov	r2, r0
 80098c2:	4629      	mov	r1, r5
 80098c4:	4620      	mov	r0, r4
 80098c6:	9209      	str	r2, [sp, #36]	; 0x24
 80098c8:	f000 fa0c 	bl	8009ce4 <_Bfree>
 80098cc:	9b07      	ldr	r3, [sp, #28]
 80098ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098d0:	9d04      	ldr	r5, [sp, #16]
 80098d2:	ea43 0102 	orr.w	r1, r3, r2
 80098d6:	9b06      	ldr	r3, [sp, #24]
 80098d8:	4319      	orrs	r1, r3
 80098da:	d110      	bne.n	80098fe <_dtoa_r+0xa7e>
 80098dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80098e0:	d029      	beq.n	8009936 <_dtoa_r+0xab6>
 80098e2:	9b05      	ldr	r3, [sp, #20]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	dd02      	ble.n	80098ee <_dtoa_r+0xa6e>
 80098e8:	9b02      	ldr	r3, [sp, #8]
 80098ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80098ee:	9b01      	ldr	r3, [sp, #4]
 80098f0:	f883 9000 	strb.w	r9, [r3]
 80098f4:	e774      	b.n	80097e0 <_dtoa_r+0x960>
 80098f6:	4638      	mov	r0, r7
 80098f8:	e7ba      	b.n	8009870 <_dtoa_r+0x9f0>
 80098fa:	2201      	movs	r2, #1
 80098fc:	e7e1      	b.n	80098c2 <_dtoa_r+0xa42>
 80098fe:	9b05      	ldr	r3, [sp, #20]
 8009900:	2b00      	cmp	r3, #0
 8009902:	db04      	blt.n	800990e <_dtoa_r+0xa8e>
 8009904:	9907      	ldr	r1, [sp, #28]
 8009906:	430b      	orrs	r3, r1
 8009908:	9906      	ldr	r1, [sp, #24]
 800990a:	430b      	orrs	r3, r1
 800990c:	d120      	bne.n	8009950 <_dtoa_r+0xad0>
 800990e:	2a00      	cmp	r2, #0
 8009910:	dded      	ble.n	80098ee <_dtoa_r+0xa6e>
 8009912:	4651      	mov	r1, sl
 8009914:	2201      	movs	r2, #1
 8009916:	4620      	mov	r0, r4
 8009918:	f000 fbb4 	bl	800a084 <__lshift>
 800991c:	4631      	mov	r1, r6
 800991e:	4682      	mov	sl, r0
 8009920:	f000 fc1c 	bl	800a15c <__mcmp>
 8009924:	2800      	cmp	r0, #0
 8009926:	dc03      	bgt.n	8009930 <_dtoa_r+0xab0>
 8009928:	d1e1      	bne.n	80098ee <_dtoa_r+0xa6e>
 800992a:	f019 0f01 	tst.w	r9, #1
 800992e:	d0de      	beq.n	80098ee <_dtoa_r+0xa6e>
 8009930:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009934:	d1d8      	bne.n	80098e8 <_dtoa_r+0xa68>
 8009936:	9a01      	ldr	r2, [sp, #4]
 8009938:	2339      	movs	r3, #57	; 0x39
 800993a:	7013      	strb	r3, [r2, #0]
 800993c:	462b      	mov	r3, r5
 800993e:	461d      	mov	r5, r3
 8009940:	3b01      	subs	r3, #1
 8009942:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009946:	2a39      	cmp	r2, #57	; 0x39
 8009948:	d06c      	beq.n	8009a24 <_dtoa_r+0xba4>
 800994a:	3201      	adds	r2, #1
 800994c:	701a      	strb	r2, [r3, #0]
 800994e:	e747      	b.n	80097e0 <_dtoa_r+0x960>
 8009950:	2a00      	cmp	r2, #0
 8009952:	dd07      	ble.n	8009964 <_dtoa_r+0xae4>
 8009954:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009958:	d0ed      	beq.n	8009936 <_dtoa_r+0xab6>
 800995a:	9a01      	ldr	r2, [sp, #4]
 800995c:	f109 0301 	add.w	r3, r9, #1
 8009960:	7013      	strb	r3, [r2, #0]
 8009962:	e73d      	b.n	80097e0 <_dtoa_r+0x960>
 8009964:	9b04      	ldr	r3, [sp, #16]
 8009966:	9a08      	ldr	r2, [sp, #32]
 8009968:	f803 9c01 	strb.w	r9, [r3, #-1]
 800996c:	4293      	cmp	r3, r2
 800996e:	d043      	beq.n	80099f8 <_dtoa_r+0xb78>
 8009970:	4651      	mov	r1, sl
 8009972:	2300      	movs	r3, #0
 8009974:	220a      	movs	r2, #10
 8009976:	4620      	mov	r0, r4
 8009978:	f000 f9d6 	bl	8009d28 <__multadd>
 800997c:	45b8      	cmp	r8, r7
 800997e:	4682      	mov	sl, r0
 8009980:	f04f 0300 	mov.w	r3, #0
 8009984:	f04f 020a 	mov.w	r2, #10
 8009988:	4641      	mov	r1, r8
 800998a:	4620      	mov	r0, r4
 800998c:	d107      	bne.n	800999e <_dtoa_r+0xb1e>
 800998e:	f000 f9cb 	bl	8009d28 <__multadd>
 8009992:	4680      	mov	r8, r0
 8009994:	4607      	mov	r7, r0
 8009996:	9b04      	ldr	r3, [sp, #16]
 8009998:	3301      	adds	r3, #1
 800999a:	9304      	str	r3, [sp, #16]
 800999c:	e775      	b.n	800988a <_dtoa_r+0xa0a>
 800999e:	f000 f9c3 	bl	8009d28 <__multadd>
 80099a2:	4639      	mov	r1, r7
 80099a4:	4680      	mov	r8, r0
 80099a6:	2300      	movs	r3, #0
 80099a8:	220a      	movs	r2, #10
 80099aa:	4620      	mov	r0, r4
 80099ac:	f000 f9bc 	bl	8009d28 <__multadd>
 80099b0:	4607      	mov	r7, r0
 80099b2:	e7f0      	b.n	8009996 <_dtoa_r+0xb16>
 80099b4:	9b04      	ldr	r3, [sp, #16]
 80099b6:	9301      	str	r3, [sp, #4]
 80099b8:	9d00      	ldr	r5, [sp, #0]
 80099ba:	4631      	mov	r1, r6
 80099bc:	4650      	mov	r0, sl
 80099be:	f7ff f9d4 	bl	8008d6a <quorem>
 80099c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80099c6:	9b00      	ldr	r3, [sp, #0]
 80099c8:	f805 9b01 	strb.w	r9, [r5], #1
 80099cc:	1aea      	subs	r2, r5, r3
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	dd07      	ble.n	80099e4 <_dtoa_r+0xb64>
 80099d4:	4651      	mov	r1, sl
 80099d6:	2300      	movs	r3, #0
 80099d8:	220a      	movs	r2, #10
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 f9a4 	bl	8009d28 <__multadd>
 80099e0:	4682      	mov	sl, r0
 80099e2:	e7ea      	b.n	80099ba <_dtoa_r+0xb3a>
 80099e4:	9b01      	ldr	r3, [sp, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	bfc8      	it	gt
 80099ea:	461d      	movgt	r5, r3
 80099ec:	9b00      	ldr	r3, [sp, #0]
 80099ee:	bfd8      	it	le
 80099f0:	2501      	movle	r5, #1
 80099f2:	441d      	add	r5, r3
 80099f4:	f04f 0800 	mov.w	r8, #0
 80099f8:	4651      	mov	r1, sl
 80099fa:	2201      	movs	r2, #1
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 fb41 	bl	800a084 <__lshift>
 8009a02:	4631      	mov	r1, r6
 8009a04:	4682      	mov	sl, r0
 8009a06:	f000 fba9 	bl	800a15c <__mcmp>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	dc96      	bgt.n	800993c <_dtoa_r+0xabc>
 8009a0e:	d102      	bne.n	8009a16 <_dtoa_r+0xb96>
 8009a10:	f019 0f01 	tst.w	r9, #1
 8009a14:	d192      	bne.n	800993c <_dtoa_r+0xabc>
 8009a16:	462b      	mov	r3, r5
 8009a18:	461d      	mov	r5, r3
 8009a1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a1e:	2a30      	cmp	r2, #48	; 0x30
 8009a20:	d0fa      	beq.n	8009a18 <_dtoa_r+0xb98>
 8009a22:	e6dd      	b.n	80097e0 <_dtoa_r+0x960>
 8009a24:	9a00      	ldr	r2, [sp, #0]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d189      	bne.n	800993e <_dtoa_r+0xabe>
 8009a2a:	f10b 0b01 	add.w	fp, fp, #1
 8009a2e:	2331      	movs	r3, #49	; 0x31
 8009a30:	e796      	b.n	8009960 <_dtoa_r+0xae0>
 8009a32:	4b0a      	ldr	r3, [pc, #40]	; (8009a5c <_dtoa_r+0xbdc>)
 8009a34:	f7ff ba99 	b.w	8008f6a <_dtoa_r+0xea>
 8009a38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f47f aa6d 	bne.w	8008f1a <_dtoa_r+0x9a>
 8009a40:	4b07      	ldr	r3, [pc, #28]	; (8009a60 <_dtoa_r+0xbe0>)
 8009a42:	f7ff ba92 	b.w	8008f6a <_dtoa_r+0xea>
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	dcb5      	bgt.n	80099b8 <_dtoa_r+0xb38>
 8009a4c:	9b07      	ldr	r3, [sp, #28]
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	f73f aeb1 	bgt.w	80097b6 <_dtoa_r+0x936>
 8009a54:	e7b0      	b.n	80099b8 <_dtoa_r+0xb38>
 8009a56:	bf00      	nop
 8009a58:	0800b0f9 	.word	0x0800b0f9
 8009a5c:	0800b059 	.word	0x0800b059
 8009a60:	0800b07d 	.word	0x0800b07d

08009a64 <_free_r>:
 8009a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a66:	2900      	cmp	r1, #0
 8009a68:	d044      	beq.n	8009af4 <_free_r+0x90>
 8009a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a6e:	9001      	str	r0, [sp, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f1a1 0404 	sub.w	r4, r1, #4
 8009a76:	bfb8      	it	lt
 8009a78:	18e4      	addlt	r4, r4, r3
 8009a7a:	f000 f8e7 	bl	8009c4c <__malloc_lock>
 8009a7e:	4a1e      	ldr	r2, [pc, #120]	; (8009af8 <_free_r+0x94>)
 8009a80:	9801      	ldr	r0, [sp, #4]
 8009a82:	6813      	ldr	r3, [r2, #0]
 8009a84:	b933      	cbnz	r3, 8009a94 <_free_r+0x30>
 8009a86:	6063      	str	r3, [r4, #4]
 8009a88:	6014      	str	r4, [r2, #0]
 8009a8a:	b003      	add	sp, #12
 8009a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a90:	f000 b8e2 	b.w	8009c58 <__malloc_unlock>
 8009a94:	42a3      	cmp	r3, r4
 8009a96:	d908      	bls.n	8009aaa <_free_r+0x46>
 8009a98:	6825      	ldr	r5, [r4, #0]
 8009a9a:	1961      	adds	r1, r4, r5
 8009a9c:	428b      	cmp	r3, r1
 8009a9e:	bf01      	itttt	eq
 8009aa0:	6819      	ldreq	r1, [r3, #0]
 8009aa2:	685b      	ldreq	r3, [r3, #4]
 8009aa4:	1949      	addeq	r1, r1, r5
 8009aa6:	6021      	streq	r1, [r4, #0]
 8009aa8:	e7ed      	b.n	8009a86 <_free_r+0x22>
 8009aaa:	461a      	mov	r2, r3
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	b10b      	cbz	r3, 8009ab4 <_free_r+0x50>
 8009ab0:	42a3      	cmp	r3, r4
 8009ab2:	d9fa      	bls.n	8009aaa <_free_r+0x46>
 8009ab4:	6811      	ldr	r1, [r2, #0]
 8009ab6:	1855      	adds	r5, r2, r1
 8009ab8:	42a5      	cmp	r5, r4
 8009aba:	d10b      	bne.n	8009ad4 <_free_r+0x70>
 8009abc:	6824      	ldr	r4, [r4, #0]
 8009abe:	4421      	add	r1, r4
 8009ac0:	1854      	adds	r4, r2, r1
 8009ac2:	42a3      	cmp	r3, r4
 8009ac4:	6011      	str	r1, [r2, #0]
 8009ac6:	d1e0      	bne.n	8009a8a <_free_r+0x26>
 8009ac8:	681c      	ldr	r4, [r3, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	6053      	str	r3, [r2, #4]
 8009ace:	440c      	add	r4, r1
 8009ad0:	6014      	str	r4, [r2, #0]
 8009ad2:	e7da      	b.n	8009a8a <_free_r+0x26>
 8009ad4:	d902      	bls.n	8009adc <_free_r+0x78>
 8009ad6:	230c      	movs	r3, #12
 8009ad8:	6003      	str	r3, [r0, #0]
 8009ada:	e7d6      	b.n	8009a8a <_free_r+0x26>
 8009adc:	6825      	ldr	r5, [r4, #0]
 8009ade:	1961      	adds	r1, r4, r5
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	bf04      	itt	eq
 8009ae4:	6819      	ldreq	r1, [r3, #0]
 8009ae6:	685b      	ldreq	r3, [r3, #4]
 8009ae8:	6063      	str	r3, [r4, #4]
 8009aea:	bf04      	itt	eq
 8009aec:	1949      	addeq	r1, r1, r5
 8009aee:	6021      	streq	r1, [r4, #0]
 8009af0:	6054      	str	r4, [r2, #4]
 8009af2:	e7ca      	b.n	8009a8a <_free_r+0x26>
 8009af4:	b003      	add	sp, #12
 8009af6:	bd30      	pop	{r4, r5, pc}
 8009af8:	20000a90 	.word	0x20000a90

08009afc <malloc>:
 8009afc:	4b02      	ldr	r3, [pc, #8]	; (8009b08 <malloc+0xc>)
 8009afe:	4601      	mov	r1, r0
 8009b00:	6818      	ldr	r0, [r3, #0]
 8009b02:	f000 b823 	b.w	8009b4c <_malloc_r>
 8009b06:	bf00      	nop
 8009b08:	20000080 	.word	0x20000080

08009b0c <sbrk_aligned>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	4e0e      	ldr	r6, [pc, #56]	; (8009b48 <sbrk_aligned+0x3c>)
 8009b10:	460c      	mov	r4, r1
 8009b12:	6831      	ldr	r1, [r6, #0]
 8009b14:	4605      	mov	r5, r0
 8009b16:	b911      	cbnz	r1, 8009b1e <sbrk_aligned+0x12>
 8009b18:	f000 fe40 	bl	800a79c <_sbrk_r>
 8009b1c:	6030      	str	r0, [r6, #0]
 8009b1e:	4621      	mov	r1, r4
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 fe3b 	bl	800a79c <_sbrk_r>
 8009b26:	1c43      	adds	r3, r0, #1
 8009b28:	d00a      	beq.n	8009b40 <sbrk_aligned+0x34>
 8009b2a:	1cc4      	adds	r4, r0, #3
 8009b2c:	f024 0403 	bic.w	r4, r4, #3
 8009b30:	42a0      	cmp	r0, r4
 8009b32:	d007      	beq.n	8009b44 <sbrk_aligned+0x38>
 8009b34:	1a21      	subs	r1, r4, r0
 8009b36:	4628      	mov	r0, r5
 8009b38:	f000 fe30 	bl	800a79c <_sbrk_r>
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d101      	bne.n	8009b44 <sbrk_aligned+0x38>
 8009b40:	f04f 34ff 	mov.w	r4, #4294967295
 8009b44:	4620      	mov	r0, r4
 8009b46:	bd70      	pop	{r4, r5, r6, pc}
 8009b48:	20000a94 	.word	0x20000a94

08009b4c <_malloc_r>:
 8009b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b50:	1ccd      	adds	r5, r1, #3
 8009b52:	f025 0503 	bic.w	r5, r5, #3
 8009b56:	3508      	adds	r5, #8
 8009b58:	2d0c      	cmp	r5, #12
 8009b5a:	bf38      	it	cc
 8009b5c:	250c      	movcc	r5, #12
 8009b5e:	2d00      	cmp	r5, #0
 8009b60:	4607      	mov	r7, r0
 8009b62:	db01      	blt.n	8009b68 <_malloc_r+0x1c>
 8009b64:	42a9      	cmp	r1, r5
 8009b66:	d905      	bls.n	8009b74 <_malloc_r+0x28>
 8009b68:	230c      	movs	r3, #12
 8009b6a:	603b      	str	r3, [r7, #0]
 8009b6c:	2600      	movs	r6, #0
 8009b6e:	4630      	mov	r0, r6
 8009b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c48 <_malloc_r+0xfc>
 8009b78:	f000 f868 	bl	8009c4c <__malloc_lock>
 8009b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b80:	461c      	mov	r4, r3
 8009b82:	bb5c      	cbnz	r4, 8009bdc <_malloc_r+0x90>
 8009b84:	4629      	mov	r1, r5
 8009b86:	4638      	mov	r0, r7
 8009b88:	f7ff ffc0 	bl	8009b0c <sbrk_aligned>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	4604      	mov	r4, r0
 8009b90:	d155      	bne.n	8009c3e <_malloc_r+0xf2>
 8009b92:	f8d8 4000 	ldr.w	r4, [r8]
 8009b96:	4626      	mov	r6, r4
 8009b98:	2e00      	cmp	r6, #0
 8009b9a:	d145      	bne.n	8009c28 <_malloc_r+0xdc>
 8009b9c:	2c00      	cmp	r4, #0
 8009b9e:	d048      	beq.n	8009c32 <_malloc_r+0xe6>
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	eb04 0903 	add.w	r9, r4, r3
 8009baa:	f000 fdf7 	bl	800a79c <_sbrk_r>
 8009bae:	4581      	cmp	r9, r0
 8009bb0:	d13f      	bne.n	8009c32 <_malloc_r+0xe6>
 8009bb2:	6821      	ldr	r1, [r4, #0]
 8009bb4:	1a6d      	subs	r5, r5, r1
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4638      	mov	r0, r7
 8009bba:	f7ff ffa7 	bl	8009b0c <sbrk_aligned>
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	d037      	beq.n	8009c32 <_malloc_r+0xe6>
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	442b      	add	r3, r5
 8009bc6:	6023      	str	r3, [r4, #0]
 8009bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d038      	beq.n	8009c42 <_malloc_r+0xf6>
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	42a2      	cmp	r2, r4
 8009bd4:	d12b      	bne.n	8009c2e <_malloc_r+0xe2>
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	605a      	str	r2, [r3, #4]
 8009bda:	e00f      	b.n	8009bfc <_malloc_r+0xb0>
 8009bdc:	6822      	ldr	r2, [r4, #0]
 8009bde:	1b52      	subs	r2, r2, r5
 8009be0:	d41f      	bmi.n	8009c22 <_malloc_r+0xd6>
 8009be2:	2a0b      	cmp	r2, #11
 8009be4:	d917      	bls.n	8009c16 <_malloc_r+0xca>
 8009be6:	1961      	adds	r1, r4, r5
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	6025      	str	r5, [r4, #0]
 8009bec:	bf18      	it	ne
 8009bee:	6059      	strne	r1, [r3, #4]
 8009bf0:	6863      	ldr	r3, [r4, #4]
 8009bf2:	bf08      	it	eq
 8009bf4:	f8c8 1000 	streq.w	r1, [r8]
 8009bf8:	5162      	str	r2, [r4, r5]
 8009bfa:	604b      	str	r3, [r1, #4]
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f104 060b 	add.w	r6, r4, #11
 8009c02:	f000 f829 	bl	8009c58 <__malloc_unlock>
 8009c06:	f026 0607 	bic.w	r6, r6, #7
 8009c0a:	1d23      	adds	r3, r4, #4
 8009c0c:	1af2      	subs	r2, r6, r3
 8009c0e:	d0ae      	beq.n	8009b6e <_malloc_r+0x22>
 8009c10:	1b9b      	subs	r3, r3, r6
 8009c12:	50a3      	str	r3, [r4, r2]
 8009c14:	e7ab      	b.n	8009b6e <_malloc_r+0x22>
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	6862      	ldr	r2, [r4, #4]
 8009c1a:	d1dd      	bne.n	8009bd8 <_malloc_r+0x8c>
 8009c1c:	f8c8 2000 	str.w	r2, [r8]
 8009c20:	e7ec      	b.n	8009bfc <_malloc_r+0xb0>
 8009c22:	4623      	mov	r3, r4
 8009c24:	6864      	ldr	r4, [r4, #4]
 8009c26:	e7ac      	b.n	8009b82 <_malloc_r+0x36>
 8009c28:	4634      	mov	r4, r6
 8009c2a:	6876      	ldr	r6, [r6, #4]
 8009c2c:	e7b4      	b.n	8009b98 <_malloc_r+0x4c>
 8009c2e:	4613      	mov	r3, r2
 8009c30:	e7cc      	b.n	8009bcc <_malloc_r+0x80>
 8009c32:	230c      	movs	r3, #12
 8009c34:	603b      	str	r3, [r7, #0]
 8009c36:	4638      	mov	r0, r7
 8009c38:	f000 f80e 	bl	8009c58 <__malloc_unlock>
 8009c3c:	e797      	b.n	8009b6e <_malloc_r+0x22>
 8009c3e:	6025      	str	r5, [r4, #0]
 8009c40:	e7dc      	b.n	8009bfc <_malloc_r+0xb0>
 8009c42:	605b      	str	r3, [r3, #4]
 8009c44:	deff      	udf	#255	; 0xff
 8009c46:	bf00      	nop
 8009c48:	20000a90 	.word	0x20000a90

08009c4c <__malloc_lock>:
 8009c4c:	4801      	ldr	r0, [pc, #4]	; (8009c54 <__malloc_lock+0x8>)
 8009c4e:	f7ff b88a 	b.w	8008d66 <__retarget_lock_acquire_recursive>
 8009c52:	bf00      	nop
 8009c54:	20000a8c 	.word	0x20000a8c

08009c58 <__malloc_unlock>:
 8009c58:	4801      	ldr	r0, [pc, #4]	; (8009c60 <__malloc_unlock+0x8>)
 8009c5a:	f7ff b885 	b.w	8008d68 <__retarget_lock_release_recursive>
 8009c5e:	bf00      	nop
 8009c60:	20000a8c 	.word	0x20000a8c

08009c64 <_Balloc>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	69c6      	ldr	r6, [r0, #28]
 8009c68:	4604      	mov	r4, r0
 8009c6a:	460d      	mov	r5, r1
 8009c6c:	b976      	cbnz	r6, 8009c8c <_Balloc+0x28>
 8009c6e:	2010      	movs	r0, #16
 8009c70:	f7ff ff44 	bl	8009afc <malloc>
 8009c74:	4602      	mov	r2, r0
 8009c76:	61e0      	str	r0, [r4, #28]
 8009c78:	b920      	cbnz	r0, 8009c84 <_Balloc+0x20>
 8009c7a:	4b18      	ldr	r3, [pc, #96]	; (8009cdc <_Balloc+0x78>)
 8009c7c:	4818      	ldr	r0, [pc, #96]	; (8009ce0 <_Balloc+0x7c>)
 8009c7e:	216b      	movs	r1, #107	; 0x6b
 8009c80:	f000 fdaa 	bl	800a7d8 <__assert_func>
 8009c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c88:	6006      	str	r6, [r0, #0]
 8009c8a:	60c6      	str	r6, [r0, #12]
 8009c8c:	69e6      	ldr	r6, [r4, #28]
 8009c8e:	68f3      	ldr	r3, [r6, #12]
 8009c90:	b183      	cbz	r3, 8009cb4 <_Balloc+0x50>
 8009c92:	69e3      	ldr	r3, [r4, #28]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c9a:	b9b8      	cbnz	r0, 8009ccc <_Balloc+0x68>
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	fa01 f605 	lsl.w	r6, r1, r5
 8009ca2:	1d72      	adds	r2, r6, #5
 8009ca4:	0092      	lsls	r2, r2, #2
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 fdb4 	bl	800a814 <_calloc_r>
 8009cac:	b160      	cbz	r0, 8009cc8 <_Balloc+0x64>
 8009cae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cb2:	e00e      	b.n	8009cd2 <_Balloc+0x6e>
 8009cb4:	2221      	movs	r2, #33	; 0x21
 8009cb6:	2104      	movs	r1, #4
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 fdab 	bl	800a814 <_calloc_r>
 8009cbe:	69e3      	ldr	r3, [r4, #28]
 8009cc0:	60f0      	str	r0, [r6, #12]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1e4      	bne.n	8009c92 <_Balloc+0x2e>
 8009cc8:	2000      	movs	r0, #0
 8009cca:	bd70      	pop	{r4, r5, r6, pc}
 8009ccc:	6802      	ldr	r2, [r0, #0]
 8009cce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009cd8:	e7f7      	b.n	8009cca <_Balloc+0x66>
 8009cda:	bf00      	nop
 8009cdc:	0800b08a 	.word	0x0800b08a
 8009ce0:	0800b10a 	.word	0x0800b10a

08009ce4 <_Bfree>:
 8009ce4:	b570      	push	{r4, r5, r6, lr}
 8009ce6:	69c6      	ldr	r6, [r0, #28]
 8009ce8:	4605      	mov	r5, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	b976      	cbnz	r6, 8009d0c <_Bfree+0x28>
 8009cee:	2010      	movs	r0, #16
 8009cf0:	f7ff ff04 	bl	8009afc <malloc>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	61e8      	str	r0, [r5, #28]
 8009cf8:	b920      	cbnz	r0, 8009d04 <_Bfree+0x20>
 8009cfa:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <_Bfree+0x3c>)
 8009cfc:	4809      	ldr	r0, [pc, #36]	; (8009d24 <_Bfree+0x40>)
 8009cfe:	218f      	movs	r1, #143	; 0x8f
 8009d00:	f000 fd6a 	bl	800a7d8 <__assert_func>
 8009d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d08:	6006      	str	r6, [r0, #0]
 8009d0a:	60c6      	str	r6, [r0, #12]
 8009d0c:	b13c      	cbz	r4, 8009d1e <_Bfree+0x3a>
 8009d0e:	69eb      	ldr	r3, [r5, #28]
 8009d10:	6862      	ldr	r2, [r4, #4]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d18:	6021      	str	r1, [r4, #0]
 8009d1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d1e:	bd70      	pop	{r4, r5, r6, pc}
 8009d20:	0800b08a 	.word	0x0800b08a
 8009d24:	0800b10a 	.word	0x0800b10a

08009d28 <__multadd>:
 8009d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2c:	690d      	ldr	r5, [r1, #16]
 8009d2e:	4607      	mov	r7, r0
 8009d30:	460c      	mov	r4, r1
 8009d32:	461e      	mov	r6, r3
 8009d34:	f101 0c14 	add.w	ip, r1, #20
 8009d38:	2000      	movs	r0, #0
 8009d3a:	f8dc 3000 	ldr.w	r3, [ip]
 8009d3e:	b299      	uxth	r1, r3
 8009d40:	fb02 6101 	mla	r1, r2, r1, r6
 8009d44:	0c1e      	lsrs	r6, r3, #16
 8009d46:	0c0b      	lsrs	r3, r1, #16
 8009d48:	fb02 3306 	mla	r3, r2, r6, r3
 8009d4c:	b289      	uxth	r1, r1
 8009d4e:	3001      	adds	r0, #1
 8009d50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d54:	4285      	cmp	r5, r0
 8009d56:	f84c 1b04 	str.w	r1, [ip], #4
 8009d5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d5e:	dcec      	bgt.n	8009d3a <__multadd+0x12>
 8009d60:	b30e      	cbz	r6, 8009da6 <__multadd+0x7e>
 8009d62:	68a3      	ldr	r3, [r4, #8]
 8009d64:	42ab      	cmp	r3, r5
 8009d66:	dc19      	bgt.n	8009d9c <__multadd+0x74>
 8009d68:	6861      	ldr	r1, [r4, #4]
 8009d6a:	4638      	mov	r0, r7
 8009d6c:	3101      	adds	r1, #1
 8009d6e:	f7ff ff79 	bl	8009c64 <_Balloc>
 8009d72:	4680      	mov	r8, r0
 8009d74:	b928      	cbnz	r0, 8009d82 <__multadd+0x5a>
 8009d76:	4602      	mov	r2, r0
 8009d78:	4b0c      	ldr	r3, [pc, #48]	; (8009dac <__multadd+0x84>)
 8009d7a:	480d      	ldr	r0, [pc, #52]	; (8009db0 <__multadd+0x88>)
 8009d7c:	21ba      	movs	r1, #186	; 0xba
 8009d7e:	f000 fd2b 	bl	800a7d8 <__assert_func>
 8009d82:	6922      	ldr	r2, [r4, #16]
 8009d84:	3202      	adds	r2, #2
 8009d86:	f104 010c 	add.w	r1, r4, #12
 8009d8a:	0092      	lsls	r2, r2, #2
 8009d8c:	300c      	adds	r0, #12
 8009d8e:	f000 fd15 	bl	800a7bc <memcpy>
 8009d92:	4621      	mov	r1, r4
 8009d94:	4638      	mov	r0, r7
 8009d96:	f7ff ffa5 	bl	8009ce4 <_Bfree>
 8009d9a:	4644      	mov	r4, r8
 8009d9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009da0:	3501      	adds	r5, #1
 8009da2:	615e      	str	r6, [r3, #20]
 8009da4:	6125      	str	r5, [r4, #16]
 8009da6:	4620      	mov	r0, r4
 8009da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dac:	0800b0f9 	.word	0x0800b0f9
 8009db0:	0800b10a 	.word	0x0800b10a

08009db4 <__hi0bits>:
 8009db4:	0c03      	lsrs	r3, r0, #16
 8009db6:	041b      	lsls	r3, r3, #16
 8009db8:	b9d3      	cbnz	r3, 8009df0 <__hi0bits+0x3c>
 8009dba:	0400      	lsls	r0, r0, #16
 8009dbc:	2310      	movs	r3, #16
 8009dbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009dc2:	bf04      	itt	eq
 8009dc4:	0200      	lsleq	r0, r0, #8
 8009dc6:	3308      	addeq	r3, #8
 8009dc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009dcc:	bf04      	itt	eq
 8009dce:	0100      	lsleq	r0, r0, #4
 8009dd0:	3304      	addeq	r3, #4
 8009dd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009dd6:	bf04      	itt	eq
 8009dd8:	0080      	lsleq	r0, r0, #2
 8009dda:	3302      	addeq	r3, #2
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	db05      	blt.n	8009dec <__hi0bits+0x38>
 8009de0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009de4:	f103 0301 	add.w	r3, r3, #1
 8009de8:	bf08      	it	eq
 8009dea:	2320      	moveq	r3, #32
 8009dec:	4618      	mov	r0, r3
 8009dee:	4770      	bx	lr
 8009df0:	2300      	movs	r3, #0
 8009df2:	e7e4      	b.n	8009dbe <__hi0bits+0xa>

08009df4 <__lo0bits>:
 8009df4:	6803      	ldr	r3, [r0, #0]
 8009df6:	f013 0207 	ands.w	r2, r3, #7
 8009dfa:	d00c      	beq.n	8009e16 <__lo0bits+0x22>
 8009dfc:	07d9      	lsls	r1, r3, #31
 8009dfe:	d422      	bmi.n	8009e46 <__lo0bits+0x52>
 8009e00:	079a      	lsls	r2, r3, #30
 8009e02:	bf49      	itett	mi
 8009e04:	085b      	lsrmi	r3, r3, #1
 8009e06:	089b      	lsrpl	r3, r3, #2
 8009e08:	6003      	strmi	r3, [r0, #0]
 8009e0a:	2201      	movmi	r2, #1
 8009e0c:	bf5c      	itt	pl
 8009e0e:	6003      	strpl	r3, [r0, #0]
 8009e10:	2202      	movpl	r2, #2
 8009e12:	4610      	mov	r0, r2
 8009e14:	4770      	bx	lr
 8009e16:	b299      	uxth	r1, r3
 8009e18:	b909      	cbnz	r1, 8009e1e <__lo0bits+0x2a>
 8009e1a:	0c1b      	lsrs	r3, r3, #16
 8009e1c:	2210      	movs	r2, #16
 8009e1e:	b2d9      	uxtb	r1, r3
 8009e20:	b909      	cbnz	r1, 8009e26 <__lo0bits+0x32>
 8009e22:	3208      	adds	r2, #8
 8009e24:	0a1b      	lsrs	r3, r3, #8
 8009e26:	0719      	lsls	r1, r3, #28
 8009e28:	bf04      	itt	eq
 8009e2a:	091b      	lsreq	r3, r3, #4
 8009e2c:	3204      	addeq	r2, #4
 8009e2e:	0799      	lsls	r1, r3, #30
 8009e30:	bf04      	itt	eq
 8009e32:	089b      	lsreq	r3, r3, #2
 8009e34:	3202      	addeq	r2, #2
 8009e36:	07d9      	lsls	r1, r3, #31
 8009e38:	d403      	bmi.n	8009e42 <__lo0bits+0x4e>
 8009e3a:	085b      	lsrs	r3, r3, #1
 8009e3c:	f102 0201 	add.w	r2, r2, #1
 8009e40:	d003      	beq.n	8009e4a <__lo0bits+0x56>
 8009e42:	6003      	str	r3, [r0, #0]
 8009e44:	e7e5      	b.n	8009e12 <__lo0bits+0x1e>
 8009e46:	2200      	movs	r2, #0
 8009e48:	e7e3      	b.n	8009e12 <__lo0bits+0x1e>
 8009e4a:	2220      	movs	r2, #32
 8009e4c:	e7e1      	b.n	8009e12 <__lo0bits+0x1e>
	...

08009e50 <__i2b>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	460c      	mov	r4, r1
 8009e54:	2101      	movs	r1, #1
 8009e56:	f7ff ff05 	bl	8009c64 <_Balloc>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	b928      	cbnz	r0, 8009e6a <__i2b+0x1a>
 8009e5e:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <__i2b+0x24>)
 8009e60:	4805      	ldr	r0, [pc, #20]	; (8009e78 <__i2b+0x28>)
 8009e62:	f240 1145 	movw	r1, #325	; 0x145
 8009e66:	f000 fcb7 	bl	800a7d8 <__assert_func>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	6144      	str	r4, [r0, #20]
 8009e6e:	6103      	str	r3, [r0, #16]
 8009e70:	bd10      	pop	{r4, pc}
 8009e72:	bf00      	nop
 8009e74:	0800b0f9 	.word	0x0800b0f9
 8009e78:	0800b10a 	.word	0x0800b10a

08009e7c <__multiply>:
 8009e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e80:	4691      	mov	r9, r2
 8009e82:	690a      	ldr	r2, [r1, #16]
 8009e84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	bfb8      	it	lt
 8009e8c:	460b      	movlt	r3, r1
 8009e8e:	460c      	mov	r4, r1
 8009e90:	bfbc      	itt	lt
 8009e92:	464c      	movlt	r4, r9
 8009e94:	4699      	movlt	r9, r3
 8009e96:	6927      	ldr	r7, [r4, #16]
 8009e98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e9c:	68a3      	ldr	r3, [r4, #8]
 8009e9e:	6861      	ldr	r1, [r4, #4]
 8009ea0:	eb07 060a 	add.w	r6, r7, sl
 8009ea4:	42b3      	cmp	r3, r6
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	bfb8      	it	lt
 8009eaa:	3101      	addlt	r1, #1
 8009eac:	f7ff feda 	bl	8009c64 <_Balloc>
 8009eb0:	b930      	cbnz	r0, 8009ec0 <__multiply+0x44>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	4b44      	ldr	r3, [pc, #272]	; (8009fc8 <__multiply+0x14c>)
 8009eb6:	4845      	ldr	r0, [pc, #276]	; (8009fcc <__multiply+0x150>)
 8009eb8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009ebc:	f000 fc8c 	bl	800a7d8 <__assert_func>
 8009ec0:	f100 0514 	add.w	r5, r0, #20
 8009ec4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ec8:	462b      	mov	r3, r5
 8009eca:	2200      	movs	r2, #0
 8009ecc:	4543      	cmp	r3, r8
 8009ece:	d321      	bcc.n	8009f14 <__multiply+0x98>
 8009ed0:	f104 0314 	add.w	r3, r4, #20
 8009ed4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ed8:	f109 0314 	add.w	r3, r9, #20
 8009edc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ee0:	9202      	str	r2, [sp, #8]
 8009ee2:	1b3a      	subs	r2, r7, r4
 8009ee4:	3a15      	subs	r2, #21
 8009ee6:	f022 0203 	bic.w	r2, r2, #3
 8009eea:	3204      	adds	r2, #4
 8009eec:	f104 0115 	add.w	r1, r4, #21
 8009ef0:	428f      	cmp	r7, r1
 8009ef2:	bf38      	it	cc
 8009ef4:	2204      	movcc	r2, #4
 8009ef6:	9201      	str	r2, [sp, #4]
 8009ef8:	9a02      	ldr	r2, [sp, #8]
 8009efa:	9303      	str	r3, [sp, #12]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d80c      	bhi.n	8009f1a <__multiply+0x9e>
 8009f00:	2e00      	cmp	r6, #0
 8009f02:	dd03      	ble.n	8009f0c <__multiply+0x90>
 8009f04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d05b      	beq.n	8009fc4 <__multiply+0x148>
 8009f0c:	6106      	str	r6, [r0, #16]
 8009f0e:	b005      	add	sp, #20
 8009f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f14:	f843 2b04 	str.w	r2, [r3], #4
 8009f18:	e7d8      	b.n	8009ecc <__multiply+0x50>
 8009f1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f1e:	f1ba 0f00 	cmp.w	sl, #0
 8009f22:	d024      	beq.n	8009f6e <__multiply+0xf2>
 8009f24:	f104 0e14 	add.w	lr, r4, #20
 8009f28:	46a9      	mov	r9, r5
 8009f2a:	f04f 0c00 	mov.w	ip, #0
 8009f2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f32:	f8d9 1000 	ldr.w	r1, [r9]
 8009f36:	fa1f fb82 	uxth.w	fp, r2
 8009f3a:	b289      	uxth	r1, r1
 8009f3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f44:	f8d9 2000 	ldr.w	r2, [r9]
 8009f48:	4461      	add	r1, ip
 8009f4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f56:	b289      	uxth	r1, r1
 8009f58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f5c:	4577      	cmp	r7, lr
 8009f5e:	f849 1b04 	str.w	r1, [r9], #4
 8009f62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f66:	d8e2      	bhi.n	8009f2e <__multiply+0xb2>
 8009f68:	9a01      	ldr	r2, [sp, #4]
 8009f6a:	f845 c002 	str.w	ip, [r5, r2]
 8009f6e:	9a03      	ldr	r2, [sp, #12]
 8009f70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f74:	3304      	adds	r3, #4
 8009f76:	f1b9 0f00 	cmp.w	r9, #0
 8009f7a:	d021      	beq.n	8009fc0 <__multiply+0x144>
 8009f7c:	6829      	ldr	r1, [r5, #0]
 8009f7e:	f104 0c14 	add.w	ip, r4, #20
 8009f82:	46ae      	mov	lr, r5
 8009f84:	f04f 0a00 	mov.w	sl, #0
 8009f88:	f8bc b000 	ldrh.w	fp, [ip]
 8009f8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f90:	fb09 220b 	mla	r2, r9, fp, r2
 8009f94:	4452      	add	r2, sl
 8009f96:	b289      	uxth	r1, r1
 8009f98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f9c:	f84e 1b04 	str.w	r1, [lr], #4
 8009fa0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009fa4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fa8:	f8be 1000 	ldrh.w	r1, [lr]
 8009fac:	fb09 110a 	mla	r1, r9, sl, r1
 8009fb0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009fb4:	4567      	cmp	r7, ip
 8009fb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fba:	d8e5      	bhi.n	8009f88 <__multiply+0x10c>
 8009fbc:	9a01      	ldr	r2, [sp, #4]
 8009fbe:	50a9      	str	r1, [r5, r2]
 8009fc0:	3504      	adds	r5, #4
 8009fc2:	e799      	b.n	8009ef8 <__multiply+0x7c>
 8009fc4:	3e01      	subs	r6, #1
 8009fc6:	e79b      	b.n	8009f00 <__multiply+0x84>
 8009fc8:	0800b0f9 	.word	0x0800b0f9
 8009fcc:	0800b10a 	.word	0x0800b10a

08009fd0 <__pow5mult>:
 8009fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	4615      	mov	r5, r2
 8009fd6:	f012 0203 	ands.w	r2, r2, #3
 8009fda:	4606      	mov	r6, r0
 8009fdc:	460f      	mov	r7, r1
 8009fde:	d007      	beq.n	8009ff0 <__pow5mult+0x20>
 8009fe0:	4c25      	ldr	r4, [pc, #148]	; (800a078 <__pow5mult+0xa8>)
 8009fe2:	3a01      	subs	r2, #1
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fea:	f7ff fe9d 	bl	8009d28 <__multadd>
 8009fee:	4607      	mov	r7, r0
 8009ff0:	10ad      	asrs	r5, r5, #2
 8009ff2:	d03d      	beq.n	800a070 <__pow5mult+0xa0>
 8009ff4:	69f4      	ldr	r4, [r6, #28]
 8009ff6:	b97c      	cbnz	r4, 800a018 <__pow5mult+0x48>
 8009ff8:	2010      	movs	r0, #16
 8009ffa:	f7ff fd7f 	bl	8009afc <malloc>
 8009ffe:	4602      	mov	r2, r0
 800a000:	61f0      	str	r0, [r6, #28]
 800a002:	b928      	cbnz	r0, 800a010 <__pow5mult+0x40>
 800a004:	4b1d      	ldr	r3, [pc, #116]	; (800a07c <__pow5mult+0xac>)
 800a006:	481e      	ldr	r0, [pc, #120]	; (800a080 <__pow5mult+0xb0>)
 800a008:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a00c:	f000 fbe4 	bl	800a7d8 <__assert_func>
 800a010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a014:	6004      	str	r4, [r0, #0]
 800a016:	60c4      	str	r4, [r0, #12]
 800a018:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a01c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a020:	b94c      	cbnz	r4, 800a036 <__pow5mult+0x66>
 800a022:	f240 2171 	movw	r1, #625	; 0x271
 800a026:	4630      	mov	r0, r6
 800a028:	f7ff ff12 	bl	8009e50 <__i2b>
 800a02c:	2300      	movs	r3, #0
 800a02e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a032:	4604      	mov	r4, r0
 800a034:	6003      	str	r3, [r0, #0]
 800a036:	f04f 0900 	mov.w	r9, #0
 800a03a:	07eb      	lsls	r3, r5, #31
 800a03c:	d50a      	bpl.n	800a054 <__pow5mult+0x84>
 800a03e:	4639      	mov	r1, r7
 800a040:	4622      	mov	r2, r4
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff ff1a 	bl	8009e7c <__multiply>
 800a048:	4639      	mov	r1, r7
 800a04a:	4680      	mov	r8, r0
 800a04c:	4630      	mov	r0, r6
 800a04e:	f7ff fe49 	bl	8009ce4 <_Bfree>
 800a052:	4647      	mov	r7, r8
 800a054:	106d      	asrs	r5, r5, #1
 800a056:	d00b      	beq.n	800a070 <__pow5mult+0xa0>
 800a058:	6820      	ldr	r0, [r4, #0]
 800a05a:	b938      	cbnz	r0, 800a06c <__pow5mult+0x9c>
 800a05c:	4622      	mov	r2, r4
 800a05e:	4621      	mov	r1, r4
 800a060:	4630      	mov	r0, r6
 800a062:	f7ff ff0b 	bl	8009e7c <__multiply>
 800a066:	6020      	str	r0, [r4, #0]
 800a068:	f8c0 9000 	str.w	r9, [r0]
 800a06c:	4604      	mov	r4, r0
 800a06e:	e7e4      	b.n	800a03a <__pow5mult+0x6a>
 800a070:	4638      	mov	r0, r7
 800a072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a076:	bf00      	nop
 800a078:	0800b258 	.word	0x0800b258
 800a07c:	0800b08a 	.word	0x0800b08a
 800a080:	0800b10a 	.word	0x0800b10a

0800a084 <__lshift>:
 800a084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a088:	460c      	mov	r4, r1
 800a08a:	6849      	ldr	r1, [r1, #4]
 800a08c:	6923      	ldr	r3, [r4, #16]
 800a08e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a092:	68a3      	ldr	r3, [r4, #8]
 800a094:	4607      	mov	r7, r0
 800a096:	4691      	mov	r9, r2
 800a098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a09c:	f108 0601 	add.w	r6, r8, #1
 800a0a0:	42b3      	cmp	r3, r6
 800a0a2:	db0b      	blt.n	800a0bc <__lshift+0x38>
 800a0a4:	4638      	mov	r0, r7
 800a0a6:	f7ff fddd 	bl	8009c64 <_Balloc>
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	b948      	cbnz	r0, 800a0c2 <__lshift+0x3e>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	4b28      	ldr	r3, [pc, #160]	; (800a154 <__lshift+0xd0>)
 800a0b2:	4829      	ldr	r0, [pc, #164]	; (800a158 <__lshift+0xd4>)
 800a0b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a0b8:	f000 fb8e 	bl	800a7d8 <__assert_func>
 800a0bc:	3101      	adds	r1, #1
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	e7ee      	b.n	800a0a0 <__lshift+0x1c>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f100 0114 	add.w	r1, r0, #20
 800a0c8:	f100 0210 	add.w	r2, r0, #16
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	4553      	cmp	r3, sl
 800a0d0:	db33      	blt.n	800a13a <__lshift+0xb6>
 800a0d2:	6920      	ldr	r0, [r4, #16]
 800a0d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0d8:	f104 0314 	add.w	r3, r4, #20
 800a0dc:	f019 091f 	ands.w	r9, r9, #31
 800a0e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a0e8:	d02b      	beq.n	800a142 <__lshift+0xbe>
 800a0ea:	f1c9 0e20 	rsb	lr, r9, #32
 800a0ee:	468a      	mov	sl, r1
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	6818      	ldr	r0, [r3, #0]
 800a0f4:	fa00 f009 	lsl.w	r0, r0, r9
 800a0f8:	4310      	orrs	r0, r2
 800a0fa:	f84a 0b04 	str.w	r0, [sl], #4
 800a0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a102:	459c      	cmp	ip, r3
 800a104:	fa22 f20e 	lsr.w	r2, r2, lr
 800a108:	d8f3      	bhi.n	800a0f2 <__lshift+0x6e>
 800a10a:	ebac 0304 	sub.w	r3, ip, r4
 800a10e:	3b15      	subs	r3, #21
 800a110:	f023 0303 	bic.w	r3, r3, #3
 800a114:	3304      	adds	r3, #4
 800a116:	f104 0015 	add.w	r0, r4, #21
 800a11a:	4584      	cmp	ip, r0
 800a11c:	bf38      	it	cc
 800a11e:	2304      	movcc	r3, #4
 800a120:	50ca      	str	r2, [r1, r3]
 800a122:	b10a      	cbz	r2, 800a128 <__lshift+0xa4>
 800a124:	f108 0602 	add.w	r6, r8, #2
 800a128:	3e01      	subs	r6, #1
 800a12a:	4638      	mov	r0, r7
 800a12c:	612e      	str	r6, [r5, #16]
 800a12e:	4621      	mov	r1, r4
 800a130:	f7ff fdd8 	bl	8009ce4 <_Bfree>
 800a134:	4628      	mov	r0, r5
 800a136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a13a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a13e:	3301      	adds	r3, #1
 800a140:	e7c5      	b.n	800a0ce <__lshift+0x4a>
 800a142:	3904      	subs	r1, #4
 800a144:	f853 2b04 	ldr.w	r2, [r3], #4
 800a148:	f841 2f04 	str.w	r2, [r1, #4]!
 800a14c:	459c      	cmp	ip, r3
 800a14e:	d8f9      	bhi.n	800a144 <__lshift+0xc0>
 800a150:	e7ea      	b.n	800a128 <__lshift+0xa4>
 800a152:	bf00      	nop
 800a154:	0800b0f9 	.word	0x0800b0f9
 800a158:	0800b10a 	.word	0x0800b10a

0800a15c <__mcmp>:
 800a15c:	b530      	push	{r4, r5, lr}
 800a15e:	6902      	ldr	r2, [r0, #16]
 800a160:	690c      	ldr	r4, [r1, #16]
 800a162:	1b12      	subs	r2, r2, r4
 800a164:	d10e      	bne.n	800a184 <__mcmp+0x28>
 800a166:	f100 0314 	add.w	r3, r0, #20
 800a16a:	3114      	adds	r1, #20
 800a16c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a174:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a178:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a17c:	42a5      	cmp	r5, r4
 800a17e:	d003      	beq.n	800a188 <__mcmp+0x2c>
 800a180:	d305      	bcc.n	800a18e <__mcmp+0x32>
 800a182:	2201      	movs	r2, #1
 800a184:	4610      	mov	r0, r2
 800a186:	bd30      	pop	{r4, r5, pc}
 800a188:	4283      	cmp	r3, r0
 800a18a:	d3f3      	bcc.n	800a174 <__mcmp+0x18>
 800a18c:	e7fa      	b.n	800a184 <__mcmp+0x28>
 800a18e:	f04f 32ff 	mov.w	r2, #4294967295
 800a192:	e7f7      	b.n	800a184 <__mcmp+0x28>

0800a194 <__mdiff>:
 800a194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a198:	460c      	mov	r4, r1
 800a19a:	4606      	mov	r6, r0
 800a19c:	4611      	mov	r1, r2
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4690      	mov	r8, r2
 800a1a2:	f7ff ffdb 	bl	800a15c <__mcmp>
 800a1a6:	1e05      	subs	r5, r0, #0
 800a1a8:	d110      	bne.n	800a1cc <__mdiff+0x38>
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff fd59 	bl	8009c64 <_Balloc>
 800a1b2:	b930      	cbnz	r0, 800a1c2 <__mdiff+0x2e>
 800a1b4:	4b3a      	ldr	r3, [pc, #232]	; (800a2a0 <__mdiff+0x10c>)
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	f240 2137 	movw	r1, #567	; 0x237
 800a1bc:	4839      	ldr	r0, [pc, #228]	; (800a2a4 <__mdiff+0x110>)
 800a1be:	f000 fb0b 	bl	800a7d8 <__assert_func>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1cc:	bfa4      	itt	ge
 800a1ce:	4643      	movge	r3, r8
 800a1d0:	46a0      	movge	r8, r4
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a1d8:	bfa6      	itte	ge
 800a1da:	461c      	movge	r4, r3
 800a1dc:	2500      	movge	r5, #0
 800a1de:	2501      	movlt	r5, #1
 800a1e0:	f7ff fd40 	bl	8009c64 <_Balloc>
 800a1e4:	b920      	cbnz	r0, 800a1f0 <__mdiff+0x5c>
 800a1e6:	4b2e      	ldr	r3, [pc, #184]	; (800a2a0 <__mdiff+0x10c>)
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	f240 2145 	movw	r1, #581	; 0x245
 800a1ee:	e7e5      	b.n	800a1bc <__mdiff+0x28>
 800a1f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a1f4:	6926      	ldr	r6, [r4, #16]
 800a1f6:	60c5      	str	r5, [r0, #12]
 800a1f8:	f104 0914 	add.w	r9, r4, #20
 800a1fc:	f108 0514 	add.w	r5, r8, #20
 800a200:	f100 0e14 	add.w	lr, r0, #20
 800a204:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a208:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a20c:	f108 0210 	add.w	r2, r8, #16
 800a210:	46f2      	mov	sl, lr
 800a212:	2100      	movs	r1, #0
 800a214:	f859 3b04 	ldr.w	r3, [r9], #4
 800a218:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a21c:	fa11 f88b 	uxtah	r8, r1, fp
 800a220:	b299      	uxth	r1, r3
 800a222:	0c1b      	lsrs	r3, r3, #16
 800a224:	eba8 0801 	sub.w	r8, r8, r1
 800a228:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a22c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a230:	fa1f f888 	uxth.w	r8, r8
 800a234:	1419      	asrs	r1, r3, #16
 800a236:	454e      	cmp	r6, r9
 800a238:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a23c:	f84a 3b04 	str.w	r3, [sl], #4
 800a240:	d8e8      	bhi.n	800a214 <__mdiff+0x80>
 800a242:	1b33      	subs	r3, r6, r4
 800a244:	3b15      	subs	r3, #21
 800a246:	f023 0303 	bic.w	r3, r3, #3
 800a24a:	3304      	adds	r3, #4
 800a24c:	3415      	adds	r4, #21
 800a24e:	42a6      	cmp	r6, r4
 800a250:	bf38      	it	cc
 800a252:	2304      	movcc	r3, #4
 800a254:	441d      	add	r5, r3
 800a256:	4473      	add	r3, lr
 800a258:	469e      	mov	lr, r3
 800a25a:	462e      	mov	r6, r5
 800a25c:	4566      	cmp	r6, ip
 800a25e:	d30e      	bcc.n	800a27e <__mdiff+0xea>
 800a260:	f10c 0203 	add.w	r2, ip, #3
 800a264:	1b52      	subs	r2, r2, r5
 800a266:	f022 0203 	bic.w	r2, r2, #3
 800a26a:	3d03      	subs	r5, #3
 800a26c:	45ac      	cmp	ip, r5
 800a26e:	bf38      	it	cc
 800a270:	2200      	movcc	r2, #0
 800a272:	4413      	add	r3, r2
 800a274:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a278:	b17a      	cbz	r2, 800a29a <__mdiff+0x106>
 800a27a:	6107      	str	r7, [r0, #16]
 800a27c:	e7a4      	b.n	800a1c8 <__mdiff+0x34>
 800a27e:	f856 8b04 	ldr.w	r8, [r6], #4
 800a282:	fa11 f288 	uxtah	r2, r1, r8
 800a286:	1414      	asrs	r4, r2, #16
 800a288:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a28c:	b292      	uxth	r2, r2
 800a28e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a292:	f84e 2b04 	str.w	r2, [lr], #4
 800a296:	1421      	asrs	r1, r4, #16
 800a298:	e7e0      	b.n	800a25c <__mdiff+0xc8>
 800a29a:	3f01      	subs	r7, #1
 800a29c:	e7ea      	b.n	800a274 <__mdiff+0xe0>
 800a29e:	bf00      	nop
 800a2a0:	0800b0f9 	.word	0x0800b0f9
 800a2a4:	0800b10a 	.word	0x0800b10a

0800a2a8 <__d2b>:
 800a2a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	ec59 8b10 	vmov	r8, r9, d0
 800a2b4:	4616      	mov	r6, r2
 800a2b6:	f7ff fcd5 	bl	8009c64 <_Balloc>
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	b930      	cbnz	r0, 800a2cc <__d2b+0x24>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	4b24      	ldr	r3, [pc, #144]	; (800a354 <__d2b+0xac>)
 800a2c2:	4825      	ldr	r0, [pc, #148]	; (800a358 <__d2b+0xb0>)
 800a2c4:	f240 310f 	movw	r1, #783	; 0x30f
 800a2c8:	f000 fa86 	bl	800a7d8 <__assert_func>
 800a2cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2d4:	bb2d      	cbnz	r5, 800a322 <__d2b+0x7a>
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	f1b8 0300 	subs.w	r3, r8, #0
 800a2dc:	d026      	beq.n	800a32c <__d2b+0x84>
 800a2de:	4668      	mov	r0, sp
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	f7ff fd87 	bl	8009df4 <__lo0bits>
 800a2e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a2ea:	b1e8      	cbz	r0, 800a328 <__d2b+0x80>
 800a2ec:	f1c0 0320 	rsb	r3, r0, #32
 800a2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f4:	430b      	orrs	r3, r1
 800a2f6:	40c2      	lsrs	r2, r0
 800a2f8:	6163      	str	r3, [r4, #20]
 800a2fa:	9201      	str	r2, [sp, #4]
 800a2fc:	9b01      	ldr	r3, [sp, #4]
 800a2fe:	61a3      	str	r3, [r4, #24]
 800a300:	2b00      	cmp	r3, #0
 800a302:	bf14      	ite	ne
 800a304:	2202      	movne	r2, #2
 800a306:	2201      	moveq	r2, #1
 800a308:	6122      	str	r2, [r4, #16]
 800a30a:	b1bd      	cbz	r5, 800a33c <__d2b+0x94>
 800a30c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a310:	4405      	add	r5, r0
 800a312:	603d      	str	r5, [r7, #0]
 800a314:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a318:	6030      	str	r0, [r6, #0]
 800a31a:	4620      	mov	r0, r4
 800a31c:	b003      	add	sp, #12
 800a31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a326:	e7d6      	b.n	800a2d6 <__d2b+0x2e>
 800a328:	6161      	str	r1, [r4, #20]
 800a32a:	e7e7      	b.n	800a2fc <__d2b+0x54>
 800a32c:	a801      	add	r0, sp, #4
 800a32e:	f7ff fd61 	bl	8009df4 <__lo0bits>
 800a332:	9b01      	ldr	r3, [sp, #4]
 800a334:	6163      	str	r3, [r4, #20]
 800a336:	3020      	adds	r0, #32
 800a338:	2201      	movs	r2, #1
 800a33a:	e7e5      	b.n	800a308 <__d2b+0x60>
 800a33c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a340:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a344:	6038      	str	r0, [r7, #0]
 800a346:	6918      	ldr	r0, [r3, #16]
 800a348:	f7ff fd34 	bl	8009db4 <__hi0bits>
 800a34c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a350:	e7e2      	b.n	800a318 <__d2b+0x70>
 800a352:	bf00      	nop
 800a354:	0800b0f9 	.word	0x0800b0f9
 800a358:	0800b10a 	.word	0x0800b10a

0800a35c <__ssputs_r>:
 800a35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a360:	688e      	ldr	r6, [r1, #8]
 800a362:	461f      	mov	r7, r3
 800a364:	42be      	cmp	r6, r7
 800a366:	680b      	ldr	r3, [r1, #0]
 800a368:	4682      	mov	sl, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	4690      	mov	r8, r2
 800a36e:	d82c      	bhi.n	800a3ca <__ssputs_r+0x6e>
 800a370:	898a      	ldrh	r2, [r1, #12]
 800a372:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a376:	d026      	beq.n	800a3c6 <__ssputs_r+0x6a>
 800a378:	6965      	ldr	r5, [r4, #20]
 800a37a:	6909      	ldr	r1, [r1, #16]
 800a37c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a380:	eba3 0901 	sub.w	r9, r3, r1
 800a384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a388:	1c7b      	adds	r3, r7, #1
 800a38a:	444b      	add	r3, r9
 800a38c:	106d      	asrs	r5, r5, #1
 800a38e:	429d      	cmp	r5, r3
 800a390:	bf38      	it	cc
 800a392:	461d      	movcc	r5, r3
 800a394:	0553      	lsls	r3, r2, #21
 800a396:	d527      	bpl.n	800a3e8 <__ssputs_r+0x8c>
 800a398:	4629      	mov	r1, r5
 800a39a:	f7ff fbd7 	bl	8009b4c <_malloc_r>
 800a39e:	4606      	mov	r6, r0
 800a3a0:	b360      	cbz	r0, 800a3fc <__ssputs_r+0xa0>
 800a3a2:	6921      	ldr	r1, [r4, #16]
 800a3a4:	464a      	mov	r2, r9
 800a3a6:	f000 fa09 	bl	800a7bc <memcpy>
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	6126      	str	r6, [r4, #16]
 800a3b8:	6165      	str	r5, [r4, #20]
 800a3ba:	444e      	add	r6, r9
 800a3bc:	eba5 0509 	sub.w	r5, r5, r9
 800a3c0:	6026      	str	r6, [r4, #0]
 800a3c2:	60a5      	str	r5, [r4, #8]
 800a3c4:	463e      	mov	r6, r7
 800a3c6:	42be      	cmp	r6, r7
 800a3c8:	d900      	bls.n	800a3cc <__ssputs_r+0x70>
 800a3ca:	463e      	mov	r6, r7
 800a3cc:	6820      	ldr	r0, [r4, #0]
 800a3ce:	4632      	mov	r2, r6
 800a3d0:	4641      	mov	r1, r8
 800a3d2:	f000 f9c9 	bl	800a768 <memmove>
 800a3d6:	68a3      	ldr	r3, [r4, #8]
 800a3d8:	1b9b      	subs	r3, r3, r6
 800a3da:	60a3      	str	r3, [r4, #8]
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	4433      	add	r3, r6
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e8:	462a      	mov	r2, r5
 800a3ea:	f000 fa3b 	bl	800a864 <_realloc_r>
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d1e0      	bne.n	800a3b6 <__ssputs_r+0x5a>
 800a3f4:	6921      	ldr	r1, [r4, #16]
 800a3f6:	4650      	mov	r0, sl
 800a3f8:	f7ff fb34 	bl	8009a64 <_free_r>
 800a3fc:	230c      	movs	r3, #12
 800a3fe:	f8ca 3000 	str.w	r3, [sl]
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	f04f 30ff 	mov.w	r0, #4294967295
 800a40e:	e7e9      	b.n	800a3e4 <__ssputs_r+0x88>

0800a410 <_svfiprintf_r>:
 800a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	4698      	mov	r8, r3
 800a416:	898b      	ldrh	r3, [r1, #12]
 800a418:	061b      	lsls	r3, r3, #24
 800a41a:	b09d      	sub	sp, #116	; 0x74
 800a41c:	4607      	mov	r7, r0
 800a41e:	460d      	mov	r5, r1
 800a420:	4614      	mov	r4, r2
 800a422:	d50e      	bpl.n	800a442 <_svfiprintf_r+0x32>
 800a424:	690b      	ldr	r3, [r1, #16]
 800a426:	b963      	cbnz	r3, 800a442 <_svfiprintf_r+0x32>
 800a428:	2140      	movs	r1, #64	; 0x40
 800a42a:	f7ff fb8f 	bl	8009b4c <_malloc_r>
 800a42e:	6028      	str	r0, [r5, #0]
 800a430:	6128      	str	r0, [r5, #16]
 800a432:	b920      	cbnz	r0, 800a43e <_svfiprintf_r+0x2e>
 800a434:	230c      	movs	r3, #12
 800a436:	603b      	str	r3, [r7, #0]
 800a438:	f04f 30ff 	mov.w	r0, #4294967295
 800a43c:	e0d0      	b.n	800a5e0 <_svfiprintf_r+0x1d0>
 800a43e:	2340      	movs	r3, #64	; 0x40
 800a440:	616b      	str	r3, [r5, #20]
 800a442:	2300      	movs	r3, #0
 800a444:	9309      	str	r3, [sp, #36]	; 0x24
 800a446:	2320      	movs	r3, #32
 800a448:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a44c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a450:	2330      	movs	r3, #48	; 0x30
 800a452:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a5f8 <_svfiprintf_r+0x1e8>
 800a456:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a45a:	f04f 0901 	mov.w	r9, #1
 800a45e:	4623      	mov	r3, r4
 800a460:	469a      	mov	sl, r3
 800a462:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a466:	b10a      	cbz	r2, 800a46c <_svfiprintf_r+0x5c>
 800a468:	2a25      	cmp	r2, #37	; 0x25
 800a46a:	d1f9      	bne.n	800a460 <_svfiprintf_r+0x50>
 800a46c:	ebba 0b04 	subs.w	fp, sl, r4
 800a470:	d00b      	beq.n	800a48a <_svfiprintf_r+0x7a>
 800a472:	465b      	mov	r3, fp
 800a474:	4622      	mov	r2, r4
 800a476:	4629      	mov	r1, r5
 800a478:	4638      	mov	r0, r7
 800a47a:	f7ff ff6f 	bl	800a35c <__ssputs_r>
 800a47e:	3001      	adds	r0, #1
 800a480:	f000 80a9 	beq.w	800a5d6 <_svfiprintf_r+0x1c6>
 800a484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a486:	445a      	add	r2, fp
 800a488:	9209      	str	r2, [sp, #36]	; 0x24
 800a48a:	f89a 3000 	ldrb.w	r3, [sl]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 80a1 	beq.w	800a5d6 <_svfiprintf_r+0x1c6>
 800a494:	2300      	movs	r3, #0
 800a496:	f04f 32ff 	mov.w	r2, #4294967295
 800a49a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a49e:	f10a 0a01 	add.w	sl, sl, #1
 800a4a2:	9304      	str	r3, [sp, #16]
 800a4a4:	9307      	str	r3, [sp, #28]
 800a4a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4aa:	931a      	str	r3, [sp, #104]	; 0x68
 800a4ac:	4654      	mov	r4, sl
 800a4ae:	2205      	movs	r2, #5
 800a4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b4:	4850      	ldr	r0, [pc, #320]	; (800a5f8 <_svfiprintf_r+0x1e8>)
 800a4b6:	f7f5 feab 	bl	8000210 <memchr>
 800a4ba:	9a04      	ldr	r2, [sp, #16]
 800a4bc:	b9d8      	cbnz	r0, 800a4f6 <_svfiprintf_r+0xe6>
 800a4be:	06d0      	lsls	r0, r2, #27
 800a4c0:	bf44      	itt	mi
 800a4c2:	2320      	movmi	r3, #32
 800a4c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4c8:	0711      	lsls	r1, r2, #28
 800a4ca:	bf44      	itt	mi
 800a4cc:	232b      	movmi	r3, #43	; 0x2b
 800a4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a4d8:	d015      	beq.n	800a506 <_svfiprintf_r+0xf6>
 800a4da:	9a07      	ldr	r2, [sp, #28]
 800a4dc:	4654      	mov	r4, sl
 800a4de:	2000      	movs	r0, #0
 800a4e0:	f04f 0c0a 	mov.w	ip, #10
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4ea:	3b30      	subs	r3, #48	; 0x30
 800a4ec:	2b09      	cmp	r3, #9
 800a4ee:	d94d      	bls.n	800a58c <_svfiprintf_r+0x17c>
 800a4f0:	b1b0      	cbz	r0, 800a520 <_svfiprintf_r+0x110>
 800a4f2:	9207      	str	r2, [sp, #28]
 800a4f4:	e014      	b.n	800a520 <_svfiprintf_r+0x110>
 800a4f6:	eba0 0308 	sub.w	r3, r0, r8
 800a4fa:	fa09 f303 	lsl.w	r3, r9, r3
 800a4fe:	4313      	orrs	r3, r2
 800a500:	9304      	str	r3, [sp, #16]
 800a502:	46a2      	mov	sl, r4
 800a504:	e7d2      	b.n	800a4ac <_svfiprintf_r+0x9c>
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	1d19      	adds	r1, r3, #4
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	9103      	str	r1, [sp, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	bfbb      	ittet	lt
 800a512:	425b      	neglt	r3, r3
 800a514:	f042 0202 	orrlt.w	r2, r2, #2
 800a518:	9307      	strge	r3, [sp, #28]
 800a51a:	9307      	strlt	r3, [sp, #28]
 800a51c:	bfb8      	it	lt
 800a51e:	9204      	strlt	r2, [sp, #16]
 800a520:	7823      	ldrb	r3, [r4, #0]
 800a522:	2b2e      	cmp	r3, #46	; 0x2e
 800a524:	d10c      	bne.n	800a540 <_svfiprintf_r+0x130>
 800a526:	7863      	ldrb	r3, [r4, #1]
 800a528:	2b2a      	cmp	r3, #42	; 0x2a
 800a52a:	d134      	bne.n	800a596 <_svfiprintf_r+0x186>
 800a52c:	9b03      	ldr	r3, [sp, #12]
 800a52e:	1d1a      	adds	r2, r3, #4
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	9203      	str	r2, [sp, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	bfb8      	it	lt
 800a538:	f04f 33ff 	movlt.w	r3, #4294967295
 800a53c:	3402      	adds	r4, #2
 800a53e:	9305      	str	r3, [sp, #20]
 800a540:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a608 <_svfiprintf_r+0x1f8>
 800a544:	7821      	ldrb	r1, [r4, #0]
 800a546:	2203      	movs	r2, #3
 800a548:	4650      	mov	r0, sl
 800a54a:	f7f5 fe61 	bl	8000210 <memchr>
 800a54e:	b138      	cbz	r0, 800a560 <_svfiprintf_r+0x150>
 800a550:	9b04      	ldr	r3, [sp, #16]
 800a552:	eba0 000a 	sub.w	r0, r0, sl
 800a556:	2240      	movs	r2, #64	; 0x40
 800a558:	4082      	lsls	r2, r0
 800a55a:	4313      	orrs	r3, r2
 800a55c:	3401      	adds	r4, #1
 800a55e:	9304      	str	r3, [sp, #16]
 800a560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a564:	4825      	ldr	r0, [pc, #148]	; (800a5fc <_svfiprintf_r+0x1ec>)
 800a566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a56a:	2206      	movs	r2, #6
 800a56c:	f7f5 fe50 	bl	8000210 <memchr>
 800a570:	2800      	cmp	r0, #0
 800a572:	d038      	beq.n	800a5e6 <_svfiprintf_r+0x1d6>
 800a574:	4b22      	ldr	r3, [pc, #136]	; (800a600 <_svfiprintf_r+0x1f0>)
 800a576:	bb1b      	cbnz	r3, 800a5c0 <_svfiprintf_r+0x1b0>
 800a578:	9b03      	ldr	r3, [sp, #12]
 800a57a:	3307      	adds	r3, #7
 800a57c:	f023 0307 	bic.w	r3, r3, #7
 800a580:	3308      	adds	r3, #8
 800a582:	9303      	str	r3, [sp, #12]
 800a584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a586:	4433      	add	r3, r6
 800a588:	9309      	str	r3, [sp, #36]	; 0x24
 800a58a:	e768      	b.n	800a45e <_svfiprintf_r+0x4e>
 800a58c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a590:	460c      	mov	r4, r1
 800a592:	2001      	movs	r0, #1
 800a594:	e7a6      	b.n	800a4e4 <_svfiprintf_r+0xd4>
 800a596:	2300      	movs	r3, #0
 800a598:	3401      	adds	r4, #1
 800a59a:	9305      	str	r3, [sp, #20]
 800a59c:	4619      	mov	r1, r3
 800a59e:	f04f 0c0a 	mov.w	ip, #10
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5a8:	3a30      	subs	r2, #48	; 0x30
 800a5aa:	2a09      	cmp	r2, #9
 800a5ac:	d903      	bls.n	800a5b6 <_svfiprintf_r+0x1a6>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d0c6      	beq.n	800a540 <_svfiprintf_r+0x130>
 800a5b2:	9105      	str	r1, [sp, #20]
 800a5b4:	e7c4      	b.n	800a540 <_svfiprintf_r+0x130>
 800a5b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e7f0      	b.n	800a5a2 <_svfiprintf_r+0x192>
 800a5c0:	ab03      	add	r3, sp, #12
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	462a      	mov	r2, r5
 800a5c6:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <_svfiprintf_r+0x1f4>)
 800a5c8:	a904      	add	r1, sp, #16
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	f7fd fe62 	bl	8008294 <_printf_float>
 800a5d0:	1c42      	adds	r2, r0, #1
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	d1d6      	bne.n	800a584 <_svfiprintf_r+0x174>
 800a5d6:	89ab      	ldrh	r3, [r5, #12]
 800a5d8:	065b      	lsls	r3, r3, #25
 800a5da:	f53f af2d 	bmi.w	800a438 <_svfiprintf_r+0x28>
 800a5de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5e0:	b01d      	add	sp, #116	; 0x74
 800a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e6:	ab03      	add	r3, sp, #12
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	462a      	mov	r2, r5
 800a5ec:	4b05      	ldr	r3, [pc, #20]	; (800a604 <_svfiprintf_r+0x1f4>)
 800a5ee:	a904      	add	r1, sp, #16
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	f7fe f8f3 	bl	80087dc <_printf_i>
 800a5f6:	e7eb      	b.n	800a5d0 <_svfiprintf_r+0x1c0>
 800a5f8:	0800b264 	.word	0x0800b264
 800a5fc:	0800b26e 	.word	0x0800b26e
 800a600:	08008295 	.word	0x08008295
 800a604:	0800a35d 	.word	0x0800a35d
 800a608:	0800b26a 	.word	0x0800b26a

0800a60c <__sflush_r>:
 800a60c:	898a      	ldrh	r2, [r1, #12]
 800a60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a612:	4605      	mov	r5, r0
 800a614:	0710      	lsls	r0, r2, #28
 800a616:	460c      	mov	r4, r1
 800a618:	d458      	bmi.n	800a6cc <__sflush_r+0xc0>
 800a61a:	684b      	ldr	r3, [r1, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	dc05      	bgt.n	800a62c <__sflush_r+0x20>
 800a620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a622:	2b00      	cmp	r3, #0
 800a624:	dc02      	bgt.n	800a62c <__sflush_r+0x20>
 800a626:	2000      	movs	r0, #0
 800a628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a62c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a62e:	2e00      	cmp	r6, #0
 800a630:	d0f9      	beq.n	800a626 <__sflush_r+0x1a>
 800a632:	2300      	movs	r3, #0
 800a634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a638:	682f      	ldr	r7, [r5, #0]
 800a63a:	6a21      	ldr	r1, [r4, #32]
 800a63c:	602b      	str	r3, [r5, #0]
 800a63e:	d032      	beq.n	800a6a6 <__sflush_r+0x9a>
 800a640:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	075a      	lsls	r2, r3, #29
 800a646:	d505      	bpl.n	800a654 <__sflush_r+0x48>
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	1ac0      	subs	r0, r0, r3
 800a64c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a64e:	b10b      	cbz	r3, 800a654 <__sflush_r+0x48>
 800a650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a652:	1ac0      	subs	r0, r0, r3
 800a654:	2300      	movs	r3, #0
 800a656:	4602      	mov	r2, r0
 800a658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a65a:	6a21      	ldr	r1, [r4, #32]
 800a65c:	4628      	mov	r0, r5
 800a65e:	47b0      	blx	r6
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	d106      	bne.n	800a674 <__sflush_r+0x68>
 800a666:	6829      	ldr	r1, [r5, #0]
 800a668:	291d      	cmp	r1, #29
 800a66a:	d82b      	bhi.n	800a6c4 <__sflush_r+0xb8>
 800a66c:	4a29      	ldr	r2, [pc, #164]	; (800a714 <__sflush_r+0x108>)
 800a66e:	410a      	asrs	r2, r1
 800a670:	07d6      	lsls	r6, r2, #31
 800a672:	d427      	bmi.n	800a6c4 <__sflush_r+0xb8>
 800a674:	2200      	movs	r2, #0
 800a676:	6062      	str	r2, [r4, #4]
 800a678:	04d9      	lsls	r1, r3, #19
 800a67a:	6922      	ldr	r2, [r4, #16]
 800a67c:	6022      	str	r2, [r4, #0]
 800a67e:	d504      	bpl.n	800a68a <__sflush_r+0x7e>
 800a680:	1c42      	adds	r2, r0, #1
 800a682:	d101      	bne.n	800a688 <__sflush_r+0x7c>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b903      	cbnz	r3, 800a68a <__sflush_r+0x7e>
 800a688:	6560      	str	r0, [r4, #84]	; 0x54
 800a68a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a68c:	602f      	str	r7, [r5, #0]
 800a68e:	2900      	cmp	r1, #0
 800a690:	d0c9      	beq.n	800a626 <__sflush_r+0x1a>
 800a692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a696:	4299      	cmp	r1, r3
 800a698:	d002      	beq.n	800a6a0 <__sflush_r+0x94>
 800a69a:	4628      	mov	r0, r5
 800a69c:	f7ff f9e2 	bl	8009a64 <_free_r>
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	6360      	str	r0, [r4, #52]	; 0x34
 800a6a4:	e7c0      	b.n	800a628 <__sflush_r+0x1c>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	47b0      	blx	r6
 800a6ac:	1c41      	adds	r1, r0, #1
 800a6ae:	d1c8      	bne.n	800a642 <__sflush_r+0x36>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d0c5      	beq.n	800a642 <__sflush_r+0x36>
 800a6b6:	2b1d      	cmp	r3, #29
 800a6b8:	d001      	beq.n	800a6be <__sflush_r+0xb2>
 800a6ba:	2b16      	cmp	r3, #22
 800a6bc:	d101      	bne.n	800a6c2 <__sflush_r+0xb6>
 800a6be:	602f      	str	r7, [r5, #0]
 800a6c0:	e7b1      	b.n	800a626 <__sflush_r+0x1a>
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c8:	81a3      	strh	r3, [r4, #12]
 800a6ca:	e7ad      	b.n	800a628 <__sflush_r+0x1c>
 800a6cc:	690f      	ldr	r7, [r1, #16]
 800a6ce:	2f00      	cmp	r7, #0
 800a6d0:	d0a9      	beq.n	800a626 <__sflush_r+0x1a>
 800a6d2:	0793      	lsls	r3, r2, #30
 800a6d4:	680e      	ldr	r6, [r1, #0]
 800a6d6:	bf08      	it	eq
 800a6d8:	694b      	ldreq	r3, [r1, #20]
 800a6da:	600f      	str	r7, [r1, #0]
 800a6dc:	bf18      	it	ne
 800a6de:	2300      	movne	r3, #0
 800a6e0:	eba6 0807 	sub.w	r8, r6, r7
 800a6e4:	608b      	str	r3, [r1, #8]
 800a6e6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ea:	dd9c      	ble.n	800a626 <__sflush_r+0x1a>
 800a6ec:	6a21      	ldr	r1, [r4, #32]
 800a6ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6f0:	4643      	mov	r3, r8
 800a6f2:	463a      	mov	r2, r7
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	47b0      	blx	r6
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	dc06      	bgt.n	800a70a <__sflush_r+0xfe>
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a702:	81a3      	strh	r3, [r4, #12]
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
 800a708:	e78e      	b.n	800a628 <__sflush_r+0x1c>
 800a70a:	4407      	add	r7, r0
 800a70c:	eba8 0800 	sub.w	r8, r8, r0
 800a710:	e7e9      	b.n	800a6e6 <__sflush_r+0xda>
 800a712:	bf00      	nop
 800a714:	dfbffffe 	.word	0xdfbffffe

0800a718 <_fflush_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	690b      	ldr	r3, [r1, #16]
 800a71c:	4605      	mov	r5, r0
 800a71e:	460c      	mov	r4, r1
 800a720:	b913      	cbnz	r3, 800a728 <_fflush_r+0x10>
 800a722:	2500      	movs	r5, #0
 800a724:	4628      	mov	r0, r5
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	b118      	cbz	r0, 800a732 <_fflush_r+0x1a>
 800a72a:	6a03      	ldr	r3, [r0, #32]
 800a72c:	b90b      	cbnz	r3, 800a732 <_fflush_r+0x1a>
 800a72e:	f7fe fa03 	bl	8008b38 <__sinit>
 800a732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d0f3      	beq.n	800a722 <_fflush_r+0xa>
 800a73a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a73c:	07d0      	lsls	r0, r2, #31
 800a73e:	d404      	bmi.n	800a74a <_fflush_r+0x32>
 800a740:	0599      	lsls	r1, r3, #22
 800a742:	d402      	bmi.n	800a74a <_fflush_r+0x32>
 800a744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a746:	f7fe fb0e 	bl	8008d66 <__retarget_lock_acquire_recursive>
 800a74a:	4628      	mov	r0, r5
 800a74c:	4621      	mov	r1, r4
 800a74e:	f7ff ff5d 	bl	800a60c <__sflush_r>
 800a752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a754:	07da      	lsls	r2, r3, #31
 800a756:	4605      	mov	r5, r0
 800a758:	d4e4      	bmi.n	800a724 <_fflush_r+0xc>
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	059b      	lsls	r3, r3, #22
 800a75e:	d4e1      	bmi.n	800a724 <_fflush_r+0xc>
 800a760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a762:	f7fe fb01 	bl	8008d68 <__retarget_lock_release_recursive>
 800a766:	e7dd      	b.n	800a724 <_fflush_r+0xc>

0800a768 <memmove>:
 800a768:	4288      	cmp	r0, r1
 800a76a:	b510      	push	{r4, lr}
 800a76c:	eb01 0402 	add.w	r4, r1, r2
 800a770:	d902      	bls.n	800a778 <memmove+0x10>
 800a772:	4284      	cmp	r4, r0
 800a774:	4623      	mov	r3, r4
 800a776:	d807      	bhi.n	800a788 <memmove+0x20>
 800a778:	1e43      	subs	r3, r0, #1
 800a77a:	42a1      	cmp	r1, r4
 800a77c:	d008      	beq.n	800a790 <memmove+0x28>
 800a77e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a782:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a786:	e7f8      	b.n	800a77a <memmove+0x12>
 800a788:	4402      	add	r2, r0
 800a78a:	4601      	mov	r1, r0
 800a78c:	428a      	cmp	r2, r1
 800a78e:	d100      	bne.n	800a792 <memmove+0x2a>
 800a790:	bd10      	pop	{r4, pc}
 800a792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a79a:	e7f7      	b.n	800a78c <memmove+0x24>

0800a79c <_sbrk_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d06      	ldr	r5, [pc, #24]	; (800a7b8 <_sbrk_r+0x1c>)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	602b      	str	r3, [r5, #0]
 800a7a8:	f7f7 ff34 	bl	8002614 <_sbrk>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_sbrk_r+0x1a>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_sbrk_r+0x1a>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	20000a88 	.word	0x20000a88

0800a7bc <memcpy>:
 800a7bc:	440a      	add	r2, r1
 800a7be:	4291      	cmp	r1, r2
 800a7c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7c4:	d100      	bne.n	800a7c8 <memcpy+0xc>
 800a7c6:	4770      	bx	lr
 800a7c8:	b510      	push	{r4, lr}
 800a7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7d2:	4291      	cmp	r1, r2
 800a7d4:	d1f9      	bne.n	800a7ca <memcpy+0xe>
 800a7d6:	bd10      	pop	{r4, pc}

0800a7d8 <__assert_func>:
 800a7d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7da:	4614      	mov	r4, r2
 800a7dc:	461a      	mov	r2, r3
 800a7de:	4b09      	ldr	r3, [pc, #36]	; (800a804 <__assert_func+0x2c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	68d8      	ldr	r0, [r3, #12]
 800a7e6:	b14c      	cbz	r4, 800a7fc <__assert_func+0x24>
 800a7e8:	4b07      	ldr	r3, [pc, #28]	; (800a808 <__assert_func+0x30>)
 800a7ea:	9100      	str	r1, [sp, #0]
 800a7ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7f0:	4906      	ldr	r1, [pc, #24]	; (800a80c <__assert_func+0x34>)
 800a7f2:	462b      	mov	r3, r5
 800a7f4:	f000 f872 	bl	800a8dc <fiprintf>
 800a7f8:	f000 f882 	bl	800a900 <abort>
 800a7fc:	4b04      	ldr	r3, [pc, #16]	; (800a810 <__assert_func+0x38>)
 800a7fe:	461c      	mov	r4, r3
 800a800:	e7f3      	b.n	800a7ea <__assert_func+0x12>
 800a802:	bf00      	nop
 800a804:	20000080 	.word	0x20000080
 800a808:	0800b27f 	.word	0x0800b27f
 800a80c:	0800b28c 	.word	0x0800b28c
 800a810:	0800b2ba 	.word	0x0800b2ba

0800a814 <_calloc_r>:
 800a814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a816:	fba1 2402 	umull	r2, r4, r1, r2
 800a81a:	b94c      	cbnz	r4, 800a830 <_calloc_r+0x1c>
 800a81c:	4611      	mov	r1, r2
 800a81e:	9201      	str	r2, [sp, #4]
 800a820:	f7ff f994 	bl	8009b4c <_malloc_r>
 800a824:	9a01      	ldr	r2, [sp, #4]
 800a826:	4605      	mov	r5, r0
 800a828:	b930      	cbnz	r0, 800a838 <_calloc_r+0x24>
 800a82a:	4628      	mov	r0, r5
 800a82c:	b003      	add	sp, #12
 800a82e:	bd30      	pop	{r4, r5, pc}
 800a830:	220c      	movs	r2, #12
 800a832:	6002      	str	r2, [r0, #0]
 800a834:	2500      	movs	r5, #0
 800a836:	e7f8      	b.n	800a82a <_calloc_r+0x16>
 800a838:	4621      	mov	r1, r4
 800a83a:	f7fe fa16 	bl	8008c6a <memset>
 800a83e:	e7f4      	b.n	800a82a <_calloc_r+0x16>

0800a840 <__ascii_mbtowc>:
 800a840:	b082      	sub	sp, #8
 800a842:	b901      	cbnz	r1, 800a846 <__ascii_mbtowc+0x6>
 800a844:	a901      	add	r1, sp, #4
 800a846:	b142      	cbz	r2, 800a85a <__ascii_mbtowc+0x1a>
 800a848:	b14b      	cbz	r3, 800a85e <__ascii_mbtowc+0x1e>
 800a84a:	7813      	ldrb	r3, [r2, #0]
 800a84c:	600b      	str	r3, [r1, #0]
 800a84e:	7812      	ldrb	r2, [r2, #0]
 800a850:	1e10      	subs	r0, r2, #0
 800a852:	bf18      	it	ne
 800a854:	2001      	movne	r0, #1
 800a856:	b002      	add	sp, #8
 800a858:	4770      	bx	lr
 800a85a:	4610      	mov	r0, r2
 800a85c:	e7fb      	b.n	800a856 <__ascii_mbtowc+0x16>
 800a85e:	f06f 0001 	mvn.w	r0, #1
 800a862:	e7f8      	b.n	800a856 <__ascii_mbtowc+0x16>

0800a864 <_realloc_r>:
 800a864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a868:	4680      	mov	r8, r0
 800a86a:	4614      	mov	r4, r2
 800a86c:	460e      	mov	r6, r1
 800a86e:	b921      	cbnz	r1, 800a87a <_realloc_r+0x16>
 800a870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a874:	4611      	mov	r1, r2
 800a876:	f7ff b969 	b.w	8009b4c <_malloc_r>
 800a87a:	b92a      	cbnz	r2, 800a888 <_realloc_r+0x24>
 800a87c:	f7ff f8f2 	bl	8009a64 <_free_r>
 800a880:	4625      	mov	r5, r4
 800a882:	4628      	mov	r0, r5
 800a884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a888:	f000 f841 	bl	800a90e <_malloc_usable_size_r>
 800a88c:	4284      	cmp	r4, r0
 800a88e:	4607      	mov	r7, r0
 800a890:	d802      	bhi.n	800a898 <_realloc_r+0x34>
 800a892:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a896:	d812      	bhi.n	800a8be <_realloc_r+0x5a>
 800a898:	4621      	mov	r1, r4
 800a89a:	4640      	mov	r0, r8
 800a89c:	f7ff f956 	bl	8009b4c <_malloc_r>
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d0ed      	beq.n	800a882 <_realloc_r+0x1e>
 800a8a6:	42bc      	cmp	r4, r7
 800a8a8:	4622      	mov	r2, r4
 800a8aa:	4631      	mov	r1, r6
 800a8ac:	bf28      	it	cs
 800a8ae:	463a      	movcs	r2, r7
 800a8b0:	f7ff ff84 	bl	800a7bc <memcpy>
 800a8b4:	4631      	mov	r1, r6
 800a8b6:	4640      	mov	r0, r8
 800a8b8:	f7ff f8d4 	bl	8009a64 <_free_r>
 800a8bc:	e7e1      	b.n	800a882 <_realloc_r+0x1e>
 800a8be:	4635      	mov	r5, r6
 800a8c0:	e7df      	b.n	800a882 <_realloc_r+0x1e>

0800a8c2 <__ascii_wctomb>:
 800a8c2:	b149      	cbz	r1, 800a8d8 <__ascii_wctomb+0x16>
 800a8c4:	2aff      	cmp	r2, #255	; 0xff
 800a8c6:	bf85      	ittet	hi
 800a8c8:	238a      	movhi	r3, #138	; 0x8a
 800a8ca:	6003      	strhi	r3, [r0, #0]
 800a8cc:	700a      	strbls	r2, [r1, #0]
 800a8ce:	f04f 30ff 	movhi.w	r0, #4294967295
 800a8d2:	bf98      	it	ls
 800a8d4:	2001      	movls	r0, #1
 800a8d6:	4770      	bx	lr
 800a8d8:	4608      	mov	r0, r1
 800a8da:	4770      	bx	lr

0800a8dc <fiprintf>:
 800a8dc:	b40e      	push	{r1, r2, r3}
 800a8de:	b503      	push	{r0, r1, lr}
 800a8e0:	4601      	mov	r1, r0
 800a8e2:	ab03      	add	r3, sp, #12
 800a8e4:	4805      	ldr	r0, [pc, #20]	; (800a8fc <fiprintf+0x20>)
 800a8e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ea:	6800      	ldr	r0, [r0, #0]
 800a8ec:	9301      	str	r3, [sp, #4]
 800a8ee:	f000 f83f 	bl	800a970 <_vfiprintf_r>
 800a8f2:	b002      	add	sp, #8
 800a8f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8f8:	b003      	add	sp, #12
 800a8fa:	4770      	bx	lr
 800a8fc:	20000080 	.word	0x20000080

0800a900 <abort>:
 800a900:	b508      	push	{r3, lr}
 800a902:	2006      	movs	r0, #6
 800a904:	f000 fa0c 	bl	800ad20 <raise>
 800a908:	2001      	movs	r0, #1
 800a90a:	f7f7 fe0b 	bl	8002524 <_exit>

0800a90e <_malloc_usable_size_r>:
 800a90e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a912:	1f18      	subs	r0, r3, #4
 800a914:	2b00      	cmp	r3, #0
 800a916:	bfbc      	itt	lt
 800a918:	580b      	ldrlt	r3, [r1, r0]
 800a91a:	18c0      	addlt	r0, r0, r3
 800a91c:	4770      	bx	lr

0800a91e <__sfputc_r>:
 800a91e:	6893      	ldr	r3, [r2, #8]
 800a920:	3b01      	subs	r3, #1
 800a922:	2b00      	cmp	r3, #0
 800a924:	b410      	push	{r4}
 800a926:	6093      	str	r3, [r2, #8]
 800a928:	da08      	bge.n	800a93c <__sfputc_r+0x1e>
 800a92a:	6994      	ldr	r4, [r2, #24]
 800a92c:	42a3      	cmp	r3, r4
 800a92e:	db01      	blt.n	800a934 <__sfputc_r+0x16>
 800a930:	290a      	cmp	r1, #10
 800a932:	d103      	bne.n	800a93c <__sfputc_r+0x1e>
 800a934:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a938:	f000 b934 	b.w	800aba4 <__swbuf_r>
 800a93c:	6813      	ldr	r3, [r2, #0]
 800a93e:	1c58      	adds	r0, r3, #1
 800a940:	6010      	str	r0, [r2, #0]
 800a942:	7019      	strb	r1, [r3, #0]
 800a944:	4608      	mov	r0, r1
 800a946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <__sfputs_r>:
 800a94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94e:	4606      	mov	r6, r0
 800a950:	460f      	mov	r7, r1
 800a952:	4614      	mov	r4, r2
 800a954:	18d5      	adds	r5, r2, r3
 800a956:	42ac      	cmp	r4, r5
 800a958:	d101      	bne.n	800a95e <__sfputs_r+0x12>
 800a95a:	2000      	movs	r0, #0
 800a95c:	e007      	b.n	800a96e <__sfputs_r+0x22>
 800a95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a962:	463a      	mov	r2, r7
 800a964:	4630      	mov	r0, r6
 800a966:	f7ff ffda 	bl	800a91e <__sfputc_r>
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	d1f3      	bne.n	800a956 <__sfputs_r+0xa>
 800a96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a970 <_vfiprintf_r>:
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	460d      	mov	r5, r1
 800a976:	b09d      	sub	sp, #116	; 0x74
 800a978:	4614      	mov	r4, r2
 800a97a:	4698      	mov	r8, r3
 800a97c:	4606      	mov	r6, r0
 800a97e:	b118      	cbz	r0, 800a988 <_vfiprintf_r+0x18>
 800a980:	6a03      	ldr	r3, [r0, #32]
 800a982:	b90b      	cbnz	r3, 800a988 <_vfiprintf_r+0x18>
 800a984:	f7fe f8d8 	bl	8008b38 <__sinit>
 800a988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a98a:	07d9      	lsls	r1, r3, #31
 800a98c:	d405      	bmi.n	800a99a <_vfiprintf_r+0x2a>
 800a98e:	89ab      	ldrh	r3, [r5, #12]
 800a990:	059a      	lsls	r2, r3, #22
 800a992:	d402      	bmi.n	800a99a <_vfiprintf_r+0x2a>
 800a994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a996:	f7fe f9e6 	bl	8008d66 <__retarget_lock_acquire_recursive>
 800a99a:	89ab      	ldrh	r3, [r5, #12]
 800a99c:	071b      	lsls	r3, r3, #28
 800a99e:	d501      	bpl.n	800a9a4 <_vfiprintf_r+0x34>
 800a9a0:	692b      	ldr	r3, [r5, #16]
 800a9a2:	b99b      	cbnz	r3, 800a9cc <_vfiprintf_r+0x5c>
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f000 f93a 	bl	800ac20 <__swsetup_r>
 800a9ac:	b170      	cbz	r0, 800a9cc <_vfiprintf_r+0x5c>
 800a9ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9b0:	07dc      	lsls	r4, r3, #31
 800a9b2:	d504      	bpl.n	800a9be <_vfiprintf_r+0x4e>
 800a9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b8:	b01d      	add	sp, #116	; 0x74
 800a9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9be:	89ab      	ldrh	r3, [r5, #12]
 800a9c0:	0598      	lsls	r0, r3, #22
 800a9c2:	d4f7      	bmi.n	800a9b4 <_vfiprintf_r+0x44>
 800a9c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9c6:	f7fe f9cf 	bl	8008d68 <__retarget_lock_release_recursive>
 800a9ca:	e7f3      	b.n	800a9b4 <_vfiprintf_r+0x44>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d0:	2320      	movs	r3, #32
 800a9d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9da:	2330      	movs	r3, #48	; 0x30
 800a9dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ab90 <_vfiprintf_r+0x220>
 800a9e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9e4:	f04f 0901 	mov.w	r9, #1
 800a9e8:	4623      	mov	r3, r4
 800a9ea:	469a      	mov	sl, r3
 800a9ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9f0:	b10a      	cbz	r2, 800a9f6 <_vfiprintf_r+0x86>
 800a9f2:	2a25      	cmp	r2, #37	; 0x25
 800a9f4:	d1f9      	bne.n	800a9ea <_vfiprintf_r+0x7a>
 800a9f6:	ebba 0b04 	subs.w	fp, sl, r4
 800a9fa:	d00b      	beq.n	800aa14 <_vfiprintf_r+0xa4>
 800a9fc:	465b      	mov	r3, fp
 800a9fe:	4622      	mov	r2, r4
 800aa00:	4629      	mov	r1, r5
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7ff ffa2 	bl	800a94c <__sfputs_r>
 800aa08:	3001      	adds	r0, #1
 800aa0a:	f000 80a9 	beq.w	800ab60 <_vfiprintf_r+0x1f0>
 800aa0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa10:	445a      	add	r2, fp
 800aa12:	9209      	str	r2, [sp, #36]	; 0x24
 800aa14:	f89a 3000 	ldrb.w	r3, [sl]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 80a1 	beq.w	800ab60 <_vfiprintf_r+0x1f0>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f04f 32ff 	mov.w	r2, #4294967295
 800aa24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa28:	f10a 0a01 	add.w	sl, sl, #1
 800aa2c:	9304      	str	r3, [sp, #16]
 800aa2e:	9307      	str	r3, [sp, #28]
 800aa30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa34:	931a      	str	r3, [sp, #104]	; 0x68
 800aa36:	4654      	mov	r4, sl
 800aa38:	2205      	movs	r2, #5
 800aa3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa3e:	4854      	ldr	r0, [pc, #336]	; (800ab90 <_vfiprintf_r+0x220>)
 800aa40:	f7f5 fbe6 	bl	8000210 <memchr>
 800aa44:	9a04      	ldr	r2, [sp, #16]
 800aa46:	b9d8      	cbnz	r0, 800aa80 <_vfiprintf_r+0x110>
 800aa48:	06d1      	lsls	r1, r2, #27
 800aa4a:	bf44      	itt	mi
 800aa4c:	2320      	movmi	r3, #32
 800aa4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa52:	0713      	lsls	r3, r2, #28
 800aa54:	bf44      	itt	mi
 800aa56:	232b      	movmi	r3, #43	; 0x2b
 800aa58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa5c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa60:	2b2a      	cmp	r3, #42	; 0x2a
 800aa62:	d015      	beq.n	800aa90 <_vfiprintf_r+0x120>
 800aa64:	9a07      	ldr	r2, [sp, #28]
 800aa66:	4654      	mov	r4, sl
 800aa68:	2000      	movs	r0, #0
 800aa6a:	f04f 0c0a 	mov.w	ip, #10
 800aa6e:	4621      	mov	r1, r4
 800aa70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa74:	3b30      	subs	r3, #48	; 0x30
 800aa76:	2b09      	cmp	r3, #9
 800aa78:	d94d      	bls.n	800ab16 <_vfiprintf_r+0x1a6>
 800aa7a:	b1b0      	cbz	r0, 800aaaa <_vfiprintf_r+0x13a>
 800aa7c:	9207      	str	r2, [sp, #28]
 800aa7e:	e014      	b.n	800aaaa <_vfiprintf_r+0x13a>
 800aa80:	eba0 0308 	sub.w	r3, r0, r8
 800aa84:	fa09 f303 	lsl.w	r3, r9, r3
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	9304      	str	r3, [sp, #16]
 800aa8c:	46a2      	mov	sl, r4
 800aa8e:	e7d2      	b.n	800aa36 <_vfiprintf_r+0xc6>
 800aa90:	9b03      	ldr	r3, [sp, #12]
 800aa92:	1d19      	adds	r1, r3, #4
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	9103      	str	r1, [sp, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	bfbb      	ittet	lt
 800aa9c:	425b      	neglt	r3, r3
 800aa9e:	f042 0202 	orrlt.w	r2, r2, #2
 800aaa2:	9307      	strge	r3, [sp, #28]
 800aaa4:	9307      	strlt	r3, [sp, #28]
 800aaa6:	bfb8      	it	lt
 800aaa8:	9204      	strlt	r2, [sp, #16]
 800aaaa:	7823      	ldrb	r3, [r4, #0]
 800aaac:	2b2e      	cmp	r3, #46	; 0x2e
 800aaae:	d10c      	bne.n	800aaca <_vfiprintf_r+0x15a>
 800aab0:	7863      	ldrb	r3, [r4, #1]
 800aab2:	2b2a      	cmp	r3, #42	; 0x2a
 800aab4:	d134      	bne.n	800ab20 <_vfiprintf_r+0x1b0>
 800aab6:	9b03      	ldr	r3, [sp, #12]
 800aab8:	1d1a      	adds	r2, r3, #4
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	9203      	str	r2, [sp, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	bfb8      	it	lt
 800aac2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aac6:	3402      	adds	r4, #2
 800aac8:	9305      	str	r3, [sp, #20]
 800aaca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aba0 <_vfiprintf_r+0x230>
 800aace:	7821      	ldrb	r1, [r4, #0]
 800aad0:	2203      	movs	r2, #3
 800aad2:	4650      	mov	r0, sl
 800aad4:	f7f5 fb9c 	bl	8000210 <memchr>
 800aad8:	b138      	cbz	r0, 800aaea <_vfiprintf_r+0x17a>
 800aada:	9b04      	ldr	r3, [sp, #16]
 800aadc:	eba0 000a 	sub.w	r0, r0, sl
 800aae0:	2240      	movs	r2, #64	; 0x40
 800aae2:	4082      	lsls	r2, r0
 800aae4:	4313      	orrs	r3, r2
 800aae6:	3401      	adds	r4, #1
 800aae8:	9304      	str	r3, [sp, #16]
 800aaea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaee:	4829      	ldr	r0, [pc, #164]	; (800ab94 <_vfiprintf_r+0x224>)
 800aaf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aaf4:	2206      	movs	r2, #6
 800aaf6:	f7f5 fb8b 	bl	8000210 <memchr>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d03f      	beq.n	800ab7e <_vfiprintf_r+0x20e>
 800aafe:	4b26      	ldr	r3, [pc, #152]	; (800ab98 <_vfiprintf_r+0x228>)
 800ab00:	bb1b      	cbnz	r3, 800ab4a <_vfiprintf_r+0x1da>
 800ab02:	9b03      	ldr	r3, [sp, #12]
 800ab04:	3307      	adds	r3, #7
 800ab06:	f023 0307 	bic.w	r3, r3, #7
 800ab0a:	3308      	adds	r3, #8
 800ab0c:	9303      	str	r3, [sp, #12]
 800ab0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab10:	443b      	add	r3, r7
 800ab12:	9309      	str	r3, [sp, #36]	; 0x24
 800ab14:	e768      	b.n	800a9e8 <_vfiprintf_r+0x78>
 800ab16:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	2001      	movs	r0, #1
 800ab1e:	e7a6      	b.n	800aa6e <_vfiprintf_r+0xfe>
 800ab20:	2300      	movs	r3, #0
 800ab22:	3401      	adds	r4, #1
 800ab24:	9305      	str	r3, [sp, #20]
 800ab26:	4619      	mov	r1, r3
 800ab28:	f04f 0c0a 	mov.w	ip, #10
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab32:	3a30      	subs	r2, #48	; 0x30
 800ab34:	2a09      	cmp	r2, #9
 800ab36:	d903      	bls.n	800ab40 <_vfiprintf_r+0x1d0>
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d0c6      	beq.n	800aaca <_vfiprintf_r+0x15a>
 800ab3c:	9105      	str	r1, [sp, #20]
 800ab3e:	e7c4      	b.n	800aaca <_vfiprintf_r+0x15a>
 800ab40:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab44:	4604      	mov	r4, r0
 800ab46:	2301      	movs	r3, #1
 800ab48:	e7f0      	b.n	800ab2c <_vfiprintf_r+0x1bc>
 800ab4a:	ab03      	add	r3, sp, #12
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	462a      	mov	r2, r5
 800ab50:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <_vfiprintf_r+0x22c>)
 800ab52:	a904      	add	r1, sp, #16
 800ab54:	4630      	mov	r0, r6
 800ab56:	f7fd fb9d 	bl	8008294 <_printf_float>
 800ab5a:	4607      	mov	r7, r0
 800ab5c:	1c78      	adds	r0, r7, #1
 800ab5e:	d1d6      	bne.n	800ab0e <_vfiprintf_r+0x19e>
 800ab60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab62:	07d9      	lsls	r1, r3, #31
 800ab64:	d405      	bmi.n	800ab72 <_vfiprintf_r+0x202>
 800ab66:	89ab      	ldrh	r3, [r5, #12]
 800ab68:	059a      	lsls	r2, r3, #22
 800ab6a:	d402      	bmi.n	800ab72 <_vfiprintf_r+0x202>
 800ab6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab6e:	f7fe f8fb 	bl	8008d68 <__retarget_lock_release_recursive>
 800ab72:	89ab      	ldrh	r3, [r5, #12]
 800ab74:	065b      	lsls	r3, r3, #25
 800ab76:	f53f af1d 	bmi.w	800a9b4 <_vfiprintf_r+0x44>
 800ab7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab7c:	e71c      	b.n	800a9b8 <_vfiprintf_r+0x48>
 800ab7e:	ab03      	add	r3, sp, #12
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	462a      	mov	r2, r5
 800ab84:	4b05      	ldr	r3, [pc, #20]	; (800ab9c <_vfiprintf_r+0x22c>)
 800ab86:	a904      	add	r1, sp, #16
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f7fd fe27 	bl	80087dc <_printf_i>
 800ab8e:	e7e4      	b.n	800ab5a <_vfiprintf_r+0x1ea>
 800ab90:	0800b264 	.word	0x0800b264
 800ab94:	0800b26e 	.word	0x0800b26e
 800ab98:	08008295 	.word	0x08008295
 800ab9c:	0800a94d 	.word	0x0800a94d
 800aba0:	0800b26a 	.word	0x0800b26a

0800aba4 <__swbuf_r>:
 800aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba6:	460e      	mov	r6, r1
 800aba8:	4614      	mov	r4, r2
 800abaa:	4605      	mov	r5, r0
 800abac:	b118      	cbz	r0, 800abb6 <__swbuf_r+0x12>
 800abae:	6a03      	ldr	r3, [r0, #32]
 800abb0:	b90b      	cbnz	r3, 800abb6 <__swbuf_r+0x12>
 800abb2:	f7fd ffc1 	bl	8008b38 <__sinit>
 800abb6:	69a3      	ldr	r3, [r4, #24]
 800abb8:	60a3      	str	r3, [r4, #8]
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	071a      	lsls	r2, r3, #28
 800abbe:	d525      	bpl.n	800ac0c <__swbuf_r+0x68>
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	b31b      	cbz	r3, 800ac0c <__swbuf_r+0x68>
 800abc4:	6823      	ldr	r3, [r4, #0]
 800abc6:	6922      	ldr	r2, [r4, #16]
 800abc8:	1a98      	subs	r0, r3, r2
 800abca:	6963      	ldr	r3, [r4, #20]
 800abcc:	b2f6      	uxtb	r6, r6
 800abce:	4283      	cmp	r3, r0
 800abd0:	4637      	mov	r7, r6
 800abd2:	dc04      	bgt.n	800abde <__swbuf_r+0x3a>
 800abd4:	4621      	mov	r1, r4
 800abd6:	4628      	mov	r0, r5
 800abd8:	f7ff fd9e 	bl	800a718 <_fflush_r>
 800abdc:	b9e0      	cbnz	r0, 800ac18 <__swbuf_r+0x74>
 800abde:	68a3      	ldr	r3, [r4, #8]
 800abe0:	3b01      	subs	r3, #1
 800abe2:	60a3      	str	r3, [r4, #8]
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	1c5a      	adds	r2, r3, #1
 800abe8:	6022      	str	r2, [r4, #0]
 800abea:	701e      	strb	r6, [r3, #0]
 800abec:	6962      	ldr	r2, [r4, #20]
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d004      	beq.n	800abfe <__swbuf_r+0x5a>
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	07db      	lsls	r3, r3, #31
 800abf8:	d506      	bpl.n	800ac08 <__swbuf_r+0x64>
 800abfa:	2e0a      	cmp	r6, #10
 800abfc:	d104      	bne.n	800ac08 <__swbuf_r+0x64>
 800abfe:	4621      	mov	r1, r4
 800ac00:	4628      	mov	r0, r5
 800ac02:	f7ff fd89 	bl	800a718 <_fflush_r>
 800ac06:	b938      	cbnz	r0, 800ac18 <__swbuf_r+0x74>
 800ac08:	4638      	mov	r0, r7
 800ac0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f000 f806 	bl	800ac20 <__swsetup_r>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d0d5      	beq.n	800abc4 <__swbuf_r+0x20>
 800ac18:	f04f 37ff 	mov.w	r7, #4294967295
 800ac1c:	e7f4      	b.n	800ac08 <__swbuf_r+0x64>
	...

0800ac20 <__swsetup_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4b2a      	ldr	r3, [pc, #168]	; (800accc <__swsetup_r+0xac>)
 800ac24:	4605      	mov	r5, r0
 800ac26:	6818      	ldr	r0, [r3, #0]
 800ac28:	460c      	mov	r4, r1
 800ac2a:	b118      	cbz	r0, 800ac34 <__swsetup_r+0x14>
 800ac2c:	6a03      	ldr	r3, [r0, #32]
 800ac2e:	b90b      	cbnz	r3, 800ac34 <__swsetup_r+0x14>
 800ac30:	f7fd ff82 	bl	8008b38 <__sinit>
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac3a:	0718      	lsls	r0, r3, #28
 800ac3c:	d422      	bmi.n	800ac84 <__swsetup_r+0x64>
 800ac3e:	06d9      	lsls	r1, r3, #27
 800ac40:	d407      	bmi.n	800ac52 <__swsetup_r+0x32>
 800ac42:	2309      	movs	r3, #9
 800ac44:	602b      	str	r3, [r5, #0]
 800ac46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac4a:	81a3      	strh	r3, [r4, #12]
 800ac4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac50:	e034      	b.n	800acbc <__swsetup_r+0x9c>
 800ac52:	0758      	lsls	r0, r3, #29
 800ac54:	d512      	bpl.n	800ac7c <__swsetup_r+0x5c>
 800ac56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac58:	b141      	cbz	r1, 800ac6c <__swsetup_r+0x4c>
 800ac5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac5e:	4299      	cmp	r1, r3
 800ac60:	d002      	beq.n	800ac68 <__swsetup_r+0x48>
 800ac62:	4628      	mov	r0, r5
 800ac64:	f7fe fefe 	bl	8009a64 <_free_r>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	6363      	str	r3, [r4, #52]	; 0x34
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac72:	81a3      	strh	r3, [r4, #12]
 800ac74:	2300      	movs	r3, #0
 800ac76:	6063      	str	r3, [r4, #4]
 800ac78:	6923      	ldr	r3, [r4, #16]
 800ac7a:	6023      	str	r3, [r4, #0]
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	f043 0308 	orr.w	r3, r3, #8
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	6923      	ldr	r3, [r4, #16]
 800ac86:	b94b      	cbnz	r3, 800ac9c <__swsetup_r+0x7c>
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac92:	d003      	beq.n	800ac9c <__swsetup_r+0x7c>
 800ac94:	4621      	mov	r1, r4
 800ac96:	4628      	mov	r0, r5
 800ac98:	f000 f884 	bl	800ada4 <__smakebuf_r>
 800ac9c:	89a0      	ldrh	r0, [r4, #12]
 800ac9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aca2:	f010 0301 	ands.w	r3, r0, #1
 800aca6:	d00a      	beq.n	800acbe <__swsetup_r+0x9e>
 800aca8:	2300      	movs	r3, #0
 800acaa:	60a3      	str	r3, [r4, #8]
 800acac:	6963      	ldr	r3, [r4, #20]
 800acae:	425b      	negs	r3, r3
 800acb0:	61a3      	str	r3, [r4, #24]
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	b943      	cbnz	r3, 800acc8 <__swsetup_r+0xa8>
 800acb6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acba:	d1c4      	bne.n	800ac46 <__swsetup_r+0x26>
 800acbc:	bd38      	pop	{r3, r4, r5, pc}
 800acbe:	0781      	lsls	r1, r0, #30
 800acc0:	bf58      	it	pl
 800acc2:	6963      	ldrpl	r3, [r4, #20]
 800acc4:	60a3      	str	r3, [r4, #8]
 800acc6:	e7f4      	b.n	800acb2 <__swsetup_r+0x92>
 800acc8:	2000      	movs	r0, #0
 800acca:	e7f7      	b.n	800acbc <__swsetup_r+0x9c>
 800accc:	20000080 	.word	0x20000080

0800acd0 <_raise_r>:
 800acd0:	291f      	cmp	r1, #31
 800acd2:	b538      	push	{r3, r4, r5, lr}
 800acd4:	4604      	mov	r4, r0
 800acd6:	460d      	mov	r5, r1
 800acd8:	d904      	bls.n	800ace4 <_raise_r+0x14>
 800acda:	2316      	movs	r3, #22
 800acdc:	6003      	str	r3, [r0, #0]
 800acde:	f04f 30ff 	mov.w	r0, #4294967295
 800ace2:	bd38      	pop	{r3, r4, r5, pc}
 800ace4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ace6:	b112      	cbz	r2, 800acee <_raise_r+0x1e>
 800ace8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acec:	b94b      	cbnz	r3, 800ad02 <_raise_r+0x32>
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 f830 	bl	800ad54 <_getpid_r>
 800acf4:	462a      	mov	r2, r5
 800acf6:	4601      	mov	r1, r0
 800acf8:	4620      	mov	r0, r4
 800acfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acfe:	f000 b817 	b.w	800ad30 <_kill_r>
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d00a      	beq.n	800ad1c <_raise_r+0x4c>
 800ad06:	1c59      	adds	r1, r3, #1
 800ad08:	d103      	bne.n	800ad12 <_raise_r+0x42>
 800ad0a:	2316      	movs	r3, #22
 800ad0c:	6003      	str	r3, [r0, #0]
 800ad0e:	2001      	movs	r0, #1
 800ad10:	e7e7      	b.n	800ace2 <_raise_r+0x12>
 800ad12:	2400      	movs	r4, #0
 800ad14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad18:	4628      	mov	r0, r5
 800ad1a:	4798      	blx	r3
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	e7e0      	b.n	800ace2 <_raise_r+0x12>

0800ad20 <raise>:
 800ad20:	4b02      	ldr	r3, [pc, #8]	; (800ad2c <raise+0xc>)
 800ad22:	4601      	mov	r1, r0
 800ad24:	6818      	ldr	r0, [r3, #0]
 800ad26:	f7ff bfd3 	b.w	800acd0 <_raise_r>
 800ad2a:	bf00      	nop
 800ad2c:	20000080 	.word	0x20000080

0800ad30 <_kill_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4d07      	ldr	r5, [pc, #28]	; (800ad50 <_kill_r+0x20>)
 800ad34:	2300      	movs	r3, #0
 800ad36:	4604      	mov	r4, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	602b      	str	r3, [r5, #0]
 800ad3e:	f7f7 fbe1 	bl	8002504 <_kill>
 800ad42:	1c43      	adds	r3, r0, #1
 800ad44:	d102      	bne.n	800ad4c <_kill_r+0x1c>
 800ad46:	682b      	ldr	r3, [r5, #0]
 800ad48:	b103      	cbz	r3, 800ad4c <_kill_r+0x1c>
 800ad4a:	6023      	str	r3, [r4, #0]
 800ad4c:	bd38      	pop	{r3, r4, r5, pc}
 800ad4e:	bf00      	nop
 800ad50:	20000a88 	.word	0x20000a88

0800ad54 <_getpid_r>:
 800ad54:	f7f7 bbce 	b.w	80024f4 <_getpid>

0800ad58 <__swhatbuf_r>:
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad60:	2900      	cmp	r1, #0
 800ad62:	b096      	sub	sp, #88	; 0x58
 800ad64:	4615      	mov	r5, r2
 800ad66:	461e      	mov	r6, r3
 800ad68:	da0d      	bge.n	800ad86 <__swhatbuf_r+0x2e>
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad70:	f04f 0100 	mov.w	r1, #0
 800ad74:	bf0c      	ite	eq
 800ad76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ad7a:	2340      	movne	r3, #64	; 0x40
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	6031      	str	r1, [r6, #0]
 800ad80:	602b      	str	r3, [r5, #0]
 800ad82:	b016      	add	sp, #88	; 0x58
 800ad84:	bd70      	pop	{r4, r5, r6, pc}
 800ad86:	466a      	mov	r2, sp
 800ad88:	f000 f848 	bl	800ae1c <_fstat_r>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	dbec      	blt.n	800ad6a <__swhatbuf_r+0x12>
 800ad90:	9901      	ldr	r1, [sp, #4]
 800ad92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ad96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ad9a:	4259      	negs	r1, r3
 800ad9c:	4159      	adcs	r1, r3
 800ad9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ada2:	e7eb      	b.n	800ad7c <__swhatbuf_r+0x24>

0800ada4 <__smakebuf_r>:
 800ada4:	898b      	ldrh	r3, [r1, #12]
 800ada6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ada8:	079d      	lsls	r5, r3, #30
 800adaa:	4606      	mov	r6, r0
 800adac:	460c      	mov	r4, r1
 800adae:	d507      	bpl.n	800adc0 <__smakebuf_r+0x1c>
 800adb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	6123      	str	r3, [r4, #16]
 800adb8:	2301      	movs	r3, #1
 800adba:	6163      	str	r3, [r4, #20]
 800adbc:	b002      	add	sp, #8
 800adbe:	bd70      	pop	{r4, r5, r6, pc}
 800adc0:	ab01      	add	r3, sp, #4
 800adc2:	466a      	mov	r2, sp
 800adc4:	f7ff ffc8 	bl	800ad58 <__swhatbuf_r>
 800adc8:	9900      	ldr	r1, [sp, #0]
 800adca:	4605      	mov	r5, r0
 800adcc:	4630      	mov	r0, r6
 800adce:	f7fe febd 	bl	8009b4c <_malloc_r>
 800add2:	b948      	cbnz	r0, 800ade8 <__smakebuf_r+0x44>
 800add4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add8:	059a      	lsls	r2, r3, #22
 800adda:	d4ef      	bmi.n	800adbc <__smakebuf_r+0x18>
 800addc:	f023 0303 	bic.w	r3, r3, #3
 800ade0:	f043 0302 	orr.w	r3, r3, #2
 800ade4:	81a3      	strh	r3, [r4, #12]
 800ade6:	e7e3      	b.n	800adb0 <__smakebuf_r+0xc>
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	6020      	str	r0, [r4, #0]
 800adec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	9b00      	ldr	r3, [sp, #0]
 800adf4:	6163      	str	r3, [r4, #20]
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	6120      	str	r0, [r4, #16]
 800adfa:	b15b      	cbz	r3, 800ae14 <__smakebuf_r+0x70>
 800adfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae00:	4630      	mov	r0, r6
 800ae02:	f000 f81d 	bl	800ae40 <_isatty_r>
 800ae06:	b128      	cbz	r0, 800ae14 <__smakebuf_r+0x70>
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f023 0303 	bic.w	r3, r3, #3
 800ae0e:	f043 0301 	orr.w	r3, r3, #1
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	431d      	orrs	r5, r3
 800ae18:	81a5      	strh	r5, [r4, #12]
 800ae1a:	e7cf      	b.n	800adbc <__smakebuf_r+0x18>

0800ae1c <_fstat_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	4d07      	ldr	r5, [pc, #28]	; (800ae3c <_fstat_r+0x20>)
 800ae20:	2300      	movs	r3, #0
 800ae22:	4604      	mov	r4, r0
 800ae24:	4608      	mov	r0, r1
 800ae26:	4611      	mov	r1, r2
 800ae28:	602b      	str	r3, [r5, #0]
 800ae2a:	f7f7 fbca 	bl	80025c2 <_fstat>
 800ae2e:	1c43      	adds	r3, r0, #1
 800ae30:	d102      	bne.n	800ae38 <_fstat_r+0x1c>
 800ae32:	682b      	ldr	r3, [r5, #0]
 800ae34:	b103      	cbz	r3, 800ae38 <_fstat_r+0x1c>
 800ae36:	6023      	str	r3, [r4, #0]
 800ae38:	bd38      	pop	{r3, r4, r5, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20000a88 	.word	0x20000a88

0800ae40 <_isatty_r>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	4d06      	ldr	r5, [pc, #24]	; (800ae5c <_isatty_r+0x1c>)
 800ae44:	2300      	movs	r3, #0
 800ae46:	4604      	mov	r4, r0
 800ae48:	4608      	mov	r0, r1
 800ae4a:	602b      	str	r3, [r5, #0]
 800ae4c:	f7f7 fbc9 	bl	80025e2 <_isatty>
 800ae50:	1c43      	adds	r3, r0, #1
 800ae52:	d102      	bne.n	800ae5a <_isatty_r+0x1a>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	b103      	cbz	r3, 800ae5a <_isatty_r+0x1a>
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	20000a88 	.word	0x20000a88

0800ae60 <round>:
 800ae60:	ec53 2b10 	vmov	r2, r3, d0
 800ae64:	b570      	push	{r4, r5, r6, lr}
 800ae66:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800ae6a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800ae6e:	2813      	cmp	r0, #19
 800ae70:	ee10 5a10 	vmov	r5, s0
 800ae74:	4619      	mov	r1, r3
 800ae76:	dc18      	bgt.n	800aeaa <round+0x4a>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	da09      	bge.n	800ae90 <round+0x30>
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800ae82:	d103      	bne.n	800ae8c <round+0x2c>
 800ae84:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800ae88:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	e02a      	b.n	800aee6 <round+0x86>
 800ae90:	4c16      	ldr	r4, [pc, #88]	; (800aeec <round+0x8c>)
 800ae92:	4104      	asrs	r4, r0
 800ae94:	ea03 0604 	and.w	r6, r3, r4
 800ae98:	4316      	orrs	r6, r2
 800ae9a:	d011      	beq.n	800aec0 <round+0x60>
 800ae9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aea0:	4103      	asrs	r3, r0
 800aea2:	440b      	add	r3, r1
 800aea4:	ea23 0104 	bic.w	r1, r3, r4
 800aea8:	e7f0      	b.n	800ae8c <round+0x2c>
 800aeaa:	2833      	cmp	r0, #51	; 0x33
 800aeac:	dd0b      	ble.n	800aec6 <round+0x66>
 800aeae:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800aeb2:	d105      	bne.n	800aec0 <round+0x60>
 800aeb4:	ee10 0a10 	vmov	r0, s0
 800aeb8:	f7f5 fa08 	bl	80002cc <__adddf3>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	ec43 2b10 	vmov	d0, r2, r3
 800aec4:	bd70      	pop	{r4, r5, r6, pc}
 800aec6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800aeca:	f04f 34ff 	mov.w	r4, #4294967295
 800aece:	40f4      	lsrs	r4, r6
 800aed0:	4214      	tst	r4, r2
 800aed2:	d0f5      	beq.n	800aec0 <round+0x60>
 800aed4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800aed8:	2301      	movs	r3, #1
 800aeda:	4083      	lsls	r3, r0
 800aedc:	195b      	adds	r3, r3, r5
 800aede:	bf28      	it	cs
 800aee0:	3101      	addcs	r1, #1
 800aee2:	ea23 0304 	bic.w	r3, r3, r4
 800aee6:	461a      	mov	r2, r3
 800aee8:	460b      	mov	r3, r1
 800aeea:	e7e9      	b.n	800aec0 <round+0x60>
 800aeec:	000fffff 	.word	0x000fffff

0800aef0 <_init>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	bf00      	nop
 800aef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef6:	bc08      	pop	{r3}
 800aef8:	469e      	mov	lr, r3
 800aefa:	4770      	bx	lr

0800aefc <_fini>:
 800aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefe:	bf00      	nop
 800af00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af02:	bc08      	pop	{r3}
 800af04:	469e      	mov	lr, r3
 800af06:	4770      	bx	lr
